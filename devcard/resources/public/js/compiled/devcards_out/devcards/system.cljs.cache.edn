;; Analyzed by ClojureScript 1.7.170
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros, inline-resouce-file devcards.system, defonce-react-class cljs-react-reload.core}, :excludes #{}, :name devcards.system, :imports {History goog.History}, :requires {edn-rend devcards.util.edn-renderer, devcards.util.utils devcards.util.utils, EventType goog.history.EventType, goog.history.EventType goog.history.EventType, cljsjs.react cljsjs.react, cljs.core.async cljs.core.async, sablono.core sablono.core, History goog.History, cljsjs.react.dom cljsjs.react.dom, events goog.events, devcards.util.edn-renderer devcards.util.edn-renderer, goog.labs.userAgent.device goog.labs.userAgent.device, sab sablono.core, string clojure.string, utils devcards.util.utils, clojure.string clojure.string, goog.events goog.events, device goog.labs.userAgent.device}, :uses {timeout cljs.core.async, <! cljs.core.async, chan cljs.core.async, put! cljs.core.async}, :defs {prevent-> {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 28, :column 7, :end-line 28, :end-column 16, :arglists (quote ([f]))}, :name devcards.system/prevent->, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 16, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f]))}, hash-navigate {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 120, :column 7, :end-line 120, :end-column 20, :arglists (quote ([path]))}, :name devcards.system/hash-navigate, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 20, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, off-the-books {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 394, :column 7, :end-line 394, :end-column 20, :arglists (quote ([channel start-data first-message])), :doc "Run sequential messages off the books outside of the atom and\n   then difference the result so we can only display the new cards \n   that have arrived. This prevents multiple renders and allows us \n   to delete cards live."}, :name devcards.system/off-the-books, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 20, :method-params ([channel start-data first-message]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 394, :end-line 394, :max-fixed-arity 3, :fn-var true, :arglists (quote ([channel start-data first-message])), :doc "Run sequential messages off the books outside of the atom and\n   then difference the result so we can only display the new cards \n   that have arrived. This prevents multiple renders and allows us \n   to delete cards live."}, start-ui-with-renderer {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 422, :column 7, :end-line 422, :end-column 29, :arglists (quote ([channel renderer]))}, :name devcards.system/start-ui-with-renderer, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 29, :method-params ([channel renderer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 422, :end-line 422, :max-fixed-arity 2, :fn-var true, :arglists (quote ([channel renderer]))}, create-element* {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 45, :column 7, :end-line 45, :end-column 22, :arglists (quote ([tag id style-text]))}, :name devcards.system/create-element*, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 22, :method-params ([tag id style-text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists (quote ([tag id style-text]))}, current-page {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 204, :column 7, :end-line 204, :end-column 19, :arglists (quote ([data]))}, :name devcards.system/current-page, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 19, :method-params ([data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 1, :fn-var true, :arglists (quote ([data]))}, devcard? {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 133, :column 7, :end-line 133, :end-column 15, :arglists (quote ([d]))}, :name devcards.system/devcard?, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 15, :method-params ([d]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([d]))}, breadcrumbs {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 238, :column 7, :end-line 238, :end-column 18, :arglists (quote ([{:keys [current-path], :as state}]))}, :name devcards.system/breadcrumbs, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 18, :method-params ([p__23799]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [current-path], :as state}]))}, valid-path? {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 180, :column 7, :end-line 180, :end-column 18, :arglists (quote ([state path]))}, :name devcards.system/valid-path?, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 18, :method-params ([state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state path]))}, card-template {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 222, :column 7, :end-line 222, :end-column 20, :arglists (quote ([state-atom {:keys [path options func], :as card}]))}, :name devcards.system/card-template, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 20, :method-params ([state-atom p__23792]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state-atom {:keys [path options func], :as card}]))}, register-collision {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 147, :column 7, :end-line 147, :end-column 25, :arglists (quote ([state path]))}, :name devcards.system/register-collision, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 25, :method-params ([state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state path]))}, start-ui {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 445, :column 7, :end-line 445, :end-column 15, :arglists (quote ([channel]))}, :name devcards.system/start-ui, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 15, :method-params ([channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 445, :end-line 445, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channel]))}, set-current-path {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 192, :column 7, :end-line 192, :end-column 23, :arglists (quote ([{:keys [current-path], :as state} path]))}, :name devcards.system/set-current-path, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 23, :method-params ([p__23786 path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [current-path], :as state} path]))}, render-base-if-necessary! {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 88, :column 7, :end-line 88, :end-column 32, :arglists (quote ([]))}, :name devcards.system/render-base-if-necessary!, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, devcards-app-element-id {:name devcards.system/devcards-app-element-id, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 24, :column 1, :end-line 24, :end-column 29, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 24, :column 6, :end-line 24, :end-column 29}}, display-cards {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 216, :column 7, :end-line 216, :end-column 20, :arglists (quote ([cur]))}, :name devcards.system/display-cards, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 20, :method-params ([cur]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cur]))}, DevcardsRoot {:name devcards.system/DevcardsRoot, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 321, :column 1, :end-line 321, :end-column 34, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 321, :column 22, :end-line 321, :end-column 34}}, *devcard-data* {:name devcards.system/*devcard-data*, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 220, :column 1, :end-line 220, :end-column 30, :dynamic true, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 220, :column 16, :end-line 220, :end-column 30, :dynamic true}}, token->path {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 109, :column 7, :end-line 109, :end-column 18, :arglists (quote ([token]))}, :name devcards.system/token->path, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 18, :method-params ([token]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([token]))}, enforce-valid-path {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 184, :column 7, :end-line 184, :end-column 25, :arglists (quote ([state path]))}, :name devcards.system/enforce-valid-path, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 25, :method-params ([state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state path]))}, get-element-by-id {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 30, :column 7, :end-line 30, :end-column 24, :arglists (quote ([id]))}, :name devcards.system/get-element-by-id, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 24, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, devcards-app-node {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 32, :column 7, :end-line 32, :end-column 24, :arglists (quote ([]))}, :name devcards.system/devcards-app-node, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 24, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, render-cards {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 228, :column 7, :end-line 228, :end-column 19, :arglists (quote ([cards state-atom]))}, :name devcards.system/render-cards, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 19, :method-params ([cards state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 2, :fn-var true, :arglists (quote ([cards state-atom]))}, devcard-initial-data {:name devcards.system/devcard-initial-data, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 166, :column 1, :end-line 166, :end-column 26, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 166, :column 6, :end-line 166, :end-column 26}}, load-data-from-channel! {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 418, :column 7, :end-line 418, :end-column 30, :arglists (quote ([channel]))}, :name devcards.system/load-data-from-channel!, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 30, :method-params ([channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 418, :end-line 418, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channel]))}, dir-links {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 279, :column 7, :end-line 279, :end-column 16, :arglists (quote ([dirs state-atom]))}, :name devcards.system/dir-links, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 16, :method-params ([dirs state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dirs state-atom]))}, create-style-element {:name devcards.system/create-style-element, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 51, :column 1, :end-line 51, :end-column 26, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 51, :column 6, :end-line 51, :end-column 26}}, display-dir-paths {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 212, :column 7, :end-line 212, :end-column 24, :arglists (quote ([state]))}, :name devcards.system/display-dir-paths, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 24, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, history {:name devcards.system/history, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 100, :column 1, :end-line 100, :end-column 17, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 100, :column 10, :end-line 100, :end-column 17}}, navigate-to-path {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 272, :column 7, :end-line 272, :end-column 23, :arglists (quote ([key state-atom]))}, :name devcards.system/navigate-to-path, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 23, :method-params ([key state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 2, :fn-var true, :arglists (quote ([key state-atom]))}, dev-trans {:name devcards.system/dev-trans, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 150, :column 1, :end-line 150, :end-column 20, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 150, :column 11, :end-line 150, :end-column 20}}, path->token {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 106, :column 7, :end-line 106, :end-column 18, :arglists (quote ([path]))}, :name devcards.system/path->token, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 18, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, main-cards-template {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 232, :column 7, :end-line 232, :end-column 26, :arglists (quote ([state-atom]))}, :name devcards.system/main-cards-template, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 26, :method-params ([state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state-atom]))}, devcards-ui-setup {:name devcards.system/devcards-ui-setup, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 446, :column 3, :end-line 446, :end-column 29, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 446, :column 12, :end-line 446, :end-column 29}}, l {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 20, :column 7, :end-line 20, :end-column 8, :arglists (quote ([x]))}, :name devcards.system/l, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 8, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, renderer {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 332, :column 7, :end-line 332, :end-column 15, :arglists (quote ([state-atom]))}, :name devcards.system/renderer, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 15, :method-params ([state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state-atom]))}, prepend-child {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 54, :column 7, :end-line 54, :end-column 20, :arglists (quote ([node node2]))}, :name devcards.system/prepend-child, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 20, :method-params ([node node2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node node2]))}, breadcrumbs-templ {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 250, :column 7, :end-line 250, :end-column 24, :arglists (quote ([crumbs state-atom]))}, :name devcards.system/breadcrumbs-templ, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 24, :method-params ([crumbs state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :end-line 250, :max-fixed-arity 2, :fn-var true, :arglists (quote ([crumbs state-atom]))}, app-state {:name devcards.system/app-state, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 178, :column 1, :end-line 178, :end-column 19, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 178, :column 10, :end-line 178, :end-column 19}}, cljs-logo-svg {:name devcards.system/cljs-logo-svg, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 479, :column 1, :end-line 479, :end-column 19, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 479, :column 6, :end-line 479, :end-column 19}}, display-single-card? {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 209, :column 7, :end-line 209, :end-column 27, :arglists (quote ([state]))}, :name devcards.system/display-single-card?, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 27, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, path->unique-card-id {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 34, :column 7, :end-line 34, :end-column 27, :arglists (quote ([path]))}, :name devcards.system/path->unique-card-id, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 27, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path]))}, path-collision {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 141, :column 7, :end-line 141, :end-column 21, :arglists (quote ([state path]))}, :name devcards.system/path-collision, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 21, :method-params ([state path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state path]))}, add-to-current-path {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 187, :column 7, :end-line 187, :end-column 26, :arglists (quote ([{:keys [current-path], :as state} path]))}, :name devcards.system/add-to-current-path, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 26, :method-params ([p__23781 path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [current-path], :as state} path]))}, devcards-rendered-card-class {:name devcards.system/devcards-rendered-card-class, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 26, :column 1, :end-line 26, :end-column 34, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 26, :column 6, :end-line 26, :end-column 34}}, hash-routing-init {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 123, :column 7, :end-line 123, :end-column 24, :arglists (quote ([state-atom]))}, :name devcards.system/hash-routing-init, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 24, :method-params ([state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state-atom]))}, set-current-path! {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 200, :column 7, :end-line 200, :end-column 24, :arglists (quote ([state-atom path]))}, :name devcards.system/set-current-path!, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 24, :method-params ([state-atom path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state-atom path]))}, add-css-if-necessary! {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 59, :column 7, :end-line 59, :end-column 28, :arglists (quote ([]))}, :name devcards.system/add-css-if-necessary!, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 28, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, main-template {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 300, :column 7, :end-line 300, :end-column 20, :arglists (quote ([state-atom]))}, :name devcards.system/main-template, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 20, :method-params ([state-atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state-atom]))}, merge-in-new-data {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 382, :column 7, :end-line 382, :end-column 24, :arglists (quote ([state new-state]))}, :name devcards.system/merge-in-new-data, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 24, :method-params ([state new-state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 382, :end-line 382, :max-fixed-arity 2, :fn-var true, :arglists (quote ([state new-state]))}, create-script-element {:name devcards.system/create-script-element, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 52, :column 1, :end-line 52, :end-column 27, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 52, :column 6, :end-line 52, :end-column 27}}, cljs-logo {:protocol-inline nil, :meta {:file "/Users/jimmyhmiller/Documents/Code/PlayGround/devcard/resources/public/js/compiled/devcards_out/devcards/system.cljs", :line 508, :column 7, :end-line 508, :end-column 16, :arglists (quote ([]))}, :name devcards.system/cljs-logo, :variadic false, :file "resources/public/js/compiled/devcards_out/devcards/system.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 508, :end-line 508, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, devcards.system devcards.system, cljs-react-reload.core cljs-react-reload.core, sab sablono.core, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{cljs-react-reload.core/componentWillReceiveProps :path :path-collision-count :cardpath cljs-react-reload.core/shouldComponentUpdate :frame :key cljs-react-reload.core/componentWillUpdate :inspect-data :else :default :func cljs-react-reload.core/componentDidMount cljs-react-reload.core/componentWillMount :history :recur :current-path :delete-card :watch-atom :hidden cljs-react-reload.core/render :class :padding :renderer-watch :cards :position :options :__html cljs-react-reload.core/componentWillUnmount :devcards :hierarchy :jsreload :base-card-options :register-card cljs-react-reload.core/componentDidUpdate :dangerouslySetInnerHTML :devcards-render :heading}, :order [:cardpath :func :path :position :path-collision-count :hierarchy :default :register-card :options :cards :current-path :base-card-options :frame :heading :padding :hidden :inspect-data :watch-atom :history :delete-card :devcards :class :renderer-watch cljs-react-reload.core/shouldComponentUpdate cljs-react-reload.core/componentWillReceiveProps cljs-react-reload.core/componentWillMount cljs-react-reload.core/componentDidMount cljs-react-reload.core/componentWillUpdate cljs-react-reload.core/componentDidUpdate cljs-react-reload.core/componentWillUnmount cljs-react-reload.core/render :recur :else :jsreload :devcards-render :key :dangerouslySetInnerHTML :__html]}, :doc nil}