

Tank.printingHandler : '{Tank} () -> {IO} ()
Tank.printingHandler tank =
    h = cases
        {r} -> ()
        {Tank.accelerate -> k} ->
            println "Accelerate"
            handle !k with h

        {Tank.rotateLeft(Just(angle)) -> k} -> 
            println ("RotateLeft" ++ toText(angle))
            handle !k with h
                        
        {Tank.rotateRight(Just(angle)) -> k} -> 
            println ("RotateRight" ++ toText(angle))
            handle !k with h

        {Tank.isAt((+0, +0)) -> k} ->
            println "At position!"
            handle k true with h

        {Tank.isAt((_, _)) -> k} ->
            println "Not At position!"
            handle (k false) with h

        {Tank.angleTo((_, _)) -> k} ->
            println "AngleTo"
            handle k +0 with h

        {Tank.fire -> k} ->
            println "Fire"
            handle !k with h
        

    handle !tank with h



Tank.tryMoreThanOne : '{Tank} ()
Tank.tryMoreThanOne = 'let
    arrived = isAt (+0, +0)
    unless arrived 'fire
    accelerate


tankTest : '{IO} ()
tankTest = '(Tank.printingHandler '(Tank.moveTo (+1, +0)))

Tank.moveTo : (Int, Int) -> {Tank} ()
Tank.moveTo pos = 
    arrived = isAt pos
    unless arrived 'let
        angle = Tank.angleTo pos
        -- This is of course not right, but fine for now
        Tank.rotateRight (Just angle)
        Tank.accelerate
        Tank.moveTo (+0, +0)




 ---


unless : Boolean -> '() -> ()
unless pred a = if pred then
     ()
     else !a









ability Tank where
    accelerate : ()
    rotateLeft : (Maybe Int) -> ()
    rotateRight : (Maybe Int) -> ()
    fire : ()
    angleTo : (Int, Int) -> Int
    isAt : (Int, Int) -> Boolean





Tank.moveTo : (Int, Int) -> {Tank} ()
Tank.moveTo pos = 
    arrived = isAt pos
    unless arrived 'let
        angle = Tank.angleTo pos
        -- This is of course not right, but fine for now
        Tank.rotateRight (Just angle)
        Tank.accelerate
        moveTo pos


-- Need to make some handler for this and then I will consider this good.

