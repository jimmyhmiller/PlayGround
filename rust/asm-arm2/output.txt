

enum Asm {
    AbsAdvsimd {
        size: u32,
        rn: u32,
        rd: u32,
    },
    Adc {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Adcs {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    AddAddsubExt {
        sf: u32,
        rm: u32,
        option: u32,
        imm3: u32,
        rn: u32,
        rd: u32,
    },
    AddAddsubImm {
        sf: u32,
        sh: u32,
        imm12: u32,
        rn: u32,
        rd: u32,
    },
    AddAddsubShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    AddAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Addg {
        uimm6: u32,
        uimm4: u32,
        xn: u32,
        xd: u32,
    },
    AddhnAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    AddpAdvsimdPair {
        size: u32,
        rn: u32,
        rd: u32,
    },
    AddpAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    AddsAddsubExt {
        sf: u32,
        rm: u32,
        option: u32,
        imm3: u32,
        rn: u32,
        rd: u32,
    },
    AddsAddsubImm {
        sf: u32,
        sh: u32,
        imm12: u32,
        rn: u32,
        rd: u32,
    },
    AddsAddsubShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    AddvAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    Adr {
        immlo: u32,
        immhi: u32,
        rd: u32,
    },
    Adrp {
        immlo: u32,
        immhi: u32,
        rd: u32,
    },
    AesdAdvsimd {
        rn: u32,
        rd: u32,
    },
    AeseAdvsimd {
        rn: u32,
        rd: u32,
    },
    AesimcAdvsimd {
        rn: u32,
        rd: u32,
    },
    AesmcAdvsimd {
        rn: u32,
        rd: u32,
    },
    AndAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    AndLogImm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    AndLogShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    AndsLogImm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    AndsLogShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    AsrAsrv {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    AsrSbfm {
        sf: u32,
        n: u32,
        immr: u32,
        rn: u32,
        rd: u32,
    },
    Asrv {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    AtSys {
        op1: u32,
        op2: u32,
        rt: u32,
    },
    Autda {
        z: u32,
        rn: u32,
        rd: u32,
    },
    Autdb {
        z: u32,
        rn: u32,
        rd: u32,
    },
    Autia {
        z: u32,
        rn: u32,
        rd: u32,
    },
    Autib {
        z: u32,
        rn: u32,
        rd: u32,
    },
    Axflag {
    },
    BCond {
        imm19: u32,
        cond: u32,
    },
    BUncond {
        imm26: u32,
    },
    BcCond {
        imm19: u32,
        cond: u32,
    },
    BcaxAdvsimd {
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    BfcBfm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rd: u32,
    },
    BfcvtFloat {
        rn: u32,
        rd: u32,
    },
    BfcvtnAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    BfdotAdvsimdElt {
        q: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    BfdotAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    BfiBfm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rd: u32,
    },
    Bfm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    BfmlalAdvsimdElt {
        q: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    BfmlalAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    BfmmlaAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    BfxilBfm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    BicAdvsimdImm {
        q: u32,
        a: u32,
        b: u32,
        c: u32,
        d: u32,
        e: u32,
        f: u32,
        g: u32,
        h: u32,
        rd: u32,
    },
    BicAdvsimdReg {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    BicLogShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    Bics {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    BifAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    BitAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Bl {
        imm26: u32,
    },
    Blr {
        rn: u32,
    },
    Blra {
        z: u32,
        m: u32,
        rn: u32,
        rm: u32,
    },
    Br {
        rn: u32,
    },
    Bra {
        z: u32,
        m: u32,
        rn: u32,
        rm: u32,
    },
    Brk {
        imm16: u32,
    },
    BslAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Bti {
    },
    Cas {
        l: u32,
        rs: u32,
        o0: u32,
        rn: u32,
        rt: u32,
    },
    Casb {
        l: u32,
        rs: u32,
        o0: u32,
        rn: u32,
        rt: u32,
    },
    Cash {
        l: u32,
        rs: u32,
        o0: u32,
        rn: u32,
        rt: u32,
    },
    Casp {
        sz: u32,
        l: u32,
        rs: u32,
        o0: u32,
        rn: u32,
        rt: u32,
    },
    Cbnz {
        sf: u32,
        imm19: u32,
        rt: u32,
    },
    Cbz {
        sf: u32,
        imm19: u32,
        rt: u32,
    },
    CcmnImm {
        sf: u32,
        imm5: u32,
        cond: u32,
        rn: u32,
        nzcv: u32,
    },
    CcmnReg {
        sf: u32,
        rm: u32,
        cond: u32,
        rn: u32,
        nzcv: u32,
    },
    CcmpImm {
        sf: u32,
        imm5: u32,
        cond: u32,
        rn: u32,
        nzcv: u32,
    },
    CcmpReg {
        sf: u32,
        rm: u32,
        cond: u32,
        rn: u32,
        nzcv: u32,
    },
    Cfinv {
    },
    CfpSys {
        rt: u32,
    },
    CincCsinc {
        sf: u32,
        rd: u32,
    },
    CinvCsinv {
        sf: u32,
        rd: u32,
    },
    Clrex {
        crm: u32,
    },
    ClsAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    ClsInt {
        sf: u32,
        rn: u32,
        rd: u32,
    },
    ClzAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    ClzInt {
        sf: u32,
        rn: u32,
        rd: u32,
    },
    CmeqAdvsimdReg {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    CmeqAdvsimdZero {
        size: u32,
        rn: u32,
        rd: u32,
    },
    CmgeAdvsimdReg {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    CmgeAdvsimdZero {
        size: u32,
        rn: u32,
        rd: u32,
    },
    CmgtAdvsimdReg {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    CmgtAdvsimdZero {
        size: u32,
        rn: u32,
        rd: u32,
    },
    CmhiAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    CmhsAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    CmleAdvsimd {
        size: u32,
        rn: u32,
        rd: u32,
    },
    CmltAdvsimd {
        size: u32,
        rn: u32,
        rd: u32,
    },
    CmnAddsAddsubExt {
        sf: u32,
        rm: u32,
        option: u32,
        imm3: u32,
        rn: u32,
    },
    CmnAddsAddsubImm {
        sf: u32,
        sh: u32,
        imm12: u32,
        rn: u32,
    },
    CmnAddsAddsubShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
    },
    CmpSubsAddsubExt {
        sf: u32,
        rm: u32,
        option: u32,
        imm3: u32,
        rn: u32,
    },
    CmpSubsAddsubImm {
        sf: u32,
        sh: u32,
        imm12: u32,
        rn: u32,
    },
    CmpSubsAddsubShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
    },
    CmppSubps {
        xm: u32,
        xn: u32,
    },
    CmtstAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    CnegCsneg {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    CntAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    CppSys {
        rt: u32,
    },
    Cpyfp {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfpn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfprn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfprt {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfprtn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfprtrn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfprtwn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfpt {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfptn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfptrn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfptwn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfpwn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfpwt {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfpwtn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfpwtrn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyfpwtwn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyp {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpypn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyprn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyprt {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyprtn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyprtrn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyprtwn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpypt {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyptn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyptrn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpyptwn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpypwn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpypwt {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpypwtn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpypwtrn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Cpypwtwn {
        sz: u32,
        op1: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Crc32 {
        sf: u32,
        rm: u32,
        sz: u32,
        rn: u32,
        rd: u32,
    },
    Crc32c {
        sf: u32,
        rm: u32,
        sz: u32,
        rn: u32,
        rd: u32,
    },
    Csdb {
    },
    Csel {
        sf: u32,
        rm: u32,
        cond: u32,
        rn: u32,
        rd: u32,
    },
    CsetCsinc {
        sf: u32,
        rd: u32,
    },
    CsetmCsinv {
        sf: u32,
        rd: u32,
    },
    Csinc {
        sf: u32,
        rm: u32,
        cond: u32,
        rn: u32,
        rd: u32,
    },
    Csinv {
        sf: u32,
        rm: u32,
        cond: u32,
        rn: u32,
        rd: u32,
    },
    Csneg {
        sf: u32,
        rm: u32,
        cond: u32,
        rn: u32,
        rd: u32,
    },
    DcSys {
        op1: u32,
        crm: u32,
        op2: u32,
        rt: u32,
    },
    Dcps1 {
        imm16: u32,
    },
    Dcps2 {
        imm16: u32,
    },
    Dcps3 {
        imm16: u32,
    },
    Dgh {
    },
    Dmb {
        crm: u32,
    },
    Drps {
    },
    Dsb {
        crm: u32,
    },
    DupAdvsimdElt {
        imm5: u32,
        rn: u32,
        rd: u32,
    },
    DupAdvsimdGen {
        q: u32,
        imm5: u32,
        rn: u32,
        rd: u32,
    },
    DvpSys {
        rt: u32,
    },
    Eon {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    Eor3Advsimd {
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    EorAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    EorLogImm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    EorLogShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    Eret {
    },
    Ereta {
        m: u32,
    },
    Esb {
    },
    ExtAdvsimd {
        q: u32,
        rm: u32,
        imm4: u32,
        rn: u32,
        rd: u32,
    },
    Extr {
        sf: u32,
        n: u32,
        rm: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    FabdAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FabsAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FabsFloat {
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FacgeAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FacgtAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FaddAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FaddFloat {
        ftype: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FaddpAdvsimdPair {
        sz: u32,
        rn: u32,
        rd: u32,
    },
    FaddpAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FcaddAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rot: u32,
        rn: u32,
        rd: u32,
    },
    FccmpFloat {
        ftype: u32,
        rm: u32,
        cond: u32,
        rn: u32,
        nzcv: u32,
    },
    FccmpeFloat {
        ftype: u32,
        rm: u32,
        cond: u32,
        rn: u32,
        nzcv: u32,
    },
    FcmeqAdvsimdReg {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FcmeqAdvsimdZero {
        rn: u32,
        rd: u32,
    },
    FcmgeAdvsimdReg {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FcmgeAdvsimdZero {
        rn: u32,
        rd: u32,
    },
    FcmgtAdvsimdReg {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FcmgtAdvsimdZero {
        rn: u32,
        rd: u32,
    },
    FcmlaAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        rot: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    FcmlaAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rot: u32,
        rn: u32,
        rd: u32,
    },
    FcmleAdvsimd {
        rn: u32,
        rd: u32,
    },
    FcmltAdvsimd {
        rn: u32,
        rd: u32,
    },
    FcmpFloat {
        ftype: u32,
        rm: u32,
        rn: u32,
    },
    FcmpeFloat {
        ftype: u32,
        rm: u32,
        rn: u32,
    },
    FcselFloat {
        ftype: u32,
        rm: u32,
        cond: u32,
        rn: u32,
        rd: u32,
    },
    FcvtFloat {
        ftype: u32,
        opc: u32,
        rn: u32,
        rd: u32,
    },
    FcvtasAdvsimd {
        rn: u32,
        rd: u32,
    },
    FcvtasFloat {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FcvtauAdvsimd {
        rn: u32,
        rd: u32,
    },
    FcvtauFloat {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FcvtlAdvsimd {
        q: u32,
        sz: u32,
        rn: u32,
        rd: u32,
    },
    FcvtmsAdvsimd {
        rn: u32,
        rd: u32,
    },
    FcvtmsFloat {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FcvtmuAdvsimd {
        rn: u32,
        rd: u32,
    },
    FcvtmuFloat {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FcvtnAdvsimd {
        q: u32,
        sz: u32,
        rn: u32,
        rd: u32,
    },
    FcvtnsAdvsimd {
        rn: u32,
        rd: u32,
    },
    FcvtnsFloat {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FcvtnuAdvsimd {
        rn: u32,
        rd: u32,
    },
    FcvtnuFloat {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FcvtpsAdvsimd {
        rn: u32,
        rd: u32,
    },
    FcvtpsFloat {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FcvtpuAdvsimd {
        rn: u32,
        rd: u32,
    },
    FcvtpuFloat {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FcvtxnAdvsimd {
        sz: u32,
        rn: u32,
        rd: u32,
    },
    FcvtzsAdvsimdFix {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    FcvtzsAdvsimdInt {
        rn: u32,
        rd: u32,
    },
    FcvtzsFloatFix {
        sf: u32,
        ftype: u32,
        scale: u32,
        rn: u32,
        rd: u32,
    },
    FcvtzsFloatInt {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FcvtzuAdvsimdFix {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    FcvtzuAdvsimdInt {
        rn: u32,
        rd: u32,
    },
    FcvtzuFloatFix {
        sf: u32,
        ftype: u32,
        scale: u32,
        rn: u32,
        rd: u32,
    },
    FcvtzuFloatInt {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FdivAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FdivFloat {
        ftype: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Fjcvtzs {
        rn: u32,
        rd: u32,
    },
    FmaddFloat {
        ftype: u32,
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    FmaxAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmaxFloat {
        ftype: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmaxnmAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmaxnmFloat {
        ftype: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmaxnmpAdvsimdPair {
        sz: u32,
        rn: u32,
        rd: u32,
    },
    FmaxnmpAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmaxnmvAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FmaxpAdvsimdPair {
        sz: u32,
        rn: u32,
        rd: u32,
    },
    FmaxpAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmaxvAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FminAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FminFloat {
        ftype: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FminnmAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FminnmFloat {
        ftype: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FminnmpAdvsimdPair {
        sz: u32,
        rn: u32,
        rd: u32,
    },
    FminnmpAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FminnmvAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FminpAdvsimdPair {
        sz: u32,
        rn: u32,
        rd: u32,
    },
    FminpAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FminvAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FmlaAdvsimdElt {
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    FmlaAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmlalAdvsimdElt {
        q: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    FmlalAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmlsAdvsimdElt {
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    FmlsAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmlslAdvsimdElt {
        q: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    FmlslAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmovAdvsimd {
        q: u32,
        a: u32,
        b: u32,
        c: u32,
        d: u32,
        e: u32,
        f: u32,
        g: u32,
        h: u32,
        rd: u32,
    },
    FmovFloat {
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FmovFloatGen {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FmovFloatImm {
        ftype: u32,
        imm8: u32,
        rd: u32,
    },
    FmsubFloat {
        ftype: u32,
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    FmulAdvsimdElt {
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    FmulAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmulFloat {
        ftype: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FmulxAdvsimdElt {
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    FmulxAdvsimdVec {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FnegAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FnegFloat {
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FnmaddFloat {
        ftype: u32,
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    FnmsubFloat {
        ftype: u32,
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    FnmulFloat {
        ftype: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FrecpeAdvsimd {
        rn: u32,
        rd: u32,
    },
    FrecpsAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FrecpxAdvsimd {
        rn: u32,
        rd: u32,
    },
    Frint32xAdvsimd {
        q: u32,
        sz: u32,
        rn: u32,
        rd: u32,
    },
    Frint32xFloat {
        rn: u32,
        rd: u32,
    },
    Frint32zAdvsimd {
        q: u32,
        sz: u32,
        rn: u32,
        rd: u32,
    },
    Frint32zFloat {
        rn: u32,
        rd: u32,
    },
    Frint64xAdvsimd {
        q: u32,
        sz: u32,
        rn: u32,
        rd: u32,
    },
    Frint64xFloat {
        rn: u32,
        rd: u32,
    },
    Frint64zAdvsimd {
        q: u32,
        sz: u32,
        rn: u32,
        rd: u32,
    },
    Frint64zFloat {
        rn: u32,
        rd: u32,
    },
    FrintaAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FrintaFloat {
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FrintiAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FrintiFloat {
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FrintmAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FrintmFloat {
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FrintnAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FrintnFloat {
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FrintpAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FrintpFloat {
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FrintxAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FrintxFloat {
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FrintzAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FrintzFloat {
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FrsqrteAdvsimd {
        rn: u32,
        rd: u32,
    },
    FrsqrtsAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FsqrtAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    FsqrtFloat {
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    FsubAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    FsubFloat {
        ftype: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Gmi {
        xm: u32,
        xn: u32,
        xd: u32,
    },
    Hint {
        crm: u32,
        op2: u32,
    },
    Hlt {
        imm16: u32,
    },
    Hvc {
        imm16: u32,
    },
    IcSys {
        op1: u32,
        crm: u32,
        op2: u32,
        rt: u32,
    },
    InsAdvsimdElt {
        imm5: u32,
        imm4: u32,
        rn: u32,
        rd: u32,
    },
    InsAdvsimdGen {
        imm5: u32,
        rn: u32,
        rd: u32,
    },
    Irg {
        xm: u32,
        xn: u32,
        xd: u32,
    },
    Isb {
        crm: u32,
    },
    Ld1AdvsimdMult {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld1AdvsimdSngl {
        q: u32,
        s: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld1rAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld2AdvsimdMult {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld2AdvsimdSngl {
        q: u32,
        s: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld2rAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld3AdvsimdMult {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld3AdvsimdSngl {
        q: u32,
        s: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld3rAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld4AdvsimdMult {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld4AdvsimdSngl {
        q: u32,
        s: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld4rAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    Ld64b {
        rn: u32,
        rt: u32,
    },
    Ldadd {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldaddb {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldaddh {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldapr {
        rn: u32,
        rt: u32,
    },
    Ldaprb {
        rn: u32,
        rt: u32,
    },
    Ldaprh {
        rn: u32,
        rt: u32,
    },
    LdapurGen {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldapurb {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldapurh {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldapursb {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldapursh {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldapursw {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldar {
        rn: u32,
        rt: u32,
    },
    Ldarb {
        rn: u32,
        rt: u32,
    },
    Ldarh {
        rn: u32,
        rt: u32,
    },
    Ldaxp {
        sz: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    Ldaxr {
        rn: u32,
        rt: u32,
    },
    Ldaxrb {
        rn: u32,
        rt: u32,
    },
    Ldaxrh {
        rn: u32,
        rt: u32,
    },
    Ldclr {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldclrb {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldclrh {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldeor {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldeorb {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldeorh {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldg {
        imm9: u32,
        xn: u32,
        xt: u32,
    },
    Ldgm {
        xn: u32,
        xt: u32,
    },
    Ldlar {
        rn: u32,
        rt: u32,
    },
    Ldlarb {
        rn: u32,
        rt: u32,
    },
    Ldlarh {
        rn: u32,
        rt: u32,
    },
    LdnpFpsimd {
        opc: u32,
        imm7: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    LdnpGen {
        imm7: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    LdpFpsimd {
        opc: u32,
        imm7: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    LdpGen {
        imm7: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    Ldpsw {
        imm7: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    LdrImmFpsimd {
        size: u32,
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    LdrImmGen {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    LdrLitFpsimd {
        opc: u32,
        imm19: u32,
        rt: u32,
    },
    LdrLitGen {
        imm19: u32,
        rt: u32,
    },
    LdrRegFpsimd {
        size: u32,
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    LdrRegGen {
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    Ldra {
        m: u32,
        s: u32,
        imm9: u32,
        w: u32,
        rn: u32,
        rt: u32,
    },
    LdrbImm {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    LdrbReg {
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    LdrhImm {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    LdrhReg {
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    LdrsbImm {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    LdrsbReg {
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    LdrshImm {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    LdrshReg {
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    LdrswImm {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    LdrswLit {
        imm19: u32,
        rt: u32,
    },
    LdrswReg {
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    Ldset {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldsetb {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldseth {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldsmax {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldsmaxb {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldsmaxh {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldsmin {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldsminb {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldsminh {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldtr {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldtrb {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldtrh {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldtrsb {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldtrsh {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldtrsw {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldumax {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldumaxb {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldumaxh {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Ldumin {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Lduminb {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Lduminh {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    LdurFpsimd {
        size: u32,
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    LdurGen {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldurb {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldurh {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldursb {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldursh {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldursw {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Ldxp {
        sz: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    Ldxr {
        rn: u32,
        rt: u32,
    },
    Ldxrb {
        rn: u32,
        rt: u32,
    },
    Ldxrh {
        rn: u32,
        rt: u32,
    },
    LslLslv {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    LslUbfm {
        sf: u32,
        n: u32,
        immr: u32,
        rn: u32,
        rd: u32,
    },
    Lslv {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    LsrLsrv {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    LsrUbfm {
        sf: u32,
        n: u32,
        immr: u32,
        rn: u32,
        rd: u32,
    },
    Lsrv {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Madd {
        sf: u32,
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    MlaAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    MlaAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    MlsAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    MlsAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    MnegMsub {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    MovAddAddsubImm {
        sf: u32,
        rn: u32,
        rd: u32,
    },
    MovDupAdvsimdElt {
        imm5: u32,
        rn: u32,
        rd: u32,
    },
    MovInsAdvsimdElt {
        imm5: u32,
        imm4: u32,
        rn: u32,
        rd: u32,
    },
    MovInsAdvsimdGen {
        imm5: u32,
        rn: u32,
        rd: u32,
    },
    MovMovn {
        sf: u32,
        hw: u32,
        imm16: u32,
        rd: u32,
    },
    MovMovz {
        sf: u32,
        hw: u32,
        imm16: u32,
        rd: u32,
    },
    MovOrrAdvsimdReg {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    MovOrrLogImm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rd: u32,
    },
    MovOrrLogShift {
        sf: u32,
        rm: u32,
        rd: u32,
    },
    MovUmovAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    MoviAdvsimd {
        q: u32,
        op: u32,
        a: u32,
        b: u32,
        c: u32,
        cmode: u32,
        d: u32,
        e: u32,
        f: u32,
        g: u32,
        h: u32,
        rd: u32,
    },
    Movk {
        sf: u32,
        hw: u32,
        imm16: u32,
        rd: u32,
    },
    Movn {
        sf: u32,
        hw: u32,
        imm16: u32,
        rd: u32,
    },
    Movz {
        sf: u32,
        hw: u32,
        imm16: u32,
        rd: u32,
    },
    Mrs {
        o0: u32,
        op1: u32,
        crn: u32,
        crm: u32,
        op2: u32,
        rt: u32,
    },
    MsrImm {
        op1: u32,
        crm: u32,
        op2: u32,
    },
    MsrReg {
        o0: u32,
        op1: u32,
        crn: u32,
        crm: u32,
        op2: u32,
        rt: u32,
    },
    Msub {
        sf: u32,
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    MulAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    MulAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    MulMadd {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    MvnNotAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    MvnOrnLogShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rd: u32,
    },
    MvniAdvsimd {
        q: u32,
        a: u32,
        b: u32,
        c: u32,
        cmode: u32,
        d: u32,
        e: u32,
        f: u32,
        g: u32,
        h: u32,
        rd: u32,
    },
    NegAdvsimd {
        size: u32,
        rn: u32,
        rd: u32,
    },
    NegSubAddsubShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rd: u32,
    },
    NegsSubsAddsubShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
    },
    NgcSbc {
        sf: u32,
        rm: u32,
        rd: u32,
    },
    NgcsSbcs {
        sf: u32,
        rm: u32,
        rd: u32,
    },
    Nop {
    },
    NotAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    OrnAdvsimd {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    OrnLogShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    OrrAdvsimdImm {
        q: u32,
        a: u32,
        b: u32,
        c: u32,
        d: u32,
        e: u32,
        f: u32,
        g: u32,
        h: u32,
        rd: u32,
    },
    OrrAdvsimdReg {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    OrrLogImm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    OrrLogShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    Pacda {
        z: u32,
        rn: u32,
        rd: u32,
    },
    Pacdb {
        z: u32,
        rn: u32,
        rd: u32,
    },
    Pacga {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Pacia {
        z: u32,
        rn: u32,
        rd: u32,
    },
    Pacib {
        z: u32,
        rn: u32,
        rd: u32,
    },
    PmulAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    PmullAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    PrfmImm {
        imm12: u32,
        rn: u32,
        rt: u32,
    },
    PrfmLit {
        imm19: u32,
        rt: u32,
    },
    PrfmReg {
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    Prfum {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Psb {
    },
    PssbbDsb {
    },
    RaddhnAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Rax1Advsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    RbitAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    RbitInt {
        sf: u32,
        rn: u32,
        rd: u32,
    },
    Ret {
        rn: u32,
    },
    Reta {
        m: u32,
    },
    Rev {
        sf: u32,
        rn: u32,
        rd: u32,
    },
    Rev16Advsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    Rev16Int {
        sf: u32,
        rn: u32,
        rd: u32,
    },
    Rev32Advsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    Rev32Int {
        rn: u32,
        rd: u32,
    },
    Rev64Advsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    Rev64Rev {
        rn: u32,
        rd: u32,
    },
    Rmif {
        imm6: u32,
        rn: u32,
        mask: u32,
    },
    RorExtr {
        sf: u32,
        n: u32,
        rm: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    RorRorv {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Rorv {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    RshrnAdvsimd {
        q: u32,
        immb: u32,
        rn: u32,
        rd: u32,
    },
    RsubhnAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SabaAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SabalAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SabdAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SabdlAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SadalpAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    SaddlAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SaddlpAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    SaddlvAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    SaddwAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sb {
    },
    Sbc {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sbcs {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SbfizSbfm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    Sbfm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    SbfxSbfm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    ScvtfAdvsimdFix {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    ScvtfAdvsimdInt {
        rn: u32,
        rd: u32,
    },
    ScvtfFloatFix {
        sf: u32,
        ftype: u32,
        scale: u32,
        rn: u32,
        rd: u32,
    },
    ScvtfFloatInt {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    Sdiv {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SdotAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SdotAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Setf {
        sz: u32,
        rn: u32,
    },
    Setgp {
        sz: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Setgpn {
        sz: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Setgpt {
        sz: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Setgptn {
        sz: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Setp {
        sz: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Setpn {
        sz: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Setpt {
        sz: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Setptn {
        sz: u32,
        rs: u32,
        rn: u32,
        rd: u32,
    },
    Sev {
    },
    Sevl {
    },
    Sha1cAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sha1hAdvsimd {
        rn: u32,
        rd: u32,
    },
    Sha1mAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sha1pAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sha1su0Advsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sha1su1Advsimd {
        rn: u32,
        rd: u32,
    },
    Sha256h2Advsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sha256hAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sha256su0Advsimd {
        rn: u32,
        rd: u32,
    },
    Sha256su1Advsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sha512h2Advsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sha512hAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sha512su0Advsimd {
        rn: u32,
        rd: u32,
    },
    Sha512su1Advsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    ShaddAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    ShlAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    ShllAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    ShrnAdvsimd {
        q: u32,
        immb: u32,
        rn: u32,
        rd: u32,
    },
    ShsubAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SliAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    Sm3partw1Advsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sm3partw2Advsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Sm3ss1Advsimd {
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    Sm3tt1aAdvsimd {
        rm: u32,
        imm2: u32,
        rn: u32,
        rd: u32,
    },
    Sm3tt1bAdvsimd {
        rm: u32,
        imm2: u32,
        rn: u32,
        rd: u32,
    },
    Sm3tt2aAdvsimd {
        rm: u32,
        imm2: u32,
        rn: u32,
        rd: u32,
    },
    Sm3tt2bAdvsimd {
        rm: u32,
        imm2: u32,
        rn: u32,
        rd: u32,
    },
    Sm4eAdvsimd {
        rn: u32,
        rd: u32,
    },
    Sm4ekeyAdvsimd {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Smaddl {
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    SmaxAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SmaxpAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SmaxvAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    Smc {
        imm16: u32,
    },
    SminAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SminpAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SminvAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    SmlalAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SmlalAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SmlslAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SmlslAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SmmlaAdvsimdVec {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SmneglSmsubl {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SmovAdvsimd {
        q: u32,
        imm5: u32,
        rn: u32,
        rd: u32,
    },
    Smsubl {
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    Smulh {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SmullAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SmullAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SmullSmaddl {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqabsAdvsimd {
        size: u32,
        rn: u32,
        rd: u32,
    },
    SqaddAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqdmlalAdvsimdElt {
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SqdmlalAdvsimdVec {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqdmlslAdvsimdElt {
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SqdmlslAdvsimdVec {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqdmulhAdvsimdElt {
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SqdmulhAdvsimdVec {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqdmullAdvsimdElt {
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SqdmullAdvsimdVec {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqnegAdvsimd {
        size: u32,
        rn: u32,
        rd: u32,
    },
    SqrdmlahAdvsimdElt {
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SqrdmlahAdvsimdVec {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqrdmlshAdvsimdElt {
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SqrdmlshAdvsimdVec {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqrdmulhAdvsimdElt {
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SqrdmulhAdvsimdVec {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqrshlAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqrshrnAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SqrshrunAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SqshlAdvsimdImm {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SqshlAdvsimdReg {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqshluAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SqshrnAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SqshrunAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SqsubAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SqxtnAdvsimd {
        size: u32,
        rn: u32,
        rd: u32,
    },
    SqxtunAdvsimd {
        size: u32,
        rn: u32,
        rd: u32,
    },
    SrhaddAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SriAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SrshlAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SrshrAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SrsraAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SsbbDsb {
    },
    SshlAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SshllAdvsimd {
        q: u32,
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SshrAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SsraAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    SsublAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    SsubwAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    St1AdvsimdMult {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    St1AdvsimdSngl {
        q: u32,
        s: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    St2AdvsimdMult {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    St2AdvsimdSngl {
        q: u32,
        s: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    St2g {
        imm9: u32,
        xn: u32,
        xt: u32,
    },
    St3AdvsimdMult {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    St3AdvsimdSngl {
        q: u32,
        s: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    St4AdvsimdMult {
        q: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    St4AdvsimdSngl {
        q: u32,
        s: u32,
        size: u32,
        rn: u32,
        rt: u32,
    },
    St64b {
        rn: u32,
        rt: u32,
    },
    St64bv {
        rs: u32,
        rn: u32,
        rt: u32,
    },
    St64bv0 {
        rs: u32,
        rn: u32,
        rt: u32,
    },
    StaddLdadd {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StaddbLdaddb {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StaddhLdaddh {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StclrLdclr {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StclrbLdclrb {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StclrhLdclrh {
        r: u32,
        rs: u32,
        rn: u32,
    },
    SteorLdeor {
        r: u32,
        rs: u32,
        rn: u32,
    },
    SteorbLdeorb {
        r: u32,
        rs: u32,
        rn: u32,
    },
    SteorhLdeorh {
        r: u32,
        rs: u32,
        rn: u32,
    },
    Stg {
        imm9: u32,
        xn: u32,
        xt: u32,
    },
    Stgm {
        xn: u32,
        xt: u32,
    },
    Stgp {
        simm7: u32,
        xt2: u32,
        xn: u32,
        xt: u32,
    },
    Stllr {
        rn: u32,
        rt: u32,
    },
    Stllrb {
        rn: u32,
        rt: u32,
    },
    Stllrh {
        rn: u32,
        rt: u32,
    },
    Stlr {
        rn: u32,
        rt: u32,
    },
    Stlrb {
        rn: u32,
        rt: u32,
    },
    Stlrh {
        rn: u32,
        rt: u32,
    },
    StlurGen {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Stlurb {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Stlurh {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Stlxp {
        sz: u32,
        rs: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    Stlxr {
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Stlxrb {
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Stlxrh {
        rs: u32,
        rn: u32,
        rt: u32,
    },
    StnpFpsimd {
        opc: u32,
        imm7: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    StnpGen {
        imm7: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    StpFpsimd {
        opc: u32,
        imm7: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    StpGen {
        imm7: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    StrImmFpsimd {
        size: u32,
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    StrImmGen {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    StrRegFpsimd {
        size: u32,
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    StrRegGen {
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    StrbImm {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    StrbReg {
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    StrhImm {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    StrhReg {
        rm: u32,
        option: u32,
        s: u32,
        rn: u32,
        rt: u32,
    },
    StsetLdset {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StsetbLdsetb {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StsethLdseth {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StsmaxLdsmax {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StsmaxbLdsmaxb {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StsmaxhLdsmaxh {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StsminLdsmin {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StsminbLdsminb {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StsminhLdsminh {
        r: u32,
        rs: u32,
        rn: u32,
    },
    Sttr {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Sttrb {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Sttrh {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    StumaxLdumax {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StumaxbLdumaxb {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StumaxhLdumaxh {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StuminLdumin {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StuminbLduminb {
        r: u32,
        rs: u32,
        rn: u32,
    },
    StuminhLduminh {
        r: u32,
        rs: u32,
        rn: u32,
    },
    SturFpsimd {
        size: u32,
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    SturGen {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Sturb {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Sturh {
        imm9: u32,
        rn: u32,
        rt: u32,
    },
    Stxp {
        sz: u32,
        rs: u32,
        rt2: u32,
        rn: u32,
        rt: u32,
    },
    Stxr {
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Stxrb {
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Stxrh {
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Stz2g {
        imm9: u32,
        xn: u32,
        xt: u32,
    },
    Stzg {
        imm9: u32,
        xn: u32,
        xt: u32,
    },
    Stzgm {
        xn: u32,
        xt: u32,
    },
    SubAddsubExt {
        sf: u32,
        rm: u32,
        option: u32,
        imm3: u32,
        rn: u32,
        rd: u32,
    },
    SubAddsubImm {
        sf: u32,
        sh: u32,
        imm12: u32,
        rn: u32,
        rd: u32,
    },
    SubAddsubShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    SubAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Subg {
        uimm6: u32,
        uimm4: u32,
        xn: u32,
        xd: u32,
    },
    SubhnAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Subp {
        xm: u32,
        xn: u32,
        xd: u32,
    },
    Subps {
        xm: u32,
        xn: u32,
        xd: u32,
    },
    SubsAddsubExt {
        sf: u32,
        rm: u32,
        option: u32,
        imm3: u32,
        rn: u32,
        rd: u32,
    },
    SubsAddsubImm {
        sf: u32,
        sh: u32,
        imm12: u32,
        rn: u32,
        rd: u32,
    },
    SubsAddsubShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    SudotAdvsimdElt {
        q: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    SuqaddAdvsimd {
        size: u32,
        rn: u32,
        rd: u32,
    },
    Svc {
        imm16: u32,
    },
    Swp {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Swpb {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    Swph {
        a: u32,
        r: u32,
        rs: u32,
        rn: u32,
        rt: u32,
    },
    SxtbSbfm {
        sf: u32,
        n: u32,
        rn: u32,
        rd: u32,
    },
    SxthSbfm {
        sf: u32,
        n: u32,
        rn: u32,
        rd: u32,
    },
    SxtlSshllAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    SxtwSbfm {
        rn: u32,
        rd: u32,
    },
    Sys {
        op1: u32,
        crn: u32,
        crm: u32,
        op2: u32,
        rt: u32,
    },
    Sysl {
        op1: u32,
        crn: u32,
        crm: u32,
        op2: u32,
        rt: u32,
    },
    TblAdvsimd {
        q: u32,
        rm: u32,
        len: u32,
        rn: u32,
        rd: u32,
    },
    Tbnz {
        b5: u32,
        b40: u32,
        imm14: u32,
        rt: u32,
    },
    TbxAdvsimd {
        q: u32,
        rm: u32,
        len: u32,
        rn: u32,
        rd: u32,
    },
    Tbz {
        b5: u32,
        b40: u32,
        imm14: u32,
        rt: u32,
    },
    TlbiSys {
        op1: u32,
        crm: u32,
        op2: u32,
        rt: u32,
    },
    Trn1Advsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Trn2Advsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Tsb {
    },
    TstAndsLogImm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
    },
    TstAndsLogShift {
        sf: u32,
        shift: u32,
        rm: u32,
        imm6: u32,
        rn: u32,
    },
    UabaAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UabalAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UabdAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UabdlAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UadalpAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    UaddlAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UaddlpAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    UaddlvAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    UaddwAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UbfizUbfm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    Ubfm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    UbfxUbfm {
        sf: u32,
        n: u32,
        immr: u32,
        imms: u32,
        rn: u32,
        rd: u32,
    },
    UcvtfAdvsimdFix {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    UcvtfAdvsimdInt {
        rn: u32,
        rd: u32,
    },
    UcvtfFloatFix {
        sf: u32,
        ftype: u32,
        scale: u32,
        rn: u32,
        rd: u32,
    },
    UcvtfFloatInt {
        sf: u32,
        ftype: u32,
        rn: u32,
        rd: u32,
    },
    UdfPermUndef {
        imm16: u32,
    },
    Udiv {
        sf: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UdotAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    UdotAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UhaddAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UhsubAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Umaddl {
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    UmaxAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UmaxpAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UmaxvAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    UminAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UminpAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UminvAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    UmlalAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    UmlalAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UmlslAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    UmlslAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UmmlaAdvsimdVec {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UmneglUmsubl {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UmovAdvsimd {
        q: u32,
        imm5: u32,
        rn: u32,
        rd: u32,
    },
    Umsubl {
        rm: u32,
        ra: u32,
        rn: u32,
        rd: u32,
    },
    Umulh {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UmullAdvsimdElt {
        q: u32,
        size: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    UmullAdvsimdVec {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UmullUmaddl {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UqaddAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UqrshlAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UqrshrnAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    UqshlAdvsimdImm {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    UqshlAdvsimdReg {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UqshrnAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    UqsubAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UqxtnAdvsimd {
        size: u32,
        rn: u32,
        rd: u32,
    },
    UrecpeAdvsimd {
        q: u32,
        sz: u32,
        rn: u32,
        rd: u32,
    },
    UrhaddAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UrshlAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UrshrAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    UrsqrteAdvsimd {
        q: u32,
        sz: u32,
        rn: u32,
        rd: u32,
    },
    UrsraAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    UsdotAdvsimdElt {
        q: u32,
        l: u32,
        m: u32,
        rm: u32,
        h: u32,
        rn: u32,
        rd: u32,
    },
    UsdotAdvsimdVec {
        q: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UshlAdvsimd {
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UshllAdvsimd {
        q: u32,
        immb: u32,
        rn: u32,
        rd: u32,
    },
    UshrAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    UsmmlaAdvsimdVec {
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UsqaddAdvsimd {
        size: u32,
        rn: u32,
        rd: u32,
    },
    UsraAdvsimd {
        immb: u32,
        rn: u32,
        rd: u32,
    },
    UsublAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UsubwAdvsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    UxtbUbfm {
        rn: u32,
        rd: u32,
    },
    UxthUbfm {
        rn: u32,
        rd: u32,
    },
    UxtlUshllAdvsimd {
        q: u32,
        rn: u32,
        rd: u32,
    },
    Uzp1Advsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Uzp2Advsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Wfe {
    },
    Wfet {
        rd: u32,
    },
    Wfi {
    },
    Wfit {
        rd: u32,
    },
    Xaflag {
    },
    XarAdvsimd {
        rm: u32,
        imm6: u32,
        rn: u32,
        rd: u32,
    },
    Xpac {
        d: u32,
        rd: u32,
    },
    XtnAdvsimd {
        q: u32,
        size: u32,
        rn: u32,
        rd: u32,
    },
    Yield {
    },
    Zip1Advsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
    Zip2Advsimd {
        q: u32,
        size: u32,
        rm: u32,
        rn: u32,
        rd: u32,
    },
}