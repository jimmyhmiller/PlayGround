struct Atom {
    value
}

// TODO: When I have namespaces
// these won't be prefix named

fn deref(atom) {
    // assert!(atom is Atom)
    primitive_deref(atom)
}

fn swap!(atom, f) {
    let initial = deref(atom);
    let new = f(initial);
    let result = compare_and_swap!(atom, initial, new);
    if result {
        new
    } else {
        swap!(atom, f)
    }
}

fn reset!(atom, value) {
    // assert!(atom is Atom)
    primitive_reset!(atom, value)
}

fn compare_and_swap!(atom, old, new) {
    // assert!(atom is Atom)
    primitive_compare_and_swap!(atom, old, new)
}

fn main() {
    let atom = Atom { value: 42 }
    println(atom)
    reset!(atom, 1)
    println(atom)
    println(compare_and_swap!(atom, 1, 2))
    println(compare_and_swap!(atom, 1, 2))
    println(atom)
    swap!(atom, fn(x) { x + 1 })
    println(atom)
    let x = deref(atom)
    println(x)
    "done!"
}


// Expect
// Atom { value: 42 }
// Atom { value: 1 }
// true
// false
// Atom { value: 2 }
// Atom { value: 3 }
// 3
// done!