diff --git a/rust/editor2/editor/src/editor.rs b/rust/editor2/editor/src/editor.rs
index 09d00ea8..c1c3b4fc 100644
--- a/rust/editor2/editor/src/editor.rs
+++ b/rust/editor2/editor/src/editor.rs
@@ -296,7 +296,7 @@ impl Editor {
                         continue;
                     }
                     widget.data2.update().unwrap();
-                    // self.wasm_messenger.send_draw(*wasm_id, "draw");
+                    // self.self.data2.draw("draw");
                 }
                 _ => {}
             }
@@ -346,7 +346,6 @@ impl Editor {
                                 widget.send_process_message(
                                     *process_id,
                                     &buf,
-                                    &mut self.wasm_messenger,
                                 );
                             }
                         }
diff --git a/rust/editor2/editor/src/handle_event.rs b/rust/editor2/editor/src/handle_event.rs
index bff72e0f..197f24aa 100644
--- a/rust/editor2/editor/src/handle_event.rs
+++ b/rust/editor2/editor/src/handle_event.rs
@@ -91,7 +91,7 @@ impl Editor {
                     let mouse = self.context.mouse_position;
                     for widget in self.widget_store.iter_mut() {
                         if widget.mouse_over(&mouse) {
-                            let modified = widget.on_scroll(x, y, &mut self.wasm_messenger);
+                            let modified = widget.on_scroll(x, y);
                             if modified {
                                 dirty_widgets.insert(widget.id);
                             }
@@ -129,7 +129,6 @@ impl Editor {
                                 widget.on_size_change(
                                     widget.size.width,
                                     widget.size.height,
-                                    &mut self.wasm_messenger,
                                 );
                             }
                         }
@@ -142,7 +141,6 @@ impl Editor {
                                 widget.on_move(
                                     widget.position.x,
                                     widget.position.y,
-                                    &mut self.wasm_messenger,
                                 );
                                 if widget.position.x > self.window.size.width - 300.0 {
                                     widget.scale = 0.1;
@@ -191,9 +189,9 @@ impl Editor {
                 }
                 Event::ReloadWasm(path) => {
                     for widget in self.widget_store.iter_mut() {
-                        if let WidgetData::Wasm { wasm, wasm_id } = &mut widget.data {
+                        if let WidgetData::Wasm { wasm, .. } = &mut widget.data {
                             if path == wasm.path {
-                                self.wasm_messenger.send_reload(*wasm_id, widget.id);
+                                widget.data2.reload().unwrap();
                                 // wasm.reload();
                             }
                         }
@@ -363,7 +361,7 @@ impl Editor {
                     } else if let Some(widget_id) = self.active_widget {
                         self.mark_widget_dirty(widget_id);
                         if let Some(widget) = self.widget_store.get_mut(widget_id) {
-                            widget.on_key(input, &mut self.wasm_messenger);
+                            widget.on_key(input);
                         }
                     }
                 }
@@ -405,7 +403,7 @@ impl Editor {
                 if self.context.modifiers.ctrl {
                     self.selected_widgets.insert(widget.id);
                 } else {
-                    widget.on_mouse_down(&self.context.mouse_position, &mut self.wasm_messenger);
+                    widget.on_mouse_down(&self.context.mouse_position);
                 }
                 // TODO: This is ugly, just setting the active widget
                 // over and over again then we will get the last one
@@ -444,10 +442,10 @@ impl Editor {
 
                 if self.context.cancel_click {
                     self.context.cancel_click = false;
-                    widget.on_mouse_up(&self.context.mouse_position, &mut self.wasm_messenger);
+                    widget.on_mouse_up(&self.context.mouse_position);
                 } else {
                     let events =
-                        widget.on_click(&self.context.mouse_position, &mut self.wasm_messenger);
+                        widget.on_click(&self.context.mouse_position);
                     for event in events.iter() {
                         self.events.push(event.clone());
                     }
diff --git a/rust/editor2/editor/src/wasm_messenger.rs b/rust/editor2/editor/src/wasm_messenger.rs
index ce2c7e73..26008581 100644
--- a/rust/editor2/editor/src/wasm_messenger.rs
+++ b/rust/editor2/editor/src/wasm_messenger.rs
@@ -34,7 +34,7 @@ use crate::{
     event::Event,
     keyboard::KeyboardInput,
     widget::Position,
-    util::{decode_base64, encode_base64},
+    util::encode_base64,
 };
 
 #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, serde::Serialize, serde::Deserialize)]
@@ -53,7 +53,7 @@ pub enum Payload {
     Draw(String),
     OnScroll(f64, f64),
     OnKey(KeyboardInput),
-    Reload(usize),
+    Reload,
     SaveState,
     ProcessMessage(usize, String),
     Event(String, String),
@@ -81,7 +81,7 @@ pub enum OutPayload {
     Complete,
     NeededValue(String, oneshot::Sender<String>),
     Error(String),
-    Reloaded(usize),
+    Reloaded,
     Update(Vec<Commands>),
 }
 
@@ -193,7 +193,7 @@ impl WasmMessenger {
                     Payload::Draw(_) => "Draw",
                     Payload::OnScroll(_, _) => "OnScroll",
                     Payload::OnKey(_) => "OnKey",
-                    Payload::Reload(_) => "Reload",
+                    Payload::Reload => "Reload",
                     Payload::SaveState => "SaveState",
                     Payload::ProcessMessage(_, _) => "ProcessMessage",
                     Payload::Event(_, _) => "Event",
@@ -338,11 +338,13 @@ impl WasmMessenger {
                             ))
                             .unwrap();
                     }
-                    Commands::Redraw(widget_id) => {
+                    Commands::Redraw => {
+                        // TODO: Fix widget id once we move for widgets
+                        // to handle this themselves
                         self.external_sender
                             .as_mut()
                             .unwrap()
-                            .send(Event::Redraw(*widget_id))
+                            .send(Event::Redraw(0))
                             .unwrap();
                     }
                     Commands::SetCursor(cursor) => {
@@ -425,12 +427,12 @@ impl WasmMessenger {
                         }
                         should_mark_dirty = false;
                     }
-                    OutPayload::Reloaded(widget_id) => {
+                    OutPayload::Reloaded => {
                         let commands = self
                             .wasm_non_draw_commands
                             .entry(message.wasm_id)
                             .or_default();
-                        commands.push(Commands::Redraw(widget_id));
+                        commands.push(Commands::Redraw);
                     }
                     OutPayload::Complete => {
                         // should_mark_dirty = false;
@@ -468,81 +470,6 @@ impl WasmMessenger {
             }
         }
     }
-
-    pub fn send_on_click(&mut self, wasm_id: WasmId, position: &Position) {
-        let message_id = self.next_message_id();
-        self.send_message(Message {
-            message_id,
-            wasm_id,
-            payload: Payload::OnClick(*position),
-        });
-    }
-
-    pub fn send_on_mouse_down(&mut self, wasm_id: WasmId, position: &Position) {
-        let message_id = self.next_message_id();
-        self.send_message(Message {
-            message_id,
-            wasm_id,
-            payload: Payload::OnMouseDown(*position),
-        });
-    }
-
-    pub fn send_on_mouse_up(&mut self, wasm_id: WasmId, position: &Position) {
-        let message_id = self.next_message_id();
-        self.send_message(Message {
-            message_id,
-            wasm_id,
-            payload: Payload::OnMouseUp(*position),
-        });
-    }
-
-    pub fn send_set_state(&mut self, wasm_id: WasmId, state: &str) {
-        let message_id = self.next_message_id();
-        let base64_decoded = decode_base64(&state.as_bytes().to_vec()).unwrap();
-        let state = String::from_utf8(base64_decoded).unwrap();
-        self.send_message(Message {
-            message_id,
-            wasm_id,
-            payload: Payload::PartialState(Some(state)),
-        });
-    }
-
-    pub fn send_on_scroll(&mut self, wasm_id: u64, x: f64, y: f64) {
-        let message_id = self.next_message_id();
-        self.send_message(Message {
-            message_id,
-            wasm_id,
-            payload: Payload::OnScroll(x, y),
-        });
-    }
-
-    pub fn send_on_key(&mut self, wasm_id: u64, input: KeyboardInput) {
-        let message_id = self.next_message_id();
-        self.send_message(Message {
-            message_id,
-            wasm_id,
-            payload: Payload::OnKey(input),
-        });
-    }
-
-    pub fn send_reload(&mut self, wasm_id: u64, widget_id: usize) {
-        let message_id = self.next_message_id();
-        self.send_message(Message {
-            message_id,
-            wasm_id,
-            payload: Payload::Reload(widget_id),
-        });
-    }
-
-    pub fn send_process_message(&mut self, wasm_id: u64, process_id: usize, buf: &str) {
-        let message_id = self.next_message_id();
-        self.send_message(Message {
-            message_id,
-            wasm_id,
-            payload: Payload::ProcessMessage(process_id, buf.to_string()),
-        });
-    }
-
     // Sometimes state is corrupt by going too long on the string. Not sure why.
     // Need to track down the issue
     pub fn save_state(&mut self, wasm_id: WasmId) -> SaveState {
@@ -587,24 +514,6 @@ impl WasmMessenger {
         });
     }
 
-    pub fn send_on_size_change(&mut self, wasm_id: u64, width: f32, height: f32) {
-        let message_id = self.next_message_id();
-        self.send_message(Message {
-            message_id,
-            wasm_id,
-            payload: Payload::OnSizeChange(width, height),
-        });
-    }
-
-    pub fn send_on_move(&mut self, wasm_id: u64, x: f32, y: f32) {
-        let message_id = self.next_message_id();
-        self.send_message(Message {
-            message_id,
-            wasm_id,
-            payload: Payload::OnMove(x, y),
-        });
-    }
-
     pub fn has_draw_commands(&self, wasm_id: u64) -> bool {
         self.wasm_draw_commands
             .get(&wasm_id)
@@ -749,7 +658,7 @@ impl WasmManager {
                     }),
                 }
             }
-            Payload::Reload(widget_id) => {
+            Payload::Reload => {
                 match self.instance.reload().await {
                     Ok(_) => {}
                     Err(e) => {
@@ -759,7 +668,7 @@ impl WasmManager {
                 Ok(OutMessage {
                     message_id: message.message_id,
                     wasm_id: id,
-                    payload: OutPayload::Reloaded(widget_id),
+                    payload: OutPayload::Reloaded,
                 })
             }
             Payload::SaveState => {
@@ -855,7 +764,7 @@ pub enum Commands {
     Subscribe(String),
     Unsubscribe(String),
     SetCursor(CursorIcon),
-    Redraw(usize),
+    Redraw,
 }
 
 #[derive(Debug, Clone, PartialEq)]
diff --git a/rust/editor2/editor/src/widget.rs b/rust/editor2/editor/src/widget.rs
index 920a43da..bb091e2b 100644
--- a/rust/editor2/editor/src/widget.rs
+++ b/rust/editor2/editor/src/widget.rs
@@ -302,12 +302,11 @@ impl Widget {
     pub fn on_click(
         &mut self,
         position: &Position,
-        wasm_messenger: &mut WasmMessenger,
     ) -> Vec<Event> {
         let widget_space = self.widget_space(position);
         match &mut self.data {
-            WidgetData::Wasm { wasm: _, wasm_id } => {
-                wasm_messenger.send_on_click(*wasm_id, &widget_space);
+            WidgetData::Wasm { .. } => {
+                self.data2.on_click(widget_space.x, widget_space.y).unwrap();
                 vec![]
             }
             _ => self.on_click.clone(),
@@ -325,21 +324,21 @@ impl Widget {
     }
     
 
-    pub fn on_mouse_down(&mut self, position: &Position, wasm_messenger: &mut WasmMessenger) {
+    pub fn on_mouse_down(&mut self, position: &Position) {
         let widget_space = self.widget_space(position);
         match &mut self.data {
-            WidgetData::Wasm { wasm: _, wasm_id } => {
-                wasm_messenger.send_on_mouse_down(*wasm_id, &widget_space);
+            WidgetData::Wasm { .. } => {
+                self.data2.on_mouse_down(widget_space.x, widget_space.y).unwrap();
             }
             _ => {}
         }
     }
 
-    pub fn on_mouse_up(&mut self, position: &Position, wasm_messenger: &mut WasmMessenger) {
+    pub fn on_mouse_up(&mut self, position: &Position) {
         let widget_space = self.widget_space(position);
         match &mut self.data {
-            WidgetData::Wasm { wasm: _, wasm_id } => {
-                wasm_messenger.send_on_mouse_up(*wasm_id, &widget_space);
+            WidgetData::Wasm { .. } => {
+                self.data2.on_mouse_up(widget_space.x, widget_space.y).unwrap();
             }
             _ => {}
         }
@@ -427,7 +426,6 @@ impl Widget {
                 *wasm_id = new_wasm_id;
                 if let Some(state) = &wasm.state {
                     self.data2.set_state(state.clone()).unwrap();
-                    wasm_messenger.send_set_state(*wasm_id, state);
                 }
             }
             _ => {}
@@ -466,14 +464,13 @@ impl Widget {
     }
 
     pub fn send_process_message(
-        &self,
+        &mut self,
         process_id: usize,
         buf: &str,
-        wasm_messenger: &mut WasmMessenger,
     ) {
         match &self.data {
-            WidgetData::Wasm { wasm: _, wasm_id } => {
-                wasm_messenger.send_process_message(*wasm_id, process_id, buf);
+            WidgetData::Wasm { .. } => {
+                self.data2.on_process_message(process_id as i32, buf.to_string()).unwrap();
             }
             WidgetData::Deleted => {}
             _ => {
@@ -482,16 +479,16 @@ impl Widget {
         }
     }
 
-    pub fn on_size_change(&mut self, width: f32, height: f32, wasm_messenger: &mut WasmMessenger) {
+    pub fn on_size_change(&mut self, width: f32, height: f32) {
         match &mut self.data {
-            WidgetData::Wasm { wasm: _, wasm_id } => {
-                wasm_messenger.send_on_size_change(*wasm_id, width, height);
+            WidgetData::Wasm { .. } => {
+                self.data2.on_size_change(width, height).unwrap();
             }
             _ => {}
         }
     }
 
-    pub fn on_move(&mut self, x: f32, y: f32, wasm_messenger: &mut WasmMessenger) {
+    pub fn on_move(&mut self, x: f32, y: f32) {
         match &mut self.data {
             WidgetData::Wasm { .. } => {
                 self.data2.on_move(x, y).unwrap();
@@ -503,14 +500,14 @@ impl Widget {
         }
     }
 
-    pub fn on_scroll(&mut self, x: f64, y: f64, wasm_messenger: &mut WasmMessenger) -> bool {
+    pub fn on_scroll(&mut self, x: f64, y: f64) -> bool {
         match &mut self.data {
             WidgetData::TextPane { .. } => {
                 self.data2.on_scroll(x, y).unwrap();
                 true
             }
-            WidgetData::Wasm { wasm: _, wasm_id } => {
-                wasm_messenger.send_on_scroll(*wasm_id, x, y);
+            WidgetData::Wasm { .. } => {
+                self.data2.on_scroll(x, y).unwrap();
                 true
             }
             _ => {
@@ -535,7 +532,7 @@ impl Widget {
         }
     }
 
-    pub fn on_key(&mut self, input: KeyboardInput, wasm_messenger: &mut WasmMessenger) -> bool {
+    pub fn on_key(&mut self, input: KeyboardInput) -> bool {
         match self.data {
             WidgetData::Wasm { .. } => {
                self.data2.on_key(input.to_framework()).unwrap();
diff --git a/rust/editor2/editor/src/widget2.rs b/rust/editor2/editor/src/widget2.rs
index b93e53c4..ea7de771 100644
--- a/rust/editor2/editor/src/widget2.rs
+++ b/rust/editor2/editor/src/widget2.rs
@@ -247,12 +247,12 @@ impl Widget for WasmWidget {
     }
     
     fn reload(&mut self) -> std::result::Result<(), Box<dyn Error>> {
-        // self.sender.try_send(wrap_payload(Payload::Reload))?;
+        self.sender.try_send(wrap_payload(Payload::Reload))?;
         Ok(())
     }
 
     fn set_state(&mut self, state: String) -> std::result::Result<(), Box<dyn Error>> {
-        // self.sender.try_send(wrap_payload(Payload::SetState(Some(state))))?;
+        self.sender.try_send(wrap_payload(Payload::PartialState(Some(state))))?;
         Ok(())
     }
 
@@ -347,7 +347,10 @@ impl Widget for WasmWidget {
                     // }
                     // should_mark_dirty = false;
                 }
-                OutPayload::Reloaded(widget_id) => {
+                OutPayload::Reloaded => {
+                    // TODO: Don't need widget id
+                    // from message, but probably do need
+                    // to know what widget we are.
                     // let commands = self
                     //     .wasm_non_draw_commands
                     //     .entry(message.wasm_id)
diff --git a/rust/editor2/framework/src/lib.rs b/rust/editor2/framework/src/lib.rs
index e79caccb..c3fdece3 100644
--- a/rust/editor2/framework/src/lib.rs
+++ b/rust/editor2/framework/src/lib.rs
@@ -358,6 +358,7 @@ pub fn fetch_string(str_ptr: u32) -> String {
 
 pub fn merge_json(partial_state: Option<String>, state: String) -> String {
     if let Some(partial_state) = partial_state {
+        println!("partial state {:?}", partial_state);
         let mut partial_state: serde_json::Value = serde_json::from_str(&partial_state).unwrap();
         let mut state: serde_json::Value = serde_json::from_str(&state).unwrap();
 
