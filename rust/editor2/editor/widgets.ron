(
    position: (
        x: 2326.5627,
        y: 134.39417,
    ),
    size: (
        width: 200.0,
        height: 100.0,
    ),
    on_click: [
        SaveWidgets,
    ],
    data: Noop,
);
(
    position: (
        x: 2653.5234,
        y: 676.5469,
    ),
    size: (
        width: 512.0,
        height: 512.0,
    ),
    on_click: [],
    data: Image(
        data: (
            path: "./resources/test.png",
        ),
    ),
);
(
    position: (
        x: 2448.7266,
        y: 1882.5156,
    ),
    size: (
        width: 100.0,
        height: 100.0,
    ),
    on_click: [
        SaveWidgets,
    ],
    data: Noop,
);
(
    position: (
        x: 3015.3984,
        y: 128.11719,
    ),
    size: (
        width: 100.0,
        height: 100.0,
    ),
    on_click: [],
    data: Circle(
        radius: 10.0,
        color: (
            r: 1.0,
            g: 0.0,
            b: 0.0,
            a: 1.0,
        ),
    ),
);
(
    position: (
        x: 2699.0313,
        y: 131.92188,
    ),
    size: (
        width: 500.0,
        height: 500.0,
    ),
    on_click: [],
    data: TextPane(
        text_pane: (
            contents: "Widget(\n    position: Position(\n        x: 500.0,\n        y: 500.0,\n    ),\n    size: Size(\n        width: 100.0,\n        height: 100.0,\n    ),\n    on_click: [],\n    data: Compound(\n        children: [\n            2,\n            3,\n            5,\n        ],\n    ),\n)",
            line_height: 40.0,
            offset: (
                x: 0.0,
                y: 0.0,
            ),
        ),
    ),
);
(
    position: (
        x: 56.921875,
        y: -85.58594,
    ),
    size: (
        width: 200.0,
        height: 200.0,
    ),
    on_click: [],
    data: Text(
        text: "Lith",
        text_options: (
            font_family: "Ubuntu Mono",
            font_weight: Bold,
            size: 120.0,
            color: (
                r: 1.0,
                g: 1.0,
                b: 1.0,
                a: 1.0,
            ),
        ),
    ),
);
(
    position: (
        x: 3015.3984,
        y: 128.11719,
    ),
    size: (
        width: 100.0,
        height: 100.0,
    ),
    on_click: [],
    data: Compound(
        children: [
            2,
            3,
            5,
        ],
    ),
);
(
    position: (
        x: 2605.2854,
        y: 1290.1572,
    ),
    size: (
        width: 600.0,
        height: 600.0,
    ),
    on_click: [],
    data: Wasm(
        wasm: (
            path: "/Users/jimmyhmiller/Documents/Code/PlayGround/rust/editor2/target/wasm32-wasi/debug/counter.wasm",
            state: Some("{\"contents\":\"\",\"line_height\":30.0,\"offset\":{\"x\":0.0,\"y\":0.0},\"cursor\":{\"line\":12,\"column\":7},\"text_buffer\":{\"bytes\":[97,115,100,102,104,106,98,115,100,97,102,106,104,118,98,115,10,97,115,100,102,10,97,115,100,102,10,97,115,100,10,102,97,10,115,100,103,59,97,107,106,115,102,100,110,98,39,102,97,108,107,106,98,118,10,97,100,115,107,110,118,10,97,115,108,100,107,118,10,110,97,115,100,107,110,118,10,97,115,100,107,110,118,10,97,107,108,115,100,110,118,10,97,107,115,100,110,10,118,107,97,115,100,110,118,97,100,118,97,115,100,102,10]}}"),
        ),
    ),
);
(
    position: (
        x: 66.98743,
        y: 335.88403,
    ),
    size: (
        width: 2000.0,
        height: 1800.0,
    ),
    on_click: [],
    data: Wasm(
        wasm: (
            path: "/Users/jimmyhmiller/Documents/Code/PlayGround/rust/editor2/target/wasm32-wasi/release/asm.wasm",
            state: Some(""Files: FileInfo {\n    name: \"adc\",\n    asm: [\n        \"<asmtemplate><text>ADC  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>ADC  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Add with Carry\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"adcs\",\n    asm: [\n        \"<asmtemplate><text>ADCS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>ADCS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Add with Carry, setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"add_addsub_ext\",\n    asm: [\n        \"<asmtemplate><text>ADD  </text><a link=\\\"sa_wd_wsp\\\" hover=\\\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\\\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>ADD  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_r\\\" hover=\\\"Width specifier (field &quot;option&quot;) [W,X]\\\">&lt;R&gt;</a><a link=\\\"sa_m\\\" hover=\\\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\\\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend_1\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Add (extended register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opt\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"imm3\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"add_addsub_imm\",\n    asm: [\n        \"<asmtemplate><text>ADD  </text><a link=\\\"sa_wd_wsp\\\" hover=\\\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\\\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>ADD  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Add (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"sh\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"12\\\" name=\\\"imm12\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"12\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"add_addsub_shift\",\n    asm: [\n        \"<asmtemplate><text>ADD  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>ADD  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Add (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"addg\",\n    asm: [\n        \"<asmtemplate><text>ADDG  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Xd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_uimm6\\\" hover=\\\"Unsigned immediate, multiple of 16 [0-1008] (field &quot;uimm6&quot;)\\\">&lt;uimm6&gt;</a><text>, #</text><a link=\\\"sa_uimm4\\\" hover=\\\"Unsigned immediate [0-15] (field &quot;uimm4&quot;)\\\">&lt;uimm4&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Add with Tag\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"uimm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"2\\\" name=\\\"op3\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>(0)</c>\\n          <c>(0)</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" width=\\\"4\\\" name=\\\"uimm4\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"adds_addsub_ext\",\n    asm: [\n        \"<asmtemplate><text>ADDS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>ADDS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_r\\\" hover=\\\"Width specifier (field &quot;option&quot;) [W,X]\\\">&lt;R&gt;</a><a link=\\\"sa_m\\\" hover=\\\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\\\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend_1\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Add (extended register), setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opt\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"imm3\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"adds_addsub_imm\",\n    asm: [\n        \"<asmtemplate><text>ADDS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>ADDS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Add (immediate), setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"sh\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"12\\\" name=\\\"imm12\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"12\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"adds_addsub_shift\",\n    asm: [\n        \"<asmtemplate><text>ADDS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>ADDS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Add (shifted register), setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"adr\",\n    asm: [\n        \"<asmtemplate><text>ADR  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_label\\\" hover=\\\"Label whose address is to be calculated (field &quot;immhi:immlo&quot;)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Form PC-relative address\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"immlo\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"19\\\" name=\\\"immhi\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"19\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"adrp\",\n    asm: [\n        \"<asmtemplate><text>ADRP  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_label\\\" hover=\\\"Label whose 4KB page address is to be calculated (field immhi:immlo)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Form PC-relative address to 4KB page\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"immlo\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"19\\\" name=\\\"immhi\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"19\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"and_log_imm\",\n    asm: [\n        \"<asmtemplate><text>AND  </text><a link=\\\"sa_wd_wsp\\\" hover=\\\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\\\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Bitmask immediate (field &quot;imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>AND  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Bitmask immediate (field &quot;N:imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Bitwise AND (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"and_log_shift\",\n    asm: [\n        \"<asmtemplate><text>AND  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>AND  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Bitwise AND (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ands_log_imm\",\n    asm: [\n        \"<asmtemplate><text>ANDS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Bitmask immediate (field &quot;imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>ANDS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Bitmask immediate (field &quot;N:imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Bitwise AND (immediate), setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ands_log_shift\",\n    asm: [\n        \"<asmtemplate><text>ANDS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>ANDS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Bitwise AND (shifted register), setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"asr_sbfm\",\n    asm: [\n        \"<asmtemplate><text>ASR  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_shift\\\" hover=\\\"Shift amount [0-31] (field &quot;immr&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbfm.xml#SBFM_32M_bitfield\\\">SBFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_shift\\\" hover=\\\"Shift amount [0-31] (field &quot;immr&quot;)\\\">&lt;shift&gt;</a><text>, #31</text></asmtemplate>\",\n        \"<asmtemplate><text>ASR  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_shift_1\\\" hover=\\\"Shift amount [0-63] (field &quot;immr&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbfm.xml#SBFM_64M_bitfield\\\">SBFM</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_shift_1\\\" hover=\\\"Shift amount [0-63] (field &quot;immr&quot;)\\\">&lt;shift&gt;</a><text>, #63</text></asmtemplate>\",\n    ],\n    desc: \"Arithmetic Shift Right (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxxx\\\">\\n          <c>x</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"asr_asrv\",\n    asm: [\n        \"<asmtemplate><text>ASR  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"asrv.xml#ASRV_32_dp_2src\\\">ASRV</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>ASR  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"asrv.xml#ASRV_64_dp_2src\\\">ASRV</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Arithmetic Shift Right (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode2[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"asrv\",\n    asm: [\n        \"<asmtemplate><text>ASRV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>ASRV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Arithmetic Shift Right Variable\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode2[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"at_sys\",\n    asm: [\n        \"<asmtemplate><text>AT  </text><a link=\\\"sa_at_op\\\" hover=\\\"AT instruction name, as listed for AT system instruction group (field &quot;op1:CRm&lt;0&gt;:op2&quot;) [S1E0R,S1E0W,S1E1R,S1E1RP (FEAT_PAN2),S1E1W,S1E1WP (FEAT_PAN2),S1E2R,S1E2W,S1E3R,S1E3W,S12E0R,S12E0W,S12E1R,S12E1W]\\\">&lt;at_op&gt;</a><text>, </text><a link=\\\"sa_xt_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sys.xml#SYS_CR_systeminstrs\\\">SYS</a><text> #</text><a link=\\\"sa_op1\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\\\">&lt;op1&gt;</a><text>, C7, </text><a link=\\\"sa_cm\\\" hover=\\\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\\\">&lt;Cm&gt;</a><text>, #</text><a link=\\\"sa_op2\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\\\">&lt;op2&gt;</a><text>, </text><a link=\\\"sa_xt_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Address Translate\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"autda\",\n    asm: [\n        \"<asmtemplate><text>AUTDA  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>AUTDZA  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Authenticate Data address, using key A\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode[5]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode[4]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"Z\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"opcode[2:0]\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"autdb\",\n    asm: [\n        \"<asmtemplate><text>AUTDB  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>AUTDZB  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Authenticate Data address, using key B\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode[5]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode[4]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"Z\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"opcode[2:0]\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"autia\",\n    asm: [\n        \"<asmtemplate><text>AUTIA  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>AUTIZA  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>AUTIA1716</text></asmtemplate>\",\n        \"<asmtemplate><text>AUTIASP</text></asmtemplate>\",\n        \"<asmtemplate><text>AUTIAZ</text></asmtemplate>\",\n    ],\n    desc: \"Authenticate Instruction address, using key A\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode[5]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode[4]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"Z\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"opcode[2:0]\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"autib\",\n    asm: [\n        \"<asmtemplate><text>AUTIB  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>AUTIZB  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>AUTIB1716</text></asmtemplate>\",\n        \"<asmtemplate><text>AUTIBSP</text></asmtemplate>\",\n        \"<asmtemplate><text>AUTIBZ</text></asmtemplate>\",\n    ],\n    desc: \"Authenticate Instruction address, using key B\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode[5]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode[4]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"Z\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"opcode[2:0]\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"axflag\",\n    asm: [\n        \"<asmtemplate><text>AXFLAG</text></asmtemplate>\",\n    ],\n    desc: \"Convert floating-point condition flags from Arm to external format\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>(0)</c>\\n          <c>(0)</c>\\n          <c>(0)</c>\\n          <c>(0)</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"b_uncond\",\n    asm: [\n        \"<asmtemplate><text>B  </text><a link=\\\"sa_label\\\" hover=\\\"Label to be unconditionally branched to (field imm26)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Branch\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"26\\\" name=\\\"imm26\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"26\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"b_cond\",\n    asm: [\n        \"<asmtemplate><text>B.</text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>  </text><a link=\\\"sa_label\\\" hover=\\\"Label to be conditionally branched to (field imm19)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Branch conditionally\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"19\\\" name=\\\"imm19\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"19\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"3\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"bc_cond\",\n    asm: [\n        \"<asmtemplate><text>BC.</text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>  </text><a link=\\\"sa_label\\\" hover=\\\"Label to be conditionally branched to (field imm19)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Branch Consistent conditionally\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"19\\\" name=\\\"imm19\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"19\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"3\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"bfc_bfm\",\n    asm: [\n        \"<asmtemplate><text>BFC  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, #</text><a link=\\\"sa_lsb\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-31]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"bfm.xml#BFM_32M_bitfield\\\">BFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, WZR, #(-</text><a link=\\\"sa_lsb\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-31]\\\">&lt;lsb&gt;</a><text> MOD 32), #(</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n        \"<asmtemplate><text>BFC  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, #</text><a link=\\\"sa_lsb_2\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-63]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"bfm.xml#BFM_64M_bitfield\\\">BFM</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, XZR, #(-</text><a link=\\\"sa_lsb_2\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-63]\\\">&lt;lsb&gt;</a><text> MOD 64), #(</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n    ],\n    desc: \"Bitfield Clear\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"bfi_bfm\",\n    asm: [\n        \"<asmtemplate><text>BFI  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_lsb\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-31]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"bfm.xml#BFM_32M_bitfield\\\">BFM</a><text>  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #(-</text><a link=\\\"sa_lsb\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-31]\\\">&lt;lsb&gt;</a><text> MOD 32), #(</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n        \"<asmtemplate><text>BFI  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_lsb_2\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-63]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"bfm.xml#BFM_64M_bitfield\\\">BFM</a><text>  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #(-</text><a link=\\\"sa_lsb_2\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-63]\\\">&lt;lsb&gt;</a><text> MOD 64), #(</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n    ],\n    desc: \"Bitfield Insert\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" constraint=\\\"!= 11111\\\" psbits=\\\"xxxxx\\\">\\n          <c colspan=\\\"5\\\">!= 11111</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"bfm\",\n    asm: [\n        \"<asmtemplate><text>BFM  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_immr\\\" hover=\\\"Right rotate amount [0-31] (field &quot;immr&quot;)\\\">&lt;immr&gt;</a><text>, #</text><a link=\\\"sa_imms\\\" hover=\\\"Leftmost bit number to be moved from the source [0-31] (field &quot;imms&quot;)\\\">&lt;imms&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>BFM  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_immr_1\\\" hover=\\\"Right rotate amount [0-63] (field &quot;immr&quot;)\\\">&lt;immr&gt;</a><text>, #</text><a link=\\\"sa_imms_1\\\" hover=\\\"Leftmost bit number to be moved from the source [0-63] (field &quot;imms&quot;)\\\">&lt;imms&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Bitfield Move\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"bfxil_bfm\",\n    asm: [\n        \"<asmtemplate><text>BFXIL  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_lsb_1\\\" hover=\\\"Bit number of lsb of the source bitfield [0-31]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"bfm.xml#BFM_32M_bitfield\\\">BFM</a><text>  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_lsb_1\\\" hover=\\\"Bit number of lsb of the source bitfield [0-31]\\\">&lt;lsb&gt;</a><text>, #(</text><a link=\\\"sa_lsb_1\\\" hover=\\\"Bit number of lsb of the source bitfield [0-31]\\\">&lt;lsb&gt;</a><text>+</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n        \"<asmtemplate><text>BFXIL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_lsb_3\\\" hover=\\\"Bit number of lsb of the source bitfield [0-63]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"bfm.xml#BFM_64M_bitfield\\\">BFM</a><text>  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_lsb_3\\\" hover=\\\"Bit number of lsb of the source bitfield [0-63]\\\">&lt;lsb&gt;</a><text>, #(</text><a link=\\\"sa_lsb_3\\\" hover=\\\"Bit number of lsb of the source bitfield [0-63]\\\">&lt;lsb&gt;</a><text>+</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n    ],\n    desc: \"Bitfield extract and insert at low end\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"bic_log_shift\",\n    asm: [\n        \"<asmtemplate><text>BIC  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>BIC  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Bitwise Bit Clear (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"bics\",\n    asm: [\n        \"<asmtemplate><text>BICS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>BICS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Bitwise Bit Clear (shifted register), setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"bl\",\n    asm: [\n        \"<asmtemplate><text>BL  </text><a link=\\\"sa_label\\\" hover=\\\"Label to be unconditionally branched to (field imm26)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Branch with Link\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"26\\\" name=\\\"imm26\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"26\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"blr\",\n    asm: [\n        \"<asmtemplate><text>BLR  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Branch with Link to Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"Z\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc[2:1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"op2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op3[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"M\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"blra\",\n    asm: [\n        \"<asmtemplate><text>BLRAAZ  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>BLRAA  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm_sp\\\" hover=\\\"64-bit general-purpose source register or SP holding modifier (field &quot;Rm&quot;)\\\">&lt;Xm|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>BLRABZ  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>BLRAB  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm_sp\\\" hover=\\\"64-bit general-purpose source register or SP holding modifier (field &quot;Rm&quot;)\\\">&lt;Xm|SP&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Branch with Link to Register, with pointer authentication\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"Z\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc[2:1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"op2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op3[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"M\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"br\",\n    asm: [\n        \"<asmtemplate><text>BR  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Branch to Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"Z\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc[2:1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"op2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op3[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"M\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"bra\",\n    asm: [\n        \"<asmtemplate><text>BRAAZ  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>BRAA  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm_sp\\\" hover=\\\"64-bit general-purpose source register or SP holding modifier (field &quot;Rm&quot;)\\\">&lt;Xm|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>BRABZ  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>BRAB  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm_sp\\\" hover=\\\"64-bit general-purpose source register or SP holding modifier (field &quot;Rm&quot;)\\\">&lt;Xm|SP&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Branch to Register, with pointer authentication\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"Z\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc[2:1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"op2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op3[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"M\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"brk\",\n    asm: [\n        \"<asmtemplate><text>BRK  #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Breakpoint instruction\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"1\\\" width=\\\"2\\\" name=\\\"LL\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"bti\",\n    asm: [\n        \"<asmtemplate><text>BTI  </text><text>{</text><a link=\\\"sa_targets\\\" hover=\\\"Type of indirection (field &quot;op2&lt;2:1&gt;&quot;) [(omitted),c,j,jc]\\\">&lt;targets&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Branch Target Identification\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xxx\\\">\\n          <c>x</c>\\n          <c>x</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cas\",\n    asm: [\n        \"<asmtemplate><text>CAS  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASA  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASAL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CAS  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASA  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASAL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Compare and Swap word or doubleword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"casb\",\n    asm: [\n        \"<asmtemplate><text>CASAB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASALB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Compare and Swap byte in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cash\",\n    asm: [\n        \"<asmtemplate><text>CASAH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASALH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Compare and Swap halfword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"casp\",\n    asm: [\n        \"<asmtemplate><text>CASP  </text><a link=\\\"sa_ws\\\" hover=\\\"First 32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_w_s_plus_1\\\" hover=\\\"Second 32-bit general-purpose register to be compared and loaded\\\">&lt;W(s+1)&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"First 32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, </text><a link=\\\"sa_w_t_plus_1\\\" hover=\\\"Second 32-bit general-purpose register to be conditionally stored\\\">&lt;W(t+1)&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASPA  </text><a link=\\\"sa_ws\\\" hover=\\\"First 32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_w_s_plus_1\\\" hover=\\\"Second 32-bit general-purpose register to be compared and loaded\\\">&lt;W(s+1)&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"First 32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, </text><a link=\\\"sa_w_t_plus_1\\\" hover=\\\"Second 32-bit general-purpose register to be conditionally stored\\\">&lt;W(t+1)&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASPAL  </text><a link=\\\"sa_ws\\\" hover=\\\"First 32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_w_s_plus_1\\\" hover=\\\"Second 32-bit general-purpose register to be compared and loaded\\\">&lt;W(s+1)&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"First 32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, </text><a link=\\\"sa_w_t_plus_1\\\" hover=\\\"Second 32-bit general-purpose register to be conditionally stored\\\">&lt;W(t+1)&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASPL  </text><a link=\\\"sa_ws\\\" hover=\\\"First 32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_w_s_plus_1\\\" hover=\\\"Second 32-bit general-purpose register to be compared and loaded\\\">&lt;W(s+1)&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"First 32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, </text><a link=\\\"sa_w_t_plus_1\\\" hover=\\\"Second 32-bit general-purpose register to be conditionally stored\\\">&lt;W(t+1)&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASP  </text><a link=\\\"sa_xs\\\" hover=\\\"First 64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_x_s_plus_1\\\" hover=\\\"Second 64-bit general-purpose register to be compared and loaded\\\">&lt;X(s+1)&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"First 64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, </text><a link=\\\"sa_x_t_plus_1\\\" hover=\\\"Second 64-bit general-purpose register to be conditionally stored\\\">&lt;X(t+1)&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASPA  </text><a link=\\\"sa_xs\\\" hover=\\\"First 64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_x_s_plus_1\\\" hover=\\\"Second 64-bit general-purpose register to be compared and loaded\\\">&lt;X(s+1)&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"First 64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, </text><a link=\\\"sa_x_t_plus_1\\\" hover=\\\"Second 64-bit general-purpose register to be conditionally stored\\\">&lt;X(t+1)&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASPAL  </text><a link=\\\"sa_xs\\\" hover=\\\"First 64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_x_s_plus_1\\\" hover=\\\"Second 64-bit general-purpose register to be compared and loaded\\\">&lt;X(s+1)&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"First 64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, </text><a link=\\\"sa_x_t_plus_1\\\" hover=\\\"Second 64-bit general-purpose register to be conditionally stored\\\">&lt;X(t+1)&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>CASPL  </text><a link=\\\"sa_xs\\\" hover=\\\"First 64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_x_s_plus_1\\\" hover=\\\"Second 64-bit general-purpose register to be compared and loaded\\\">&lt;X(s+1)&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"First 64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, </text><a link=\\\"sa_x_t_plus_1\\\" hover=\\\"Second 64-bit general-purpose register to be conditionally stored\\\">&lt;X(t+1)&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Compare and Swap Pair of words or doublewords in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cbnz\",\n    asm: [\n        \"<asmtemplate><text>CBNZ  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be tested (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, </text><a link=\\\"sa_label\\\" hover=\\\"Label to be conditionally branched to (field imm19)\\\">&lt;label&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CBNZ  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be tested (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, </text><a link=\\\"sa_label\\\" hover=\\\"Label to be conditionally branched to (field imm19)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Compare and Branch on Nonzero\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"19\\\" name=\\\"imm19\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"19\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cbz\",\n    asm: [\n        \"<asmtemplate><text>CBZ  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be tested (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, </text><a link=\\\"sa_label\\\" hover=\\\"Label to be conditionally branched to (field imm19)\\\">&lt;label&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CBZ  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be tested (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, </text><a link=\\\"sa_label\\\" hover=\\\"Label to be conditionally branched to (field imm19)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Compare and Branch on Zero\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"19\\\" name=\\\"imm19\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"19\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ccmn_imm\",\n    asm: [\n        \"<asmtemplate><text>CCMN  </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Five bit unsigned (positive) immediate (field &quot;imm5&quot;)\\\">&lt;imm&gt;</a><text>, #</text><a link=\\\"sa_nzcv\\\" hover=\\\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\\\">&lt;nzcv&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CCMN  </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Five bit unsigned (positive) immediate (field &quot;imm5&quot;)\\\">&lt;imm&gt;</a><text>, #</text><a link=\\\"sa_nzcv\\\" hover=\\\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\\\">&lt;nzcv&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Conditional Compare Negative (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"imm5\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"3\\\" width=\\\"4\\\" name=\\\"nzcv\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ccmn_reg\",\n    asm: [\n        \"<asmtemplate><text>CCMN  </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, #</text><a link=\\\"sa_nzcv\\\" hover=\\\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\\\">&lt;nzcv&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CCMN  </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>, #</text><a link=\\\"sa_nzcv\\\" hover=\\\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\\\">&lt;nzcv&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Conditional Compare Negative (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"3\\\" width=\\\"4\\\" name=\\\"nzcv\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ccmp_imm\",\n    asm: [\n        \"<asmtemplate><text>CCMP  </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Five bit unsigned (positive) immediate (field &quot;imm5&quot;)\\\">&lt;imm&gt;</a><text>, #</text><a link=\\\"sa_nzcv\\\" hover=\\\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\\\">&lt;nzcv&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CCMP  </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Five bit unsigned (positive) immediate (field &quot;imm5&quot;)\\\">&lt;imm&gt;</a><text>, #</text><a link=\\\"sa_nzcv\\\" hover=\\\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\\\">&lt;nzcv&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Conditional Compare (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"imm5\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"3\\\" width=\\\"4\\\" name=\\\"nzcv\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ccmp_reg\",\n    asm: [\n        \"<asmtemplate><text>CCMP  </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, #</text><a link=\\\"sa_nzcv\\\" hover=\\\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\\\">&lt;nzcv&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CCMP  </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>, #</text><a link=\\\"sa_nzcv\\\" hover=\\\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\\\">&lt;nzcv&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Conditional Compare (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"3\\\" width=\\\"4\\\" name=\\\"nzcv\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cfinv\",\n    asm: [\n        \"<asmtemplate><text>CFINV</text></asmtemplate>\",\n    ],\n    desc: \"Invert Carry Flag\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" name=\\\"op0[1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"19\\\" name=\\\"op0[0]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>(0)</c>\\n          <c>(0)</c>\\n          <c>(0)</c>\\n          <c>(0)</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cfp_sys\",\n    asm: [\n        \"<asmtemplate><text>CFP  RCTX, </text><a link=\\\"sa_xt_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sys.xml#SYS_CR_systeminstrs\\\">SYS</a><text> #3, C7, C3, #4, </text><a link=\\\"sa_xt_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Control Flow Prediction Restriction by Context\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cinc_csinc\",\n    asm: [\n        \"<asmtemplate><text>CINC  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"csinc.xml#CSINC_32_condsel\\\">CSINC</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wn_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Wn&gt;</a><text>, invert(</text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>)</text></asmtemplate>\",\n        \"<asmtemplate><text>CINC  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"csinc.xml#CSINC_64_condsel\\\">CSINC</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xn&gt;</a><text>, invert(</text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>)</text></asmtemplate>\",\n    ],\n    desc: \"Conditional Increment\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\" settings=\\\"5\\\" constraint=\\\"!= 11111\\\" psbits=\\\"xxxxx\\\">\\n          <c colspan=\\\"5\\\">!= 11111</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\" settings=\\\"3\\\" constraint=\\\"!= 111x\\\" psbits=\\\"xxxx\\\">\\n          <c colspan=\\\"4\\\">!= 111x</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2[1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" constraint=\\\"!= 11111\\\" psbits=\\\"xxxxx\\\">\\n          <c colspan=\\\"5\\\">!= 11111</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cinv_csinv\",\n    asm: [\n        \"<asmtemplate><text>CINV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"csinv.xml#CSINV_32_condsel\\\">CSINV</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wn_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Wn&gt;</a><text>, invert(</text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>)</text></asmtemplate>\",\n        \"<asmtemplate><text>CINV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"csinv.xml#CSINV_64_condsel\\\">CSINV</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xn&gt;</a><text>, invert(</text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>)</text></asmtemplate>\",\n    ],\n    desc: \"Conditional Invert\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\" settings=\\\"5\\\" constraint=\\\"!= 11111\\\" psbits=\\\"xxxxx\\\">\\n          <c colspan=\\\"5\\\">!= 11111</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\" settings=\\\"3\\\" constraint=\\\"!= 111x\\\" psbits=\\\"xxxx\\\">\\n          <c colspan=\\\"4\\\">!= 111x</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2[1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" constraint=\\\"!= 11111\\\" psbits=\\\"xxxxx\\\">\\n          <c colspan=\\\"5\\\">!= 11111</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"clrex\",\n    asm: [\n        \"<asmtemplate><text>CLREX  </text><text>{</text><text>#</text><a link=\\\"sa_imm\\\" hover=\\\"Optional 4-bit unsigned immediate [0-15], default 15 (field &quot;CRm&quot;)\\\">&lt;imm&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Clear Exclusive\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cls_int\",\n    asm: [\n        \"<asmtemplate><text>CLS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CLS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Count Leading Sign bits\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"5\\\" name=\\\"opcode[5:1]\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"clz_int\",\n    asm: [\n        \"<asmtemplate><text>CLZ  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CLZ  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Count Leading Zeros\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"5\\\" name=\\\"opcode[5:1]\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cmn_adds_addsub_ext\",\n    asm: [\n        \"<asmtemplate><text>CMN  </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"adds_addsub_ext.xml#ADDS_32S_addsub_ext\\\">ADDS</a><text> WZR, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>CMN  </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_r\\\" hover=\\\"Width specifier (field &quot;option&quot;) [W,X]\\\">&lt;R&gt;</a><a link=\\\"sa_m\\\" hover=\\\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\\\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend_1\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"adds_addsub_ext.xml#ADDS_64S_addsub_ext\\\">ADDS</a><text> XZR, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_r\\\" hover=\\\"Width specifier (field &quot;option&quot;) [W,X]\\\">&lt;R&gt;</a><a link=\\\"sa_m\\\" hover=\\\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\\\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend_1\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Compare Negative (extended register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opt\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"imm3\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cmn_adds_addsub_imm\",\n    asm: [\n        \"<asmtemplate><text>CMN  </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"adds_addsub_imm.xml#ADDS_32S_addsub_imm\\\">ADDS</a><text> WZR, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>CMN  </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"adds_addsub_imm.xml#ADDS_64S_addsub_imm\\\">ADDS</a><text> XZR, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Compare Negative (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"sh\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"12\\\" name=\\\"imm12\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"12\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cmn_adds_addsub_shift\",\n    asm: [\n        \"<asmtemplate><text>CMN  </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"adds_addsub_shift.xml#ADDS_32_addsub_shift\\\">ADDS</a><text> WZR, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>CMN  </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"adds_addsub_shift.xml#ADDS_64_addsub_shift\\\">ADDS</a><text> XZR, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Compare Negative (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cmp_subs_addsub_ext\",\n    asm: [\n        \"<asmtemplate><text>CMP  </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"subs_addsub_ext.xml#SUBS_32S_addsub_ext\\\">SUBS</a><text> WZR, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>CMP  </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_r\\\" hover=\\\"Width specifier (field &quot;option&quot;) [W,X]\\\">&lt;R&gt;</a><a link=\\\"sa_m\\\" hover=\\\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\\\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend_1\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"subs_addsub_ext.xml#SUBS_64S_addsub_ext\\\">SUBS</a><text> XZR, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_r\\\" hover=\\\"Width specifier (field &quot;option&quot;) [W,X]\\\">&lt;R&gt;</a><a link=\\\"sa_m\\\" hover=\\\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\\\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend_1\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Compare (extended register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opt\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"imm3\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cmp_subs_addsub_imm\",\n    asm: [\n        \"<asmtemplate><text>CMP  </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"subs_addsub_imm.xml#SUBS_32S_addsub_imm\\\">SUBS</a><text> WZR, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>CMP  </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"subs_addsub_imm.xml#SUBS_64S_addsub_imm\\\">SUBS</a><text> XZR, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Compare (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"sh\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"12\\\" name=\\\"imm12\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"12\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cmp_subs_addsub_shift\",\n    asm: [\n        \"<asmtemplate><text>CMP  </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"subs_addsub_shift.xml#SUBS_32_addsub_shift\\\">SUBS</a><text> WZR, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>CMP  </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"subs_addsub_shift.xml#SUBS_64_addsub_shift\\\">SUBS</a><text> XZR, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Compare (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cmpp_subps\",\n    asm: [\n        \"<asmtemplate><text>CMPP  </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_xm_sp\\\" hover=\\\"Second 64-bit general-purpose source register or SP (field &quot;Xm&quot;)\\\">&lt;Xm|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"subps.xml#SUBPS_64S_dp_2src\\\">SUBPS</a><text> XZR, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_xm_sp\\\" hover=\\\"Second 64-bit general-purpose source register or SP (field &quot;Xm&quot;)\\\">&lt;Xm|SP&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Compare with Tag\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Xm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode&lt;5&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode&lt;4&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"opcode&lt;3&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"opcode&lt;2&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"opcode&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"opcode&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xd\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cneg_csneg\",\n    asm: [\n        \"<asmtemplate><text>CNEG  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"csneg.xml#CSNEG_32_condsel\\\">CSNEG</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wn_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Wn&gt;</a><text>, invert(</text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>)</text></asmtemplate>\",\n        \"<asmtemplate><text>CNEG  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"csneg.xml#CSNEG_64_condsel\\\">CSNEG</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xn&gt;</a><text>, invert(</text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>)</text></asmtemplate>\",\n    ],\n    desc: \"Conditional Negate\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\" settings=\\\"3\\\" constraint=\\\"!= 111x\\\" psbits=\\\"xxxx\\\">\\n          <c colspan=\\\"4\\\">!= 111x</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2[1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpp_sys\",\n    asm: [\n        \"<asmtemplate><text>CPP  RCTX, </text><a link=\\\"sa_xt_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sys.xml#SYS_CR_systeminstrs\\\">SYS</a><text> #3, C7, C3, #7, </text><a link=\\\"sa_xt_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Cache Prefetch Prediction Restriction by Context\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfp\",\n    asm: [\n        \"<asmtemplate><text>CPYFE  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFM  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFP  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfpn\",\n    asm: [\n        \"<asmtemplate><text>CPYFEN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, reads and writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfprn\",\n    asm: [\n        \"<asmtemplate><text>CPYFERN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPRN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, reads non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfprt\",\n    asm: [\n        \"<asmtemplate><text>CPYFERT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMRT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPRT  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, reads unprivileged\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfprtn\",\n    asm: [\n        \"<asmtemplate><text>CPYFERTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMRTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPRTN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, reads unprivileged, reads and writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfprtrn\",\n    asm: [\n        \"<asmtemplate><text>CPYFERTRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMRTRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPRTRN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, reads unprivileged and non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfprtwn\",\n    asm: [\n        \"<asmtemplate><text>CPYFERTWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMRTWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPRTWN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, reads unprivileged, writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfpt\",\n    asm: [\n        \"<asmtemplate><text>CPYFET  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPT  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, reads and writes unprivileged\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfptn\",\n    asm: [\n        \"<asmtemplate><text>CPYFETN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPTN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, reads and writes unprivileged and non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfptrn\",\n    asm: [\n        \"<asmtemplate><text>CPYFETRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMTRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPTRN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, reads and writes unprivileged, reads non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfptwn\",\n    asm: [\n        \"<asmtemplate><text>CPYFETWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMTWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPTWN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, reads and writes unprivileged, writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfpwn\",\n    asm: [\n        \"<asmtemplate><text>CPYFEWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPWN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfpwt\",\n    asm: [\n        \"<asmtemplate><text>CPYFEWT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMWT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPWT  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, writes unprivileged\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfpwtn\",\n    asm: [\n        \"<asmtemplate><text>CPYFEWTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMWTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPWTN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, writes unprivileged, reads and writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfpwtrn\",\n    asm: [\n        \"<asmtemplate><text>CPYFEWTRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMWTRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPWTRN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, writes unprivileged, reads non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyfpwtwn\",\n    asm: [\n        \"<asmtemplate><text>CPYFEWTWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFMWTWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYFPWTWN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy Forward-only, writes unprivileged and non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyp\",\n    asm: [\n        \"<asmtemplate><text>CPYE  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYM  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYP  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpypn\",\n    asm: [\n        \"<asmtemplate><text>CPYEN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, reads and writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyprn\",\n    asm: [\n        \"<asmtemplate><text>CPYERN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPRN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, reads non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyprt\",\n    asm: [\n        \"<asmtemplate><text>CPYERT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMRT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPRT  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, reads unprivileged\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyprtn\",\n    asm: [\n        \"<asmtemplate><text>CPYERTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMRTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPRTN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, reads unprivileged, reads and writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyprtrn\",\n    asm: [\n        \"<asmtemplate><text>CPYERTRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMRTRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPRTRN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, reads unprivileged and non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyprtwn\",\n    asm: [\n        \"<asmtemplate><text>CPYERTWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMRTWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPRTWN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, reads unprivileged, writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpypt\",\n    asm: [\n        \"<asmtemplate><text>CPYET  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPT  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, reads and writes unprivileged\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyptn\",\n    asm: [\n        \"<asmtemplate><text>CPYETN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPTN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, reads and writes unprivileged and non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyptrn\",\n    asm: [\n        \"<asmtemplate><text>CPYETRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMTRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPTRN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, reads and writes unprivileged, reads non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpyptwn\",\n    asm: [\n        \"<asmtemplate><text>CPYETWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMTWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPTWN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, reads and writes unprivileged, writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpypwn\",\n    asm: [\n        \"<asmtemplate><text>CPYEWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPWN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpypwt\",\n    asm: [\n        \"<asmtemplate><text>CPYEWT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMWT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPWT  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, writes unprivileged\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpypwtn\",\n    asm: [\n        \"<asmtemplate><text>CPYEWTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMWTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPWTN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, writes unprivileged, reads and writes non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpypwtrn\",\n    asm: [\n        \"<asmtemplate><text>CPYEWTRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMWTRN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPWTRN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, writes unprivileged, reads non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cpypwtwn\",\n    asm: [\n        \"<asmtemplate><text>CPYEWTWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYMWTWN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n        \"<asmtemplate><text>CPYPWTWN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, [</text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!</text></asmtemplate>\",\n    ],\n    desc: \"Memory Copy, writes unprivileged and non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"crc32\",\n    asm: [\n        \"<asmtemplate><text>CRC32B  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"32-bit general-purpose data source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CRC32H  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"32-bit general-purpose data source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CRC32W  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"32-bit general-purpose data source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CRC32X  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"64-bit general-purpose data source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"CRC32 checksum\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"opcode2[5:3]\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"C\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"crc32c\",\n    asm: [\n        \"<asmtemplate><text>CRC32CB  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"32-bit general-purpose data source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CRC32CH  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"32-bit general-purpose data source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CRC32CW  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"32-bit general-purpose data source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CRC32CX  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"64-bit general-purpose data source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"CRC32C checksum\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"opcode2[5:3]\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"C\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"csdb\",\n    asm: [\n        \"<asmtemplate><text>CSDB</text></asmtemplate>\",\n    ],\n    desc: \"Consumption of Speculative Data Barrier\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"csel\",\n    asm: [\n        \"<asmtemplate><text>CSEL  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CSEL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Conditional Select\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2[1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"cset_csinc\",\n    asm: [\n        \"<asmtemplate><text>CSET  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"csinc.xml#CSINC_32_condsel\\\">CSINC</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, WZR, WZR, invert(</text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>)</text></asmtemplate>\",\n        \"<asmtemplate><text>CSET  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"csinc.xml#CSINC_64_condsel\\\">CSINC</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, XZR, XZR, invert(</text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>)</text></asmtemplate>\",\n    ],\n    desc: \"Conditional Set\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\" settings=\\\"3\\\" constraint=\\\"!= 111x\\\" psbits=\\\"xxxx\\\">\\n          <c colspan=\\\"4\\\">!= 111x</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2[1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"csetm_csinv\",\n    asm: [\n        \"<asmtemplate><text>CSETM  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"csinv.xml#CSINV_32_condsel\\\">CSINV</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, WZR, WZR, invert(</text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>)</text></asmtemplate>\",\n        \"<asmtemplate><text>CSETM  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"csinv.xml#CSINV_64_condsel\\\">CSINV</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, XZR, XZR, invert(</text><a link=\\\"sa_cond_1\\\" hover=\\\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\\\">&lt;cond&gt;</a><text>)</text></asmtemplate>\",\n    ],\n    desc: \"Conditional Set Mask\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\" settings=\\\"3\\\" constraint=\\\"!= 111x\\\" psbits=\\\"xxxx\\\">\\n          <c colspan=\\\"4\\\">!= 111x</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2[1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"csinc\",\n    asm: [\n        \"<asmtemplate><text>CSINC  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CSINC  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Conditional Select Increment\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2[1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"csinv\",\n    asm: [\n        \"<asmtemplate><text>CSINV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CSINV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Conditional Select Invert\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2[1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"csneg\",\n    asm: [\n        \"<asmtemplate><text>CSNEG  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>CSNEG  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>, </text><a link=\\\"sa_cond\\\" hover=\\\"Standard condition (field &quot;cond&quot;)\\\">&lt;cond&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Conditional Select Negation\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"cond\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2[1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o2\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"dc_sys\",\n    asm: [\n        \"<asmtemplate><text>DC  </text><a link=\\\"sa_dc_op\\\" hover=\\\"DC instruction name, as listed for DC system instruction group (field &quot;op1:CRm:op2&quot;) [CGDSW (FEAT_MTE2),CGDVAC (FEAT_MTE),CGDVADP (FEAT_MTE),CGDVAP (FEAT_MTE),CGSW (FEAT_MTE2),CGVAC (FEAT_MTE),CGVADP (FEAT_MTE),CGVAP (FEAT_MTE),CIGDSW (FEAT_MTE2),CIGDVAC (FEAT_MTE),CIGSW (FEAT_MTE2),CIGVAC (FEAT_MTE),CISW,CIVAC,CSW,CVAC,CVADP (FEAT_DPB2),CVAP (FEAT_DPB),CVAU,GVA (FEAT_MTE),GZVA (FEAT_MTE),IGDSW (FEAT_MTE2),IGDVAC (FEAT_MTE2),IGSW (FEAT_MTE2),IGVAC (FEAT_MTE2),ISW,IVAC,ZVA]\\\">&lt;dc_op&gt;</a><text>, </text><a link=\\\"sa_xt_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sys.xml#SYS_CR_systeminstrs\\\">SYS</a><text> #</text><a link=\\\"sa_op1\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\\\">&lt;op1&gt;</a><text>, C7, </text><a link=\\\"sa_cm\\\" hover=\\\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\\\">&lt;Cm&gt;</a><text>, #</text><a link=\\\"sa_op2\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\\\">&lt;op2&gt;</a><text>, </text><a link=\\\"sa_xt_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Data Cache operation\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"dcps1\",\n    asm: [\n        \"<asmtemplate><text>DCPS1  </text><text>{</text><text>#</text><a link=\\\"sa_imm\\\" hover=\\\"Optional 16-bit unsigned immediate [0-65535], default 0 (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Debug Change PE State to EL1.\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"1\\\" width=\\\"2\\\" name=\\\"LL\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"dcps2\",\n    asm: [\n        \"<asmtemplate><text>DCPS2  </text><text>{</text><text>#</text><a link=\\\"sa_imm\\\" hover=\\\"Optional 16-bit unsigned immediate [0-65535], default 0 (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Debug Change PE State to EL2.\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"1\\\" width=\\\"2\\\" name=\\\"LL\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"dcps3\",\n    asm: [\n        \"<asmtemplate><text>DCPS3  </text><text>{</text><text>#</text><a link=\\\"sa_imm\\\" hover=\\\"Optional 16-bit unsigned immediate [0-65535], default 0 (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Debug Change PE State to EL3\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"1\\\" width=\\\"2\\\" name=\\\"LL\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"dgh\",\n    asm: [\n        \"<asmtemplate><text>DGH</text></asmtemplate>\",\n    ],\n    desc: \"Data Gathering Hint\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"dmb\",\n    asm: [\n        \"<asmtemplate><text>DMB  </text><a link=\\\"sa_option\\\" hover=\\\"Specifies the limitation on the barrier operation\\\">&lt;option&gt;</a><text>|#</text><a link=\\\"sa_imm\\\" hover=\\\"4-bit unsigned immediate [0-15] (field &quot;CRm&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Data Memory Barrier\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" name=\\\"op2[2]\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"6\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"drps\",\n    asm: [\n        \"<asmtemplate><text>DRPS</text></asmtemplate>\",\n    ],\n    desc: \"\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" width=\\\"4\\\" name=\\\"opc\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"op2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"op3\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"op4\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"dsb\",\n    asm: [\n        \"<asmtemplate><text>DSB  </text><a link=\\\"sa_option\\\" hover=\\\"Specifies the limitation on the barrier operation\\\">&lt;option&gt;</a><text>|#</text><a link=\\\"sa_imm\\\" hover=\\\"4-bit unsigned immediate [0-15] (field &quot;CRm&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>DSB  </text><a link=\\\"sa_option_1\\\" hover=\\\"Specifies the limitation on the barrier operation\\\">&lt;option&gt;</a><text>nXS|#</text><a link=\\\"sa_imm_1\\\" hover=\\\"5-bit unsigned immediate (field &quot;imm2&quot;) [16,20,24,28]\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Data Synchronization Barrier\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" name=\\\"op2[2]\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"6\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"dvp_sys\",\n    asm: [\n        \"<asmtemplate><text>DVP  RCTX, </text><a link=\\\"sa_xt_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sys.xml#SYS_CR_systeminstrs\\\">SYS</a><text> #3, C7, C3, #5, </text><a link=\\\"sa_xt_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Data Value Prediction Restriction by Context\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"eon\",\n    asm: [\n        \"<asmtemplate><text>EON  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>EON  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Bitwise Exclusive OR NOT (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"eor_log_imm\",\n    asm: [\n        \"<asmtemplate><text>EOR  </text><a link=\\\"sa_wd_wsp\\\" hover=\\\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\\\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Bitmask immediate (field &quot;imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>EOR  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Bitmask immediate (field &quot;N:imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Bitwise Exclusive OR (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"eor_log_shift\",\n    asm: [\n        \"<asmtemplate><text>EOR  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>EOR  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Bitwise Exclusive OR (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"eret\",\n    asm: [\n        \"<asmtemplate><text>ERET</text></asmtemplate>\",\n    ],\n    desc: \"Exception Return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"opc[3]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"opc[2:0]\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"op2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op3[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"M\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"op4\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ereta\",\n    asm: [\n        \"<asmtemplate><text>ERETAA</text></asmtemplate>\",\n        \"<asmtemplate><text>ERETAB</text></asmtemplate>\",\n    ],\n    desc: \"Exception Return, with pointer authentication\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"opc[3]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"opc[2:0]\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"op2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op3[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"M\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"op4\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"esb\",\n    asm: [\n        \"<asmtemplate><text>ESB</text></asmtemplate>\",\n    ],\n    desc: \"Error Synchronization Barrier\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"extr\",\n    asm: [\n        \"<asmtemplate><text>EXTR  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, #</text><a link=\\\"sa_lsb\\\" hover=\\\"Least significant bit position from which to extract [0-31] (field &quot;imms&quot;)\\\">&lt;lsb&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>EXTR  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>, #</text><a link=\\\"sa_lsb_1\\\" hover=\\\"Least significant bit position from which to extract [0-63] (field &quot;imms&quot;)\\\">&lt;lsb&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Extract register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op21\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"gmi\",\n    asm: [\n        \"<asmtemplate><text>GMI  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Xd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Xm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Tag Mask Insert\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Xm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode&lt;5&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode&lt;4&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"opcode&lt;3&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"opcode&lt;2&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"opcode&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"opcode&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"hint\",\n    asm: [\n        \"<asmtemplate><text>HINT  #</text><a link=\\\"sa_imm\\\" hover=\\\"7-bit unsigned immediate [0-127 (field &quot;CRm:op2&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Hint instruction\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"hlt\",\n    asm: [\n        \"<asmtemplate><text>HLT  #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Halt instruction\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"1\\\" width=\\\"2\\\" name=\\\"LL\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"hvc\",\n    asm: [\n        \"<asmtemplate><text>HVC  #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Hypervisor Call\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"1\\\" width=\\\"2\\\" name=\\\"LL\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ic_sys\",\n    asm: [\n        \"<asmtemplate><text>IC  </text><a link=\\\"sa_ic_op\\\" hover=\\\"IC instruction name, as listed for IC system instruction pages (field &quot;op1:CRm:op2&quot;) [IALLU,IALLUIS,IVAU]\\\">&lt;ic_op&gt;</a><text>{</text><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit optional general-purpose source register, default '11111' (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sys.xml#SYS_CR_systeminstrs\\\">SYS</a><text> #</text><a link=\\\"sa_op1\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\\\">&lt;op1&gt;</a><text>, C7, </text><a link=\\\"sa_cm\\\" hover=\\\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\\\">&lt;Cm&gt;</a><text>, #</text><a link=\\\"sa_op2\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\\\">&lt;op2&gt;</a><text>{</text><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit optional general-purpose source register, default '11111' (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Instruction Cache operation\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"irg\",\n    asm: [\n        \"<asmtemplate><text>IRG  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Xd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Xm&quot;)\\\">&lt;Xm&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Insert Random Tag\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Xm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode&lt;5&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode&lt;4&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"opcode&lt;3&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"opcode&lt;2&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"opcode&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"opcode&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"isb\",\n    asm: [\n        \"<asmtemplate><text>ISB  </text><text>{</text><a link=\\\"sa_option\\\" hover=\\\"Specifies an optional limitation on the barrier operation\\\">&lt;option&gt;</a><text>|#</text><a link=\\\"sa_imm\\\" hover=\\\"Optional 4-bit unsigned immediate [0-15], default 15 (field &quot;CRm&quot;)\\\">&lt;imm&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Instruction Synchronization Barrier\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" name=\\\"op2[2]\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"6\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ld64b\",\n    asm: [\n        \"<asmtemplate><text>LD64B  </text><a link=\\\"sa_xt\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Single-copy Atomic 64-byte Load\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldadd\",\n    asm: [\n        \"<asmtemplate><text>LDADD  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDA  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDAL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADD  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDA  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDAL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic add on word or doubleword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldaddb\",\n    asm: [\n        \"<asmtemplate><text>LDADDAB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDALB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic add on byte in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldaddh\",\n    asm: [\n        \"<asmtemplate><text>LDADDAH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDALH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDADDLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic add on halfword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldapr\",\n    asm: [\n        \"<asmtemplate><text>LDAPR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDAPR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire RCpc Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldaprb\",\n    asm: [\n        \"<asmtemplate><text>LDAPRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire RCpc Register Byte\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldaprh\",\n    asm: [\n        \"<asmtemplate><text>LDAPRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire RCpc Register Halfword\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldapur_gen\",\n    asm: [\n        \"<asmtemplate><text>LDAPUR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDAPUR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire RCpc Register (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldapurb\",\n    asm: [\n        \"<asmtemplate><text>LDAPURB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire RCpc Register Byte (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldapurh\",\n    asm: [\n        \"<asmtemplate><text>LDAPURH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire RCpc Register Halfword (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldapursb\",\n    asm: [\n        \"<asmtemplate><text>LDAPURSB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDAPURSB  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire RCpc Register Signed Byte (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldapursh\",\n    asm: [\n        \"<asmtemplate><text>LDAPURSH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDAPURSH  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire RCpc Register Signed Halfword (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldapursw\",\n    asm: [\n        \"<asmtemplate><text>LDAPURSW  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire RCpc Register Signed Word (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldar\",\n    asm: [\n        \"<asmtemplate><text>LDAR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDAR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldarb\",\n    asm: [\n        \"<asmtemplate><text>LDARB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire Register Byte\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldarh\",\n    asm: [\n        \"<asmtemplate><text>LDARH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire Register Halfword\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldaxp\",\n    asm: [\n        \"<asmtemplate><text>LDAXP  </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDAXP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire Exclusive Pair of Registers\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldaxr\",\n    asm: [\n        \"<asmtemplate><text>LDAXR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDAXR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire Exclusive Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldaxrb\",\n    asm: [\n        \"<asmtemplate><text>LDAXRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire Exclusive Register Byte\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldaxrh\",\n    asm: [\n        \"<asmtemplate><text>LDAXRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load-Acquire Exclusive Register Halfword\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldclr\",\n    asm: [\n        \"<asmtemplate><text>LDCLR  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRA  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRAL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLR  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRA  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRAL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit clear on word or doubleword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldclrb\",\n    asm: [\n        \"<asmtemplate><text>LDCLRAB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRALB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit clear on byte in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldclrh\",\n    asm: [\n        \"<asmtemplate><text>LDCLRAH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRALH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDCLRLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit clear on halfword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldeor\",\n    asm: [\n        \"<asmtemplate><text>LDEOR  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORA  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORAL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEOR  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORA  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORAL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic exclusive OR on word or doubleword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldeorb\",\n    asm: [\n        \"<asmtemplate><text>LDEORAB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORALB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic exclusive OR on byte in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldeorh\",\n    asm: [\n        \"<asmtemplate><text>LDEORAH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORALH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDEORLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic exclusive OR on halfword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldg\",\n    asm: [\n        \"<asmtemplate><text>LDG  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Allocation Tag\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"opc&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"op2&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldgm\",\n    asm: [\n        \"<asmtemplate><text>LDGM  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Tag Multiple\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"opc&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" name=\\\"imm9&lt;8&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"19\\\" name=\\\"imm9&lt;7&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" name=\\\"imm9&lt;6&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"17\\\" name=\\\"imm9&lt;5&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"16\\\" name=\\\"imm9&lt;4&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"imm9&lt;3&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"imm9&lt;2&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"imm9&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"imm9&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"op2&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldlar\",\n    asm: [\n        \"<asmtemplate><text>LDLAR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDLAR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load LOAcquire Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldlarb\",\n    asm: [\n        \"<asmtemplate><text>LDLARB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load LOAcquire Register Byte\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldlarh\",\n    asm: [\n        \"<asmtemplate><text>LDLARH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load LOAcquire Register Halfword\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldnp_gen\",\n    asm: [\n        \"<asmtemplate><text>LDNP  </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Optional signed immediate byte offset, multiple of 4 [-256-252], default 0 (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDNP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Optional signed immediate byte offset, multiple of 8 [-512-504], default 0 (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Pair of Registers, with non-temporal hint\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>x</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"7\\\" name=\\\"imm7\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"7\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldp_gen\",\n    asm: [\n        \"<asmtemplate><text>LDP  </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_imm_3\\\" hover=\\\"Signed immediate byte offset, multiple of 8 [-512-504] (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDP  </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm_3\\\" hover=\\\"Signed immediate byte offset, multiple of 8 [-512-504] (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDP  </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Optional signed immediate byte offset, multiple of 4 [-256-252], default 0 (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_imm_2\\\" hover=\\\"Optional signed immediate byte offset, multiple of 8 [-512-504], default 0 (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Pair of Registers\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>x</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"7\\\" name=\\\"imm7\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"7\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldpsw\",\n    asm: [\n        \"<asmtemplate><text>LDPSW  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDPSW  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDPSW  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Optional signed immediate byte offset, multiple of 4 [-256-252], default 0 (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Pair of Registers Signed Word\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"7\\\" name=\\\"imm7\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"7\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldr_imm_gen\",\n    asm: [\n        \"<asmtemplate><text>LDR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset, multiple of 4 [0-16380], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm_1\\\" hover=\\\"Optional positive immediate byte offset, multiple of 8 [0-32760], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldr_lit_gen\",\n    asm: [\n        \"<asmtemplate><text>LDR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, </text><a link=\\\"sa_label\\\" hover=\\\"Label from which the data is to be loaded (field imm19)\\\">&lt;label&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, </text><a link=\\\"sa_label\\\" hover=\\\"Label from which the data is to be loaded (field imm19)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Load Register (literal)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"19\\\" name=\\\"imm19\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"19\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldr_reg_gen\",\n    asm: [\n        \"<asmtemplate><text>LDR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#2]\\\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount_1\\\" hover=\\\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#3]\\\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"S\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldra\",\n    asm: [\n        \"<asmtemplate><text>LDRAA  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset, multiple of 8 [-4096-4088], default 0 (field &quot;S:imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRAA  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset, multiple of 8 [-4096-4088], default 0 (field &quot;S:imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRAB  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset, multiple of 8 [-4096-4088], default 0 (field &quot;S:imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRAB  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset, multiple of 8 [-4096-4088], default 0 (field &quot;S:imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]!</text></asmtemplate>\",\n    ],\n    desc: \"Load Register, with pointer authentication\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"M\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"S\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"W\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldrb_imm\",\n    asm: [\n        \"<asmtemplate><text>LDRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset [0-4095], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Byte (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldrb_reg\",\n    asm: [\n        \"<asmtemplate><text>LDRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>), </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend specifier (field &quot;option&quot;) [SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, LSL </text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Byte (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"S\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldrh_imm\",\n    asm: [\n        \"<asmtemplate><text>LDRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset, multiple of 2 [0-8190], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Halfword (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldrh_reg\",\n    asm: [\n        \"<asmtemplate><text>LDRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#1]\\\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Halfword (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"S\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldrsb_imm\",\n    asm: [\n        \"<asmtemplate><text>LDRSB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDRSB  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDRSB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRSB  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRSB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset [0-4095], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRSB  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset [0-4095], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Byte (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldrsb_reg\",\n    asm: [\n        \"<asmtemplate><text>LDRSB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>), </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend specifier (field &quot;option&quot;) [SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRSB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, LSL </text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRSB  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>), </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend specifier (field &quot;option&quot;) [SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRSB  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, LSL </text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Byte (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"S\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldrsh_imm\",\n    asm: [\n        \"<asmtemplate><text>LDRSH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDRSH  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDRSH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRSH  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRSH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset, multiple of 2 [0-8190], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRSH  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset, multiple of 2 [0-8190], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Halfword (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldrsh_reg\",\n    asm: [\n        \"<asmtemplate><text>LDRSH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#1]\\\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRSH  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#1]\\\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Halfword (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"S\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldrsw_imm\",\n    asm: [\n        \"<asmtemplate><text>LDRSW  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LDRSW  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>LDRSW  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset, multiple of 4 [0-16380], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Word (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldrsw_lit\",\n    asm: [\n        \"<asmtemplate><text>LDRSW  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, </text><a link=\\\"sa_label\\\" hover=\\\"Label from which the data is to be loaded (field imm19)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Word (literal)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"19\\\" name=\\\"imm19\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"19\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldrsw_reg\",\n    asm: [\n        \"<asmtemplate><text>LDRSW  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#2]\\\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Word (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"S\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldset\",\n    asm: [\n        \"<asmtemplate><text>LDSET  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETA  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETAL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSET  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETA  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETAL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit set on word or doubleword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldsetb\",\n    asm: [\n        \"<asmtemplate><text>LDSETAB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETALB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit set on byte in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldseth\",\n    asm: [\n        \"<asmtemplate><text>LDSETAH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETALH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSETLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit set on halfword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldsmax\",\n    asm: [\n        \"<asmtemplate><text>LDSMAX  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXA  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXAL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAX  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXA  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXAL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed maximum on word or doubleword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldsmaxb\",\n    asm: [\n        \"<asmtemplate><text>LDSMAXAB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXALB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed maximum on byte in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldsmaxh\",\n    asm: [\n        \"<asmtemplate><text>LDSMAXAH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXALH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMAXLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed maximum on halfword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldsmin\",\n    asm: [\n        \"<asmtemplate><text>LDSMIN  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINA  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINAL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMIN  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINA  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINAL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed minimum on word or doubleword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldsminb\",\n    asm: [\n        \"<asmtemplate><text>LDSMINAB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINALB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed minimum on byte in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldsminh\",\n    asm: [\n        \"<asmtemplate><text>LDSMINAH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINALH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDSMINLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed minimum on halfword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldtr\",\n    asm: [\n        \"<asmtemplate><text>LDTR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDTR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register (unprivileged)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldtrb\",\n    asm: [\n        \"<asmtemplate><text>LDTRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Byte (unprivileged)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldtrh\",\n    asm: [\n        \"<asmtemplate><text>LDTRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Halfword (unprivileged)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldtrsb\",\n    asm: [\n        \"<asmtemplate><text>LDTRSB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDTRSB  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Byte (unprivileged)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldtrsh\",\n    asm: [\n        \"<asmtemplate><text>LDTRSH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDTRSH  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Halfword (unprivileged)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldtrsw\",\n    asm: [\n        \"<asmtemplate><text>LDTRSW  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Word (unprivileged)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldumax\",\n    asm: [\n        \"<asmtemplate><text>LDUMAX  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXA  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXAL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAX  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXA  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXAL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned maximum on word or doubleword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldumaxb\",\n    asm: [\n        \"<asmtemplate><text>LDUMAXAB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXALB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned maximum on byte in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldumaxh\",\n    asm: [\n        \"<asmtemplate><text>LDUMAXAH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXALH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMAXLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned maximum on halfword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldumin\",\n    asm: [\n        \"<asmtemplate><text>LDUMIN  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINA  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINAL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMIN  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINA  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINAL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned minimum on word or doubleword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"lduminb\",\n    asm: [\n        \"<asmtemplate><text>LDUMINAB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINALB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned minimum on byte in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"lduminh\",\n    asm: [\n        \"<asmtemplate><text>LDUMINAH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINALH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUMINLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned minimum on halfword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldur_gen\",\n    asm: [\n        \"<asmtemplate><text>LDUR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDUR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldurb\",\n    asm: [\n        \"<asmtemplate><text>LDURB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Byte (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldurh\",\n    asm: [\n        \"<asmtemplate><text>LDURH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Halfword (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldursb\",\n    asm: [\n        \"<asmtemplate><text>LDURSB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDURSB  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Byte (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldursh\",\n    asm: [\n        \"<asmtemplate><text>LDURSH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDURSH  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Halfword (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldursw\",\n    asm: [\n        \"<asmtemplate><text>LDURSW  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Register Signed Word (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldxp\",\n    asm: [\n        \"<asmtemplate><text>LDXP  </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDXP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Exclusive Pair of Registers\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldxr\",\n    asm: [\n        \"<asmtemplate><text>LDXR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>LDXR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Exclusive Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldxrb\",\n    asm: [\n        \"<asmtemplate><text>LDXRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Exclusive Register Byte\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ldxrh\",\n    asm: [\n        \"<asmtemplate><text>LDXRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Load Exclusive Register Halfword\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"lsl_ubfm\",\n    asm: [\n        \"<asmtemplate><text>LSL  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_shift_1\\\" hover=\\\"Shift amount [0-31]\\\">&lt;shift&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ubfm.xml#UBFM_32M_bitfield\\\">UBFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #(-</text><a link=\\\"sa_shift_1\\\" hover=\\\"Shift amount [0-31]\\\">&lt;shift&gt;</a><text> MOD 32), #(31-</text><a link=\\\"sa_shift_1\\\" hover=\\\"Shift amount [0-31]\\\">&lt;shift&gt;</a><text>)</text></asmtemplate>\",\n        \"<asmtemplate><text>LSL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_shift_3\\\" hover=\\\"Shift amount [0-63]\\\">&lt;shift&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ubfm.xml#UBFM_64M_bitfield\\\">UBFM</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #(-</text><a link=\\\"sa_shift_3\\\" hover=\\\"Shift amount [0-63]\\\">&lt;shift&gt;</a><text> MOD 64), #(63-</text><a link=\\\"sa_shift_3\\\" hover=\\\"Shift amount [0-63]\\\">&lt;shift&gt;</a><text>)</text></asmtemplate>\",\n    ],\n    desc: \"Logical Shift Left (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\" settings=\\\"5\\\" constraint=\\\"!= x11111\\\" psbits=\\\"xxxxxx\\\">\\n          <c colspan=\\\"6\\\">!= x11111</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"lsl_lslv\",\n    asm: [\n        \"<asmtemplate><text>LSL  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"lslv.xml#LSLV_32_dp_2src\\\">LSLV</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LSL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"lslv.xml#LSLV_64_dp_2src\\\">LSLV</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Logical Shift Left (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode2[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"lslv\",\n    asm: [\n        \"<asmtemplate><text>LSLV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LSLV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Logical Shift Left Variable\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode2[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"lsr_ubfm\",\n    asm: [\n        \"<asmtemplate><text>LSR  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_shift\\\" hover=\\\"Shift amount [0-31] (field &quot;immr&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ubfm.xml#UBFM_32M_bitfield\\\">UBFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_shift\\\" hover=\\\"Shift amount [0-31] (field &quot;immr&quot;)\\\">&lt;shift&gt;</a><text>, #31</text></asmtemplate>\",\n        \"<asmtemplate><text>LSR  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_shift_2\\\" hover=\\\"Shift amount [0-63] (field &quot;immr&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ubfm.xml#UBFM_64M_bitfield\\\">UBFM</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_shift_2\\\" hover=\\\"Shift amount [0-63] (field &quot;immr&quot;)\\\">&lt;shift&gt;</a><text>, #63</text></asmtemplate>\",\n    ],\n    desc: \"Logical Shift Right (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxxx\\\">\\n          <c>x</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"lsr_lsrv\",\n    asm: [\n        \"<asmtemplate><text>LSR  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"lsrv.xml#LSRV_32_dp_2src\\\">LSRV</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LSR  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"lsrv.xml#LSRV_64_dp_2src\\\">LSRV</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Logical Shift Right (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode2[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"lsrv\",\n    asm: [\n        \"<asmtemplate><text>LSRV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>LSRV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Logical Shift Right Variable\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode2[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"madd\",\n    asm: [\n        \"<asmtemplate><text>MADD  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, </text><a link=\\\"sa_wa\\\" hover=\\\"Third 32-bit general-purpose source register holding addend (field &quot;Ra&quot;)\\\">&lt;Wa&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>MADD  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>, </text><a link=\\\"sa_xa\\\" hover=\\\"Third 64-bit general-purpose source register holding addend (field &quot;Ra&quot;)\\\">&lt;Xa&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Multiply-Add\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"op31\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"mneg_msub\",\n    asm: [\n        \"<asmtemplate><text>MNEG  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"msub.xml#MSUB_32A_dp_3src\\\">MSUB</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, WZR</text></asmtemplate>\",\n        \"<asmtemplate><text>MNEG  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"msub.xml#MSUB_64A_dp_3src\\\">MSUB</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>, XZR</text></asmtemplate>\",\n    ],\n    desc: \"Multiply-Negate\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"op31\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"mov_orr_log_imm\",\n    asm: [\n        \"<asmtemplate><text>MOV  </text><a link=\\\"sa_wd_wsp\\\" hover=\\\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\\\">&lt;Wd|WSP&gt;</a><text>, #</text><a link=\\\"sa_imm_2\\\" hover=\\\"Bitmask immediate (field &quot;imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"orr_log_imm.xml#ORR_32_log_imm\\\">ORR</a><text> </text><a link=\\\"sa_wd_wsp\\\" hover=\\\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\\\">&lt;Wd|WSP&gt;</a><text>, WZR, #</text><a link=\\\"sa_imm_2\\\" hover=\\\"Bitmask immediate (field &quot;imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>MOV  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, #</text><a link=\\\"sa_imm_3\\\" hover=\\\"Bitmask immediate (field &quot;N:imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"orr_log_imm.xml#ORR_64_log_imm\\\">ORR</a><text> </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, XZR, #</text><a link=\\\"sa_imm_3\\\" hover=\\\"Bitmask immediate (field &quot;N:imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Move (bitmask immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"mov_movn\",\n    asm: [\n        \"<asmtemplate><text>MOV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"32-bit immediate, the bitwise inverse of which can be (field &quot;imm16:hw&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"movn.xml#MOVN_32_movewide\\\">MOVN</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, #</text><a>&lt;imm16&gt;</a><text>, LSL #</text><a link=\\\"sa_shift\\\" hover=\\\"Amount by which to shift the immediate left (field &quot;hw&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>MOV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, #</text><a link=\\\"sa_imm_2\\\" hover=\\\"64-bit immediate, the bitwise inverse of which can be (field &quot;imm16:hw&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"movn.xml#MOVN_64_movewide\\\">MOVN</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, #</text><a>&lt;imm16&gt;</a><text>, LSL #</text><a link=\\\"sa_shift_1\\\" hover=\\\"Amount by which to shift the immediate left (field &quot;hw&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Move (inverted wide immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"hw\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"mov_orr_log_shift\",\n    asm: [\n        \"<asmtemplate><text>MOV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"orr_log_shift.xml#ORR_32_log_shift\\\">ORR</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>MOV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"orr_log_shift.xml#ORR_64_log_shift\\\">ORR</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Move (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\" settings=\\\"6\\\" psbits=\\\"xxxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"mov_add_addsub_imm\",\n    asm: [\n        \"<asmtemplate><text>MOV  </text><a link=\\\"sa_wd_wsp\\\" hover=\\\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\\\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"add_addsub_imm.xml#ADD_32_addsub_imm\\\">ADD</a><text> </text><a link=\\\"sa_wd_wsp\\\" hover=\\\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\\\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, #0</text></asmtemplate>\",\n        \"<asmtemplate><text>MOV  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"add_addsub_imm.xml#ADD_64_addsub_imm\\\">ADD</a><text> </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #0</text></asmtemplate>\",\n    ],\n    desc: \"\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"sh\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"12\\\" name=\\\"imm12\\\" usename=\\\"1\\\" settings=\\\"12\\\" psbits=\\\"xxxxxxxxxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"mov_movz\",\n    asm: [\n        \"<asmtemplate><text>MOV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"32-bit immediate which can be (field &quot;imm16:hw&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"movz.xml#MOVZ_32_movewide\\\">MOVZ</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, #</text><a>&lt;imm16&gt;</a><text>, LSL #</text><a link=\\\"sa_shift\\\" hover=\\\"Amount by which to shift the immediate left (field &quot;hw&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>MOV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, #</text><a link=\\\"sa_imm_2\\\" hover=\\\"64-bit immediate which can be (field &quot;imm16:hw&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"movz.xml#MOVZ_64_movewide\\\">MOVZ</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, #</text><a>&lt;imm16&gt;</a><text>, LSL #</text><a link=\\\"sa_shift_1\\\" hover=\\\"Amount by which to shift the immediate left (field &quot;hw&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Move (wide immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"hw\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"movk\",\n    asm: [\n        \"<asmtemplate><text>MOVK  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\\\"sa_shift\\\" hover=\\\"Amount by which to shift the immediate left (field &quot;hw&quot;)\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>MOVK  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\\\"sa_shift_1\\\" hover=\\\"Amount by which to shift the immediate left (field &quot;hw&quot;)\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Move wide with keep\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"hw\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"movn\",\n    asm: [\n        \"<asmtemplate><text>MOVN  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\\\"sa_shift\\\" hover=\\\"Amount by which to shift the immediate left (field &quot;hw&quot;)\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>MOVN  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\\\"sa_shift_1\\\" hover=\\\"Amount by which to shift the immediate left (field &quot;hw&quot;)\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Move wide with NOT\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"hw\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"movz\",\n    asm: [\n        \"<asmtemplate><text>MOVZ  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\\\"sa_shift\\\" hover=\\\"Amount by which to shift the immediate left (field &quot;hw&quot;)\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>MOVZ  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\\\"sa_shift_1\\\" hover=\\\"Amount by which to shift the immediate left (field &quot;hw&quot;)\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Move wide with zero\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"hw\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"mrs\",\n    asm: [\n        \"<asmtemplate><text>MRS  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, (</text><a link=\\\"sa_systemreg\\\" hover=\\\"System register name (field &quot;o0:op1:CRn:CRm:op2&quot;)\\\">&lt;systemreg&gt;</a><text>|S</text><a link=\\\"sa_op0\\\" hover=\\\"Unsigned immediate (field &quot;o0&quot;) [2,3]\\\">&lt;op0&gt;</a><text>_</text><a link=\\\"sa_op1\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\\\">&lt;op1&gt;</a><text>_</text><a link=\\\"sa_cn\\\" hover=\\\"Name 'Cn', with 'n' [0-15] (field &quot;CRn&quot;)\\\">&lt;Cn&gt;</a><text>_</text><a link=\\\"sa_cm\\\" hover=\\\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\\\">&lt;Cm&gt;</a><text>_</text><a link=\\\"sa_op2\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\\\">&lt;op2&gt;</a><text>)</text></asmtemplate>\",\n    ],\n    desc: \"Move System Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" name=\\\"op0[1]\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"19\\\" name=\\\"o0\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"msr_imm\",\n    asm: [\n        \"<asmtemplate><text>MSR  </text><a link=\\\"sa_pstatefield\\\" hover=\\\"PSTATE field name (field &quot;op1:op2:CRm&quot;) [ALLINT (FEAT_NMI),DAIFClr,DAIFSet,DIT (FEAT_DIT),PAN (FEAT_PAN),SEE(pstate),SPSel,SSBS (FEAT_SSBS),TCO (FEAT_MTE),UAO (FEAT_UAO)]\\\">&lt;pstatefield&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"4-bit unsigned immediate [0-15] (field &quot;CRm&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Move immediate value to Special Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"msr_reg\",\n    asm: [\n        \"<asmtemplate><text>MSR  (</text><a link=\\\"sa_systemreg\\\" hover=\\\"System register name (field &quot;o0:op1:CRn:CRm:op2&quot;)\\\">&lt;systemreg&gt;</a><text>|S</text><a link=\\\"sa_op0\\\" hover=\\\"Unsigned immediate (field &quot;o0&quot;) [2,3]\\\">&lt;op0&gt;</a><text>_</text><a link=\\\"sa_op1\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\\\">&lt;op1&gt;</a><text>_</text><a link=\\\"sa_cn\\\" hover=\\\"Name 'Cn', with 'n' [0-15] (field &quot;CRn&quot;)\\\">&lt;Cn&gt;</a><text>_</text><a link=\\\"sa_cm\\\" hover=\\\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\\\">&lt;Cm&gt;</a><text>_</text><a link=\\\"sa_op2\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\\\">&lt;op2&gt;</a><text>), </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Move general-purpose register to System Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" name=\\\"op0[1]\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"19\\\" name=\\\"o0\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"msub\",\n    asm: [\n        \"<asmtemplate><text>MSUB  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, </text><a link=\\\"sa_wa\\\" hover=\\\"Third 32-bit general-purpose source register holding minuend (field &quot;Ra&quot;)\\\">&lt;Wa&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>MSUB  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>, </text><a link=\\\"sa_xa\\\" hover=\\\"Third 64-bit general-purpose source register holding minuend (field &quot;Ra&quot;)\\\">&lt;Xa&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Multiply-Subtract\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"op31\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"mul_madd\",\n    asm: [\n        \"<asmtemplate><text>MUL  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"madd.xml#MADD_32A_dp_3src\\\">MADD</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, WZR</text></asmtemplate>\",\n        \"<asmtemplate><text>MUL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"madd.xml#MADD_64A_dp_3src\\\">MADD</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>, XZR</text></asmtemplate>\",\n    ],\n    desc: \"\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"op31\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"mvn_orn_log_shift\",\n    asm: [\n        \"<asmtemplate><text>MVN  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"orn_log_shift.xml#ORN_32_log_shift\\\">ORN</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>MVN  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"orn_log_shift.xml#ORN_64_log_shift\\\">ORN</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Bitwise NOT\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"neg_sub_addsub_shift\",\n    asm: [\n        \"<asmtemplate><text>NEG  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sub_addsub_shift.xml#SUB_32_addsub_shift\\\">SUB</a><text>  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>NEG  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sub_addsub_shift.xml#SUB_64_addsub_shift\\\">SUB</a><text>  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Negate (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"negs_subs_addsub_shift\",\n    asm: [\n        \"<asmtemplate><text>NEGS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"subs_addsub_shift.xml#SUBS_32_addsub_shift\\\">SUBS</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>NEGS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"subs_addsub_shift.xml#SUBS_64_addsub_shift\\\">SUBS</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text> </text><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Negate, setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\" settings=\\\"5\\\" constraint=\\\"!= 11111\\\" psbits=\\\"xxxxx\\\">\\n          <c colspan=\\\"5\\\">!= 11111</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ngc_sbc\",\n    asm: [\n        \"<asmtemplate><text>NGC  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbc.xml#SBC_32_addsub_carry\\\">SBC</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>NGC  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbc.xml#SBC_64_addsub_carry\\\">SBC</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Negate with Carry\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ngcs_sbcs\",\n    asm: [\n        \"<asmtemplate><text>NGCS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbcs.xml#SBCS_32_addsub_carry\\\">SBCS</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\\\"sa_wm_1\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>NGCS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbcs.xml#SBCS_64_addsub_carry\\\">SBCS</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\\\"sa_xm_1\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Negate with Carry, setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"nop\",\n    asm: [\n        \"<asmtemplate><text>NOP</text></asmtemplate>\",\n    ],\n    desc: \"No Operation\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"orn_log_shift\",\n    asm: [\n        \"<asmtemplate><text>ORN  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>ORN  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Bitwise OR NOT (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"orr_log_imm\",\n    asm: [\n        \"<asmtemplate><text>ORR  </text><a link=\\\"sa_wd_wsp\\\" hover=\\\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\\\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Bitmask immediate (field &quot;imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>ORR  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Bitmask immediate (field &quot;N:imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Bitwise OR (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"orr_log_shift\",\n    asm: [\n        \"<asmtemplate><text>ORR  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>ORR  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Bitwise OR (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"pacda\",\n    asm: [\n        \"<asmtemplate><text>PACDA  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>PACDZA  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Pointer Authentication Code for Data address, using key A\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode[5]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode[4]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"Z\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"opcode[2:0]\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"pacdb\",\n    asm: [\n        \"<asmtemplate><text>PACDB  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>PACDZB  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Pointer Authentication Code for Data address, using key B\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode[5]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode[4]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"Z\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"opcode[2:0]\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"pacga\",\n    asm: [\n        \"<asmtemplate><text>PACGA  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm_sp\\\" hover=\\\"Second 64-bit general-purpose source register or SP (field &quot;Rm&quot;)\\\">&lt;Xm|SP&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Pointer Authentication Code, using Generic key\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"opcode2\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"pacia\",\n    asm: [\n        \"<asmtemplate><text>PACIA  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>PACIZA  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>PACIA1716</text></asmtemplate>\",\n        \"<asmtemplate><text>PACIASP</text></asmtemplate>\",\n        \"<asmtemplate><text>PACIAZ</text></asmtemplate>\",\n    ],\n    desc: \"Pointer Authentication Code for Instruction address, using key A\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode[5]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode[4]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"Z\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"opcode[2:0]\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"pacib\",\n    asm: [\n        \"<asmtemplate><text>PACIB  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>PACIZB  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>PACIB1716</text></asmtemplate>\",\n        \"<asmtemplate><text>PACIBSP</text></asmtemplate>\",\n        \"<asmtemplate><text>PACIBZ</text></asmtemplate>\",\n    ],\n    desc: \"Pointer Authentication Code for Instruction address, using key B\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode[5]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode[4]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"Z\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"opcode[2:0]\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"prfm_imm\",\n    asm: [\n        \"<asmtemplate><text>PRFM  (</text><a link=\\\"sa_prfop\\\" hover=\\\"Prefetch operation, defined as {syntax{&lt;type&gt;&lt;target&gt;&lt;policy&gt;}} (field &quot;Rt&lt;4:3&gt;&quot;)\\\">&lt;prfop&gt;</a><text>|#</text><a link=\\\"sa_imm5\\\" hover=\\\"Prefetch operation encoding as an immediate [0-31] (field &quot;Rt&quot;)\\\">&lt;imm5&gt;</a><text>), [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset, multiple of 8 [0-32760], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Prefetch Memory (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"12\\\" name=\\\"imm12\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"12\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"prfm_lit\",\n    asm: [\n        \"<asmtemplate><text>PRFM  (</text><a link=\\\"sa_prfop\\\" hover=\\\"Prefetch operation, defined as {syntax{&lt;type&gt;&lt;target&gt;&lt;policy&gt;}} (field &quot;Rt&lt;4:3&gt;&quot;)\\\">&lt;prfop&gt;</a><text>|#</text><a link=\\\"sa_imm5\\\" hover=\\\"Prefetch operation encoding as an immediate [0-31] (field &quot;Rt&quot;)\\\">&lt;imm5&gt;</a><text>), </text><a link=\\\"sa_label\\\" hover=\\\"Label from which the data is to be loaded (field imm19)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Prefetch Memory (literal)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"19\\\" name=\\\"imm19\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"19\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"prfm_reg\",\n    asm: [\n        \"<asmtemplate><text>PRFM  (</text><a link=\\\"sa_prfop\\\" hover=\\\"Prefetch operation, defined as {syntax{&lt;type&gt;&lt;target&gt;&lt;policy&gt;}} (field &quot;Rt&lt;4:3&gt;&quot;)\\\">&lt;prfop&gt;</a><text>|#</text><a link=\\\"sa_imm5\\\" hover=\\\"Prefetch operation encoding as an immediate [0-31] (field &quot;Rt&quot;)\\\">&lt;imm5&gt;</a><text>), [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#3]\\\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Prefetch Memory (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"S\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"prfum\",\n    asm: [\n        \"<asmtemplate><text>PRFUM (</text><a link=\\\"sa_prfop\\\" hover=\\\"Prefetch operation, defined as {syntax{&lt;type&gt;&lt;target&gt;&lt;policy&gt;}} (field &quot;Rt&lt;4:3&gt;&quot;)\\\">&lt;prfop&gt;</a><text>|#</text><a link=\\\"sa_imm5\\\" hover=\\\"Prefetch operation encoding as an immediate [0-31] (field &quot;Rt&quot;)\\\">&lt;imm5&gt;</a><text>), [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Prefetch Memory (unscaled offset)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"psb\",\n    asm: [\n        \"<asmtemplate><text>PSB CSYNC</text></asmtemplate>\",\n    ],\n    desc: \"Profiling Synchronization Barrier\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"pssbb_dsb\",\n    asm: [\n        \"<asmtemplate><text>PSSBB</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"dsb.xml#DSB_BO_barriers\\\">DSB</a><text> #4</text></asmtemplate>\",\n    ],\n    desc: \"Physical Speculative Store Bypass Barrier\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" name=\\\"op2[2]\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"6\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"rbit_int\",\n    asm: [\n        \"<asmtemplate><text>RBIT  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>RBIT  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Reverse Bits\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"opcode[1:0]\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ret\",\n    asm: [\n        \"<asmtemplate><text>RET  </text><text>{</text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Return from subroutine\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"Z\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc[2:1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"op2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op3[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"M\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"reta\",\n    asm: [\n        \"<asmtemplate><text>RETAA</text></asmtemplate>\",\n        \"<asmtemplate><text>RETAB</text></asmtemplate>\",\n    ],\n    desc: \"Return from subroutine, with pointer authentication\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"7\\\" settings=\\\"7\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"Z\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc[2:1]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"op2\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op3[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"M\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"rev\",\n    asm: [\n        \"<asmtemplate><text>REV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>REV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Reverse Bytes\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"rev16_int\",\n    asm: [\n        \"<asmtemplate><text>REV16  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>REV16  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Reverse bytes in 16-bit halfwords\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"rev32_int\",\n    asm: [\n        \"<asmtemplate><text>REV32  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Reverse bytes in 32-bit words\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"rev64_rev\",\n    asm: [\n        \"<asmtemplate><text>REV64  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"rev.xml#REV_64_dp_1src\\\">REV</a><text>  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Reverse Bytes\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"rmif\",\n    asm: [\n        \"<asmtemplate><text>RMIF  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_shift\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;shift&gt;</a><text>, #</text><a link=\\\"sa_mask\\\" hover=\\\"Flag bit mask, an immediate [0-15], which selects the bits that are inserted into the NZCV condition flags (field &quot;mask&quot;)\\\">&lt;mask&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Rotate, Mask Insert Flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"3\\\" width=\\\"4\\\" name=\\\"mask\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ror_extr\",\n    asm: [\n        \"<asmtemplate><text>ROR  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Ws&gt;</a><text>, #</text><a link=\\\"sa_shift\\\" hover=\\\"Amount by which to rotate [0-31] (field &quot;imms&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"extr.xml#EXTR_32_extract\\\">EXTR</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Ws&gt;</a><text>, #</text><a link=\\\"sa_shift\\\" hover=\\\"Amount by which to rotate [0-31] (field &quot;imms&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>ROR  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xs&gt;</a><text>, #</text><a link=\\\"sa_shift_1\\\" hover=\\\"Amount by which to rotate [0-63] (field &quot;imms&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"extr.xml#EXTR_64_extract\\\">EXTR</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\\\">&lt;Xs&gt;</a><text>, #</text><a link=\\\"sa_shift_1\\\" hover=\\\"Amount by which to rotate [0-63] (field &quot;imms&quot;)\\\">&lt;shift&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Rotate right (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op21\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ror_rorv\",\n    asm: [\n        \"<asmtemplate><text>ROR  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"rorv.xml#RORV_32_dp_2src\\\">RORV</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>ROR  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"rorv.xml#RORV_64_dp_2src\\\">RORV</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Rotate Right (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode2[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"rorv\",\n    asm: [\n        \"<asmtemplate><text>RORV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>RORV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Rotate Right Variable\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"opcode2[5:2]\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sb\",\n    asm: [\n        \"<asmtemplate><text>SB</text></asmtemplate>\",\n    ],\n    desc: \"Speculation Barrier\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>(0)</c>\\n          <c>(0)</c>\\n          <c>(0)</c>\\n          <c>(0)</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" name=\\\"op2[2]\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"6\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sbc\",\n    asm: [\n        \"<asmtemplate><text>SBC  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SBC  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Subtract with Carry\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sbcs\",\n    asm: [\n        \"<asmtemplate><text>SBCS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SBCS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Subtract with Carry, setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sbfiz_sbfm\",\n    asm: [\n        \"<asmtemplate><text>SBFIZ  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_lsb\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-31]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbfm.xml#SBFM_32M_bitfield\\\">SBFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #(-</text><a link=\\\"sa_lsb\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-31]\\\">&lt;lsb&gt;</a><text> MOD 32), #(</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n        \"<asmtemplate><text>SBFIZ  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_lsb_2\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-63]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbfm.xml#SBFM_64M_bitfield\\\">SBFM</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #(-</text><a link=\\\"sa_lsb_2\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-63]\\\">&lt;lsb&gt;</a><text> MOD 64), #(</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n    ],\n    desc: \"Signed Bitfield Insert in Zero\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sbfm\",\n    asm: [\n        \"<asmtemplate><text>SBFM  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_immr\\\" hover=\\\"Right rotate amount [0-31] (field &quot;immr&quot;)\\\">&lt;immr&gt;</a><text>, #</text><a link=\\\"sa_imms\\\" hover=\\\"Leftmost bit number to be moved from the source [0-31] (field &quot;imms&quot;)\\\">&lt;imms&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SBFM  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_immr_1\\\" hover=\\\"Right rotate amount [0-63] (field &quot;immr&quot;)\\\">&lt;immr&gt;</a><text>, #</text><a link=\\\"sa_imms_1\\\" hover=\\\"Leftmost bit number to be moved from the source [0-63] (field &quot;imms&quot;)\\\">&lt;imms&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Signed Bitfield Move\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sbfx_sbfm\",\n    asm: [\n        \"<asmtemplate><text>SBFX  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_lsb_1\\\" hover=\\\"Bit number of lsb of the source bitfield [0-31]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbfm.xml#SBFM_32M_bitfield\\\">SBFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_lsb_1\\\" hover=\\\"Bit number of lsb of the source bitfield [0-31]\\\">&lt;lsb&gt;</a><text>, #(</text><a link=\\\"sa_lsb_1\\\" hover=\\\"Bit number of lsb of the source bitfield [0-31]\\\">&lt;lsb&gt;</a><text>+</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n        \"<asmtemplate><text>SBFX  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_lsb_3\\\" hover=\\\"Bit number of lsb of the source bitfield [0-63]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbfm.xml#SBFM_64M_bitfield\\\">SBFM</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_lsb_3\\\" hover=\\\"Bit number of lsb of the source bitfield [0-63]\\\">&lt;lsb&gt;</a><text>, #(</text><a link=\\\"sa_lsb_3\\\" hover=\\\"Bit number of lsb of the source bitfield [0-63]\\\">&lt;lsb&gt;</a><text>+</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n    ],\n    desc: \"Signed Bitfield Extract\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sdiv\",\n    asm: [\n        \"<asmtemplate><text>SDIV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SDIV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Signed Divide\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"5\\\" name=\\\"opcode2[5:1]\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o1\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"setf\",\n    asm: [\n        \"<asmtemplate><text>SETF8  </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETF16  </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Evaluation of 8 or 16 bit flag values\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"6\\\" name=\\\"opcode2\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" width=\\\"4\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"3\\\" width=\\\"4\\\" name=\\\"mask\\\" settings=\\\"4\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"setgp\",\n    asm: [\n        \"<asmtemplate><text>SETGE  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETGM  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETGP  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Memory Set with tag setting\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xxxx\\\">\\n          <c>x</c>\\n          <c>x</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"setgpn\",\n    asm: [\n        \"<asmtemplate><text>SETGEN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETGMN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETGPN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Memory Set with tag setting, non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xxxx\\\">\\n          <c>x</c>\\n          <c>x</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"setgpt\",\n    asm: [\n        \"<asmtemplate><text>SETGET  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETGMT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETGPT  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Memory Set with tag setting, unprivileged\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xxxx\\\">\\n          <c>x</c>\\n          <c>x</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"setgptn\",\n    asm: [\n        \"<asmtemplate><text>SETGETN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is set to zero at the end of the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs_1\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETGMTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETGPTN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Memory Set with tag setting, unprivileged and non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xxxx\\\">\\n          <c>x</c>\\n          <c>x</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"setp\",\n    asm: [\n        \"<asmtemplate><text>SETE  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set and is set to zero at the end of instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETM  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETP  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Memory Set\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xxxx\\\">\\n          <c>x</c>\\n          <c>x</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"setpn\",\n    asm: [\n        \"<asmtemplate><text>SETEN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set and is set to zero at the end of instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETMN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETPN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Memory Set, non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xxxx\\\">\\n          <c>x</c>\\n          <c>x</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"setpt\",\n    asm: [\n        \"<asmtemplate><text>SETET  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set and is set to zero at the end of instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETMT  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETPT  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Memory Set, unprivileged\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xxxx\\\">\\n          <c>x</c>\\n          <c>x</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"setptn\",\n    asm: [\n        \"<asmtemplate><text>SETETN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_2\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set and is set to zero at the end of instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETMTN  [</text><a link=\\\"sa_xd_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn_1\\\" hover=\\\"64-bit general-purpose register that holds an encoding of number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>SETPTN  [</text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>]!, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose register that holds the number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>!, </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Memory Set, unprivileged and non-temporal\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"op1\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xxxx\\\">\\n          <c>x</c>\\n          <c>x</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sev\",\n    asm: [\n        \"<asmtemplate><text>SEV</text></asmtemplate>\",\n    ],\n    desc: \"Send Event\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sevl\",\n    asm: [\n        \"<asmtemplate><text>SEVL</text></asmtemplate>\",\n    ],\n    desc: \"Send Event Local\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"smaddl\",\n    asm: [\n        \"<asmtemplate><text>SMADDL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, </text><a link=\\\"sa_xa\\\" hover=\\\"Third 64-bit general-purpose source register holding addend (field &quot;Ra&quot;)\\\">&lt;Xa&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Signed Multiply-Add Long\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"U\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op31[1:0]\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"smc\",\n    asm: [\n        \"<asmtemplate><text>SMC  #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Secure Monitor Call\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"1\\\" width=\\\"2\\\" name=\\\"LL\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"smnegl_smsubl\",\n    asm: [\n        \"<asmtemplate><text>SMNEGL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"smsubl.xml#SMSUBL_64WA_dp_3src\\\">SMSUBL</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, XZR</text></asmtemplate>\",\n    ],\n    desc: \"Signed Multiply-Negate Long\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"U\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op31[1:0]\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"smsubl\",\n    asm: [\n        \"<asmtemplate><text>SMSUBL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, </text><a link=\\\"sa_xa\\\" hover=\\\"Third 64-bit general-purpose source register holding minuend (field &quot;Ra&quot;)\\\">&lt;Xa&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Signed Multiply-Subtract Long\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"U\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op31[1:0]\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"smulh\",\n    asm: [\n        \"<asmtemplate><text>SMULH  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Signed Multiply High\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"U\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op31[1:0]\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"smull_smaddl\",\n    asm: [\n        \"<asmtemplate><text>SMULL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"smaddl.xml#SMADDL_64WA_dp_3src\\\">SMADDL</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, XZR</text></asmtemplate>\",\n    ],\n    desc: \"Signed Multiply Long\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"U\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op31[1:0]\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ssbb_dsb\",\n    asm: [\n        \"<asmtemplate><text>SSBB</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"dsb.xml#DSB_BO_barriers\\\">DSB</a><text> #0</text></asmtemplate>\",\n    ],\n    desc: \"Speculative Store Bypass Barrier\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" name=\\\"op2[2]\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"6\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"st2g\",\n    asm: [\n        \"<asmtemplate><text>ST2G  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>ST2G  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>ST2G  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Allocation Tags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"opc&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"op2&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"st64b\",\n    asm: [\n        \"<asmtemplate><text>ST64B  </text><a link=\\\"sa_xt\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Single-copy Atomic 64-byte Store without Return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"st64bv\",\n    asm: [\n        \"<asmtemplate><text>ST64BV  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register into which the status result of this instruction is written (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Single-copy Atomic 64-byte Store with Return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"st64bv0\",\n    asm: [\n        \"<asmtemplate><text>ST64BV0  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register into which the status result of this instruction is written (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Single-copy Atomic 64-byte EL0 Store with Return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stadd_ldadd\",\n    asm: [\n        \"<asmtemplate><text>STADD  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldadd.xml#LDADD_32_memop\\\">LDADD</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STADDL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldadd.xml#LDADDL_32_memop\\\">LDADDL</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STADD  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldadd.xml#LDADD_64_memop\\\">LDADD</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STADDL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldadd.xml#LDADDL_64_memop\\\">LDADDL</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic add on word or doubleword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"staddb_ldaddb\",\n    asm: [\n        \"<asmtemplate><text>STADDB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldaddb.xml#LDADDB_32_memop\\\">LDADDB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STADDLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldaddb.xml#LDADDLB_32_memop\\\">LDADDLB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic add on byte in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"staddh_ldaddh\",\n    asm: [\n        \"<asmtemplate><text>STADDH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldaddh.xml#LDADDH_32_memop\\\">LDADDH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STADDLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldaddh.xml#LDADDLH_32_memop\\\">LDADDLH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic add on halfword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stclr_ldclr\",\n    asm: [\n        \"<asmtemplate><text>STCLR  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldclr.xml#LDCLR_32_memop\\\">LDCLR</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STCLRL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldclr.xml#LDCLRL_32_memop\\\">LDCLRL</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STCLR  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldclr.xml#LDCLR_64_memop\\\">LDCLR</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STCLRL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldclr.xml#LDCLRL_64_memop\\\">LDCLRL</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit clear on word or doubleword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stclrb_ldclrb\",\n    asm: [\n        \"<asmtemplate><text>STCLRB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldclrb.xml#LDCLRB_32_memop\\\">LDCLRB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STCLRLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldclrb.xml#LDCLRLB_32_memop\\\">LDCLRLB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit clear on byte in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stclrh_ldclrh\",\n    asm: [\n        \"<asmtemplate><text>STCLRH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldclrh.xml#LDCLRH_32_memop\\\">LDCLRH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STCLRLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldclrh.xml#LDCLRLH_32_memop\\\">LDCLRLH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit clear on halfword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"steor_ldeor\",\n    asm: [\n        \"<asmtemplate><text>STEOR  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldeor.xml#LDEOR_32_memop\\\">LDEOR</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STEORL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldeor.xml#LDEORL_32_memop\\\">LDEORL</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STEOR  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldeor.xml#LDEOR_64_memop\\\">LDEOR</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STEORL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldeor.xml#LDEORL_64_memop\\\">LDEORL</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic exclusive OR on word or doubleword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"steorb_ldeorb\",\n    asm: [\n        \"<asmtemplate><text>STEORB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldeorb.xml#LDEORB_32_memop\\\">LDEORB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STEORLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldeorb.xml#LDEORLB_32_memop\\\">LDEORLB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic exclusive OR on byte in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"steorh_ldeorh\",\n    asm: [\n        \"<asmtemplate><text>STEORH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldeorh.xml#LDEORH_32_memop\\\">LDEORH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STEORLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldeorh.xml#LDEORLH_32_memop\\\">LDEORLH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic exclusive OR on halfword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stg\",\n    asm: [\n        \"<asmtemplate><text>STG  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>STG  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>STG  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Allocation Tag\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"opc&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"op2&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stgm\",\n    asm: [\n        \"<asmtemplate><text>STGM  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Tag Multiple\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"opc&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" name=\\\"imm9&lt;8&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"19\\\" name=\\\"imm9&lt;7&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" name=\\\"imm9&lt;6&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"17\\\" name=\\\"imm9&lt;5&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"16\\\" name=\\\"imm9&lt;4&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"imm9&lt;3&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"imm9&lt;2&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"imm9&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"imm9&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"op2&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stgp\",\n    asm: [\n        \"<asmtemplate><text>STGP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Xt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Signed immediate offset, multiple of 16 [-1024-1008] (field &quot;simm7&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>STGP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Xt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Signed immediate offset, multiple of 16 [-1024-1008] (field &quot;simm7&quot;)\\\">&lt;imm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>STGP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Xt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-1024-1008], default 0 (field &quot;simm7&quot;)\\\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Allocation Tag and Pair of registers\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"opc&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"opc&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"7\\\" name=\\\"simm7\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"7\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Xt2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stllr\",\n    asm: [\n        \"<asmtemplate><text>STLLR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STLLR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store LORelease Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stllrb\",\n    asm: [\n        \"<asmtemplate><text>STLLRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store LORelease Register Byte\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stllrh\",\n    asm: [\n        \"<asmtemplate><text>STLLRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store LORelease Register Halfword\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stlr\",\n    asm: [\n        \"<asmtemplate><text>STLR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STLR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store-Release Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stlrb\",\n    asm: [\n        \"<asmtemplate><text>STLRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store-Release Register Byte\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stlrh\",\n    asm: [\n        \"<asmtemplate><text>STLRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store-Release Register Halfword\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stlur_gen\",\n    asm: [\n        \"<asmtemplate><text>STLUR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STLUR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store-Release Register (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stlurb\",\n    asm: [\n        \"<asmtemplate><text>STLURB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store-Release Register Byte (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stlurh\",\n    asm: [\n        \"<asmtemplate><text>STLURH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store-Release Register Halfword (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stlxp\",\n    asm: [\n        \"<asmtemplate><text>STLXP  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STLXP  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store-Release Exclusive Pair of registers\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stlxr\",\n    asm: [\n        \"<asmtemplate><text>STLXR  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STLXR  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store-Release Exclusive Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stlxrb\",\n    asm: [\n        \"<asmtemplate><text>STLXRB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store-Release Exclusive Register Byte\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stlxrh\",\n    asm: [\n        \"<asmtemplate><text>STLXRH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store-Release Exclusive Register Halfword\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stnp_gen\",\n    asm: [\n        \"<asmtemplate><text>STNP  </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Optional signed immediate byte offset, multiple of 4 [-256-252], default 0 (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STNP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Optional signed immediate byte offset, multiple of 8 [-512-504], default 0 (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Pair of Registers, with non-temporal hint\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>x</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"7\\\" name=\\\"imm7\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"7\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stp_gen\",\n    asm: [\n        \"<asmtemplate><text>STP  </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>STP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_imm_3\\\" hover=\\\"Signed immediate byte offset, multiple of 8 [-512-504] (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>STP  </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>STP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm_3\\\" hover=\\\"Signed immediate byte offset, multiple of 8 [-512-504] (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>STP  </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Optional signed immediate byte offset, multiple of 4 [-256-252], default 0 (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STP  </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_imm_2\\\" hover=\\\"Optional signed immediate byte offset, multiple of 8 [-512-504], default 0 (field &quot;imm7&quot;)\\\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Pair of Registers\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>x</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"7\\\" name=\\\"imm7\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"7\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"str_imm_gen\",\n    asm: [\n        \"<asmtemplate><text>STR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>STR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>STR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>STR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>STR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset, multiple of 4 [0-16380], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm_1\\\" hover=\\\"Optional positive immediate byte offset, multiple of 8 [0-32760], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"str_reg_gen\",\n    asm: [\n        \"<asmtemplate><text>STR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#2]\\\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount_1\\\" hover=\\\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#3]\\\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"S\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"strb_imm\",\n    asm: [\n        \"<asmtemplate><text>STRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>STRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>STRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset [0-4095], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register Byte (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"strb_reg\",\n    asm: [\n        \"<asmtemplate><text>STRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>), </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend specifier (field &quot;option&quot;) [SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, LSL </text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register Byte (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"S\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"strh_imm\",\n    asm: [\n        \"<asmtemplate><text>STRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>STRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>STRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_pimm\\\" hover=\\\"Optional positive immediate byte offset, multiple of 2 [0-8190], default 0 (field &quot;imm12&quot;)\\\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register Halfword (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"strh_reg\",\n    asm: [\n        \"<asmtemplate><text>STRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\\\"sa_wm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>|</text><a link=\\\"sa_xm\\\" hover=\\\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\\\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\\\"sa_amount\\\" hover=\\\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#1]\\\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register Halfword (register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"S\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stset_ldset\",\n    asm: [\n        \"<asmtemplate><text>STSET  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldset.xml#LDSET_32_memop\\\">LDSET</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSETL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldset.xml#LDSETL_32_memop\\\">LDSETL</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSET  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldset.xml#LDSET_64_memop\\\">LDSET</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSETL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldset.xml#LDSETL_64_memop\\\">LDSETL</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit set on word or doubleword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stsetb_ldsetb\",\n    asm: [\n        \"<asmtemplate><text>STSETB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsetb.xml#LDSETB_32_memop\\\">LDSETB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSETLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsetb.xml#LDSETLB_32_memop\\\">LDSETLB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit set on byte in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stseth_ldseth\",\n    asm: [\n        \"<asmtemplate><text>STSETH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldseth.xml#LDSETH_32_memop\\\">LDSETH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSETLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldseth.xml#LDSETLH_32_memop\\\">LDSETLH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic bit set on halfword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stsmax_ldsmax\",\n    asm: [\n        \"<asmtemplate><text>STSMAX  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmax.xml#LDSMAX_32_memop\\\">LDSMAX</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSMAXL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmax.xml#LDSMAXL_32_memop\\\">LDSMAXL</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSMAX  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmax.xml#LDSMAX_64_memop\\\">LDSMAX</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSMAXL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmax.xml#LDSMAXL_64_memop\\\">LDSMAXL</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed maximum on word or doubleword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stsmaxb_ldsmaxb\",\n    asm: [\n        \"<asmtemplate><text>STSMAXB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmaxb.xml#LDSMAXB_32_memop\\\">LDSMAXB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSMAXLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmaxb.xml#LDSMAXLB_32_memop\\\">LDSMAXLB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed maximum on byte in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stsmaxh_ldsmaxh\",\n    asm: [\n        \"<asmtemplate><text>STSMAXH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmaxh.xml#LDSMAXH_32_memop\\\">LDSMAXH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSMAXLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmaxh.xml#LDSMAXLH_32_memop\\\">LDSMAXLH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed maximum on halfword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stsmin_ldsmin\",\n    asm: [\n        \"<asmtemplate><text>STSMIN  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmin.xml#LDSMIN_32_memop\\\">LDSMIN</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSMINL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmin.xml#LDSMINL_32_memop\\\">LDSMINL</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSMIN  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmin.xml#LDSMIN_64_memop\\\">LDSMIN</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSMINL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsmin.xml#LDSMINL_64_memop\\\">LDSMINL</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed minimum on word or doubleword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stsminb_ldsminb\",\n    asm: [\n        \"<asmtemplate><text>STSMINB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsminb.xml#LDSMINB_32_memop\\\">LDSMINB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSMINLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsminb.xml#LDSMINLB_32_memop\\\">LDSMINLB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed minimum on byte in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stsminh_ldsminh\",\n    asm: [\n        \"<asmtemplate><text>STSMINH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsminh.xml#LDSMINH_32_memop\\\">LDSMINH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STSMINLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldsminh.xml#LDSMINLH_32_memop\\\">LDSMINLH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic signed minimum on halfword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sttr\",\n    asm: [\n        \"<asmtemplate><text>STTR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STTR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register (unprivileged)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sttrb\",\n    asm: [\n        \"<asmtemplate><text>STTRB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register Byte (unprivileged)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sttrh\",\n    asm: [\n        \"<asmtemplate><text>STTRH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register Halfword (unprivileged)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stumax_ldumax\",\n    asm: [\n        \"<asmtemplate><text>STUMAX  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumax.xml#LDUMAX_32_memop\\\">LDUMAX</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STUMAXL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumax.xml#LDUMAXL_32_memop\\\">LDUMAXL</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STUMAX  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumax.xml#LDUMAX_64_memop\\\">LDUMAX</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STUMAXL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumax.xml#LDUMAXL_64_memop\\\">LDUMAXL</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned maximum on word or doubleword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stumaxb_ldumaxb\",\n    asm: [\n        \"<asmtemplate><text>STUMAXB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumaxb.xml#LDUMAXB_32_memop\\\">LDUMAXB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STUMAXLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumaxb.xml#LDUMAXLB_32_memop\\\">LDUMAXLB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned maximum on byte in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stumaxh_ldumaxh\",\n    asm: [\n        \"<asmtemplate><text>STUMAXH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumaxh.xml#LDUMAXH_32_memop\\\">LDUMAXH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STUMAXLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumaxh.xml#LDUMAXLH_32_memop\\\">LDUMAXLH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned maximum on halfword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stumin_ldumin\",\n    asm: [\n        \"<asmtemplate><text>STUMIN  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumin.xml#LDUMIN_32_memop\\\">LDUMIN</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STUMINL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumin.xml#LDUMINL_32_memop\\\">LDUMINL</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STUMIN  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumin.xml#LDUMIN_64_memop\\\">LDUMIN</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STUMINL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ldumin.xml#LDUMINL_64_memop\\\">LDUMINL</a><text> </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned minimum on word or doubleword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stuminb_lduminb\",\n    asm: [\n        \"<asmtemplate><text>STUMINB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"lduminb.xml#LDUMINB_32_memop\\\">LDUMINB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STUMINLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"lduminb.xml#LDUMINLB_32_memop\\\">LDUMINLB</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned minimum on byte in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stuminh_lduminh\",\n    asm: [\n        \"<asmtemplate><text>STUMINH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"lduminh.xml#LDUMINH_32_memop\\\">LDUMINH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STUMINLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"lduminh.xml#LDUMINLH_32_memop\\\">LDUMINLH</a><text> </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Atomic unsigned minimum on halfword in memory, without return\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stur_gen\",\n    asm: [\n        \"<asmtemplate><text>STUR  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STUR  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sturb\",\n    asm: [\n        \"<asmtemplate><text>STURB  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register Byte (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sturh\",\n    asm: [\n        \"<asmtemplate><text>STURH  </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Register Halfword (unscaled)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stxp\",\n    asm: [\n        \"<asmtemplate><text>STXP  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt1\\\" hover=\\\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt1&gt;</a><text>, </text><a link=\\\"sa_wt2\\\" hover=\\\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Wt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STXP  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_xt1\\\" hover=\\\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt1&gt;</a><text>, </text><a link=\\\"sa_xt2\\\" hover=\\\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\\\">&lt;Xt2&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Exclusive Pair of registers\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"sz\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stxr\",\n    asm: [\n        \"<asmtemplate><text>STXR  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>STXR  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Exclusive Register\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stxrb\",\n    asm: [\n        \"<asmtemplate><text>STXRB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Exclusive Register Byte\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stxrh\",\n    asm: [\n        \"<asmtemplate><text>STXRH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Exclusive Register Halfword\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"o1\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Rt2\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stz2g\",\n    asm: [\n        \"<asmtemplate><text>STZ2G  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>STZ2G  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>STZ2G  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Allocation Tags, Zeroing\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"opc&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"op2&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stzg\",\n    asm: [\n        \"<asmtemplate><text>STZG  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>STZG  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>]!</text></asmtemplate>\",\n        \"<asmtemplate><text>STZG  </text><a link=\\\"sa_xt_sp\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\\\"sa_simm\\\" hover=\\\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\\\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Allocation Tag, Zeroing\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"opc&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"9\\\" name=\\\"imm9\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"9\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"op2&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"stzgm\",\n    asm: [\n        \"<asmtemplate><text>STZGM  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Store Tag and Zero Multiple\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"opc&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"opc&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" name=\\\"imm9&lt;8&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"19\\\" name=\\\"imm9&lt;7&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" name=\\\"imm9&lt;6&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"17\\\" name=\\\"imm9&lt;5&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"16\\\" name=\\\"imm9&lt;4&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"imm9&lt;3&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"imm9&lt;2&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"imm9&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"imm9&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"op2&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"op2&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sub_addsub_ext\",\n    asm: [\n        \"<asmtemplate><text>SUB  </text><a link=\\\"sa_wd_wsp\\\" hover=\\\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\\\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>SUB  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_r\\\" hover=\\\"Width specifier (field &quot;option&quot;) [W,X]\\\">&lt;R&gt;</a><a link=\\\"sa_m\\\" hover=\\\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\\\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend_1\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Subtract (extended register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opt\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"imm3\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sub_addsub_imm\",\n    asm: [\n        \"<asmtemplate><text>SUB  </text><a link=\\\"sa_wd_wsp\\\" hover=\\\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\\\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>SUB  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Subtract (immediate)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"sh\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"12\\\" name=\\\"imm12\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"12\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sub_addsub_shift\",\n    asm: [\n        \"<asmtemplate><text>SUB  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>SUB  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Subtract (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"subg\",\n    asm: [\n        \"<asmtemplate><text>SUBG  </text><a link=\\\"sa_xd_sp\\\" hover=\\\"64-bit destination general-purpose register or SP (field &quot;Xd&quot;)\\\">&lt;Xd|SP&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_uimm6\\\" hover=\\\"Unsigned immediate, multiple of 16 [0-1008] (field &quot;uimm6&quot;)\\\">&lt;uimm6&gt;</a><text>, #</text><a link=\\\"sa_uimm4\\\" hover=\\\"Unsigned immediate [0-15] (field &quot;uimm4&quot;)\\\">&lt;uimm4&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Subtract with Tag\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"o2\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"uimm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"2\\\" name=\\\"op3\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>(0)</c>\\n          <c>(0)</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" width=\\\"4\\\" name=\\\"uimm4\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"subp\",\n    asm: [\n        \"<asmtemplate><text>SUBP  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Xd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_xm_sp\\\" hover=\\\"Second 64-bit general-purpose source register or SP (field &quot;Xm&quot;)\\\">&lt;Xm|SP&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Subtract Pointer\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Xm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode&lt;5&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode&lt;4&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"opcode&lt;3&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"opcode&lt;2&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"opcode&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"opcode&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"subps\",\n    asm: [\n        \"<asmtemplate><text>SUBPS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Xd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_xm_sp\\\" hover=\\\"Second 64-bit general-purpose source register or SP (field &quot;Xm&quot;)\\\">&lt;Xm|SP&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Subtract Pointer, setting Flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Xm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode&lt;5&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode&lt;4&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" name=\\\"opcode&lt;3&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" name=\\\"opcode&lt;2&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" name=\\\"opcode&lt;1&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"opcode&lt;0&gt;\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Xn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Xd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"subs_addsub_ext\",\n    asm: [\n        \"<asmtemplate><text>SUBS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>SUBS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, </text><a link=\\\"sa_r\\\" hover=\\\"Width specifier (field &quot;option&quot;) [W,X]\\\">&lt;R&gt;</a><a link=\\\"sa_m\\\" hover=\\\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\\\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\\\"sa_extend_1\\\" hover=\\\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\\\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\\\"sa_amount\\\" hover=\\\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\\\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Subtract (extended register), setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"opt\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"3\\\" name=\\\"option\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"12\\\" width=\\\"3\\\" name=\\\"imm3\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"subs_addsub_imm\",\n    asm: [\n        \"<asmtemplate><text>SUBS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn_wsp\\\" hover=\\\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\\\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>SUBS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\\\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\\\">&lt;shift&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Subtract (immediate), setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"sh\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"12\\\" name=\\\"imm12\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"12\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"subs_addsub_shift\",\n    asm: [\n        \"<asmtemplate><text>SUBS  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>SUBS  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Subtract (shifted register), setting flags\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"svc\",\n    asm: [\n        \"<asmtemplate><text>SVC  #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Supervisor Call\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"1\\\" width=\\\"2\\\" name=\\\"LL\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"swp\",\n    asm: [\n        \"<asmtemplate><text>SWP  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPA  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPAL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPL  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWP  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPA  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPAL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPL  </text><a link=\\\"sa_xs\\\" hover=\\\"64-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Xs&gt;</a><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Swap word or doubleword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>x</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"swpb\",\n    asm: [\n        \"<asmtemplate><text>SWPAB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPALB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPLB  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Swap byte in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"swph\",\n    asm: [\n        \"<asmtemplate><text>SWPAH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPALH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n        \"<asmtemplate><text>SWPLH  </text><a link=\\\"sa_ws\\\" hover=\\\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\\\">&lt;Ws&gt;</a><text>, </text><a link=\\\"sa_wt\\\" hover=\\\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\\\">&lt;Wt&gt;</a><text>, [</text><a link=\\\"sa_xn_sp\\\" hover=\\\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\\\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>\",\n    ],\n    desc: \"Swap halfword in memory\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"2\\\" name=\\\"size\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" width=\\\"3\\\" settings=\\\"3\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"26\\\" name=\\\"V\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"25\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"A\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"R\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rs\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o3\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"3\\\" name=\\\"opc\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"2\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sxtb_sbfm\",\n    asm: [\n        \"<asmtemplate><text>SXTB  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbfm.xml#SBFM_32M_bitfield\\\">SBFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #0, #7</text></asmtemplate>\",\n        \"<asmtemplate><text>SXTB  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbfm.xml#SBFM_64M_bitfield\\\">SBFM</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #0, #7</text></asmtemplate>\",\n    ],\n    desc: \"Signed Extend Byte\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\" settings=\\\"6\\\" psbits=\\\"xxxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\" settings=\\\"6\\\" psbits=\\\"xxxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sxth_sbfm\",\n    asm: [\n        \"<asmtemplate><text>SXTH  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbfm.xml#SBFM_32M_bitfield\\\">SBFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #0, #15</text></asmtemplate>\",\n        \"<asmtemplate><text>SXTH  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbfm.xml#SBFM_64M_bitfield\\\">SBFM</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #0, #15</text></asmtemplate>\",\n    ],\n    desc: \"Sign Extend Halfword\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\" settings=\\\"6\\\" psbits=\\\"xxxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\" settings=\\\"6\\\" psbits=\\\"xxxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sxtw_sbfm\",\n    asm: [\n        \"<asmtemplate><text>SXTW  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sbfm.xml#SBFM_64M_bitfield\\\">SBFM</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #0, #31</text></asmtemplate>\",\n    ],\n    desc: \"Sign Extend Word\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\" settings=\\\"6\\\" psbits=\\\"xxxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\" settings=\\\"6\\\" psbits=\\\"xxxxxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sys\",\n    asm: [\n        \"<asmtemplate><text>SYS  #</text><a link=\\\"sa_op1\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\\\">&lt;op1&gt;</a><text>, </text><a link=\\\"sa_cn\\\" hover=\\\"Name 'Cn', with 'n' [0-15] (field &quot;CRn&quot;)\\\">&lt;Cn&gt;</a><text>, </text><a link=\\\"sa_cm\\\" hover=\\\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\\\">&lt;Cm&gt;</a><text>, #</text><a link=\\\"sa_op2\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\\\">&lt;op2&gt;</a><text>{</text><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit optional general-purpose source register, default '11111' (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"System instruction\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"sysl\",\n    asm: [\n        \"<asmtemplate><text>SYSL  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>, #</text><a link=\\\"sa_op1\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\\\">&lt;op1&gt;</a><text>, </text><a link=\\\"sa_cn\\\" hover=\\\"Name 'Cn', with 'n' [0-15] (field &quot;CRn&quot;)\\\">&lt;Cn&gt;</a><text>, </text><a link=\\\"sa_cm\\\" hover=\\\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\\\">&lt;Cm&gt;</a><text>, #</text><a link=\\\"sa_op2\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\\\">&lt;op2&gt;</a></asmtemplate>\",\n    ],\n    desc: \"System instruction with result\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"tbnz\",\n    asm: [\n        \"<asmtemplate><text>TBNZ  </text><a link=\\\"sa_r\\\" hover=\\\"Width specifier (field &quot;b5&quot;) [W,X]\\\">&lt;R&gt;</a><a link=\\\"sa_t\\\" hover=\\\"General-purpose register number [0-30] to be tested or ZR (31) (field &quot;Rt&quot;)\\\">&lt;t&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Bit number to be tested [0-63] (field &quot;b5:b40&quot;)\\\">&lt;imm&gt;</a><text>, </text><a link=\\\"sa_label\\\" hover=\\\"Label to be conditionally branched to (field imm14)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Test bit and Branch if Nonzero\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"b5\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"5\\\" name=\\\"b40\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"14\\\" name=\\\"imm14\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"14\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"tbz\",\n    asm: [\n        \"<asmtemplate><text>TBZ  </text><a link=\\\"sa_r\\\" hover=\\\"Width specifier (field &quot;b5&quot;) [W,X]\\\">&lt;R&gt;</a><a link=\\\"sa_t\\\" hover=\\\"General-purpose register number [0-30] to be tested or ZR (31) (field &quot;Rt&quot;)\\\">&lt;t&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Bit number to be tested [0-63] (field &quot;b5:b40&quot;)\\\">&lt;imm&gt;</a><text>, </text><a link=\\\"sa_label\\\" hover=\\\"Label to be conditionally branched to (field imm14)\\\">&lt;label&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Test bit and Branch if Zero\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"b5\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"24\\\" name=\\\"op\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"5\\\" name=\\\"b40\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"14\\\" name=\\\"imm14\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"14\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"tlbi_sys\",\n    asm: [\n        \"<asmtemplate><text>TLBI  </text><a link=\\\"sa_tlbi_op\\\" hover=\\\"TLBI instruction name, as listed for TLBI system instruction group (field &quot;op1:CRm:op2&quot;) [ALLE1,ALLE1IS,ALLE1OS (FEAT_TLBIOS),ALLE2,ALLE2IS,ALLE2OS (FEAT_TLBIOS),ALLE3,ALLE3IS,ALLE3OS (FEAT_TLBIOS),ASIDE1,ASIDE1IS,ASIDE1OS (FEAT_TLBIOS),IPAS2E1,IPAS2E1IS,IPAS2E1OS (FEAT_TLBIOS),IPAS2LE1,IPAS2LE1IS,IPAS2LE1OS (FEAT_TLBIOS),RIPAS2E1 (FEAT_TLBIRANGE),RIPAS2E1IS (FEAT_TLBIRANGE),RIPAS2E1OS (FEAT_TLBIRANGE),RIPAS2LE1 (FEAT_TLBIRANGE),RIPAS2LE1IS (FEAT_TLBIRANGE),RIPAS2LE1OS (FEAT_TLBIRANGE),RVAAE1 (FEAT_TLBIRANGE),RVAAE1IS (FEAT_TLBIRANGE),RVAAE1OS (FEAT_TLBIRANGE),RVAALE1 (FEAT_TLBIRANGE),RVAALE1IS (FEAT_TLBIRANGE),RVAALE1OS (FEAT_TLBIRANGE),RVAE1 (FEAT_TLBIRANGE),RVAE1IS (FEAT_TLBIRANGE),RVAE1OS (FEAT_TLBIRANGE),RVAE2 (FEAT_TLBIRANGE),RVAE2IS (FEAT_TLBIRANGE),RVAE2OS (FEAT_TLBIRANGE),RVAE3 (FEAT_TLBIRANGE),RVAE3IS (FEAT_TLBIRANGE),RVAE3OS (FEAT_TLBIRANGE),RVALE1 (FEAT_TLBIRANGE),RVALE1IS (FEAT_TLBIRANGE),RVALE1OS  (FEAT_TLBIRANGE),RVALE2 (FEAT_TLBIRANGE),RVALE2IS (FEAT_TLBIRANGE),RVALE2OS (FEAT_TLBIRANGE),RVALE3 (FEAT_TLBIRANGE),RVALE3IS (FEAT_TLBIRANGE),RVALE3OS (FEAT_TLBIRANGE),VAAE1,VAAE1IS,VAAE1OS (FEAT_TLBIOS),VAALE1,VAALE1IS,VAALE1OS (FEAT_TLBIOS),VAE1,VAE1IS,VAE1OS (FEAT_TLBIOS),VAE2,VAE2IS,VAE2OS (FEAT_TLBIOS),VAE3,VAE3IS,VAE3OS (FEAT_TLBIOS),VALE1,VALE1IS,VALE1OS (FEAT_TLBIOS),VALE2,VALE2IS,VALE2OS (FEAT_TLBIOS),VALE3,VALE3IS,VALE3OS (FEAT_TLBIOS),VMALLE1,VMALLE1IS,VMALLE1OS (FEAT_TLBIOS),VMALLS12E1,VMALLS12E1IS,VMALLS12E1OS (FEAT_TLBIOS)]\\\">&lt;tlbi_op&gt;</a><text>{</text><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit optional general-purpose source register, default '11111' (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"sys.xml#SYS_CR_systeminstrs\\\">SYS</a><text> #</text><a link=\\\"sa_op1\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\\\">&lt;op1&gt;</a><text>, C8, </text><a link=\\\"sa_cm\\\" hover=\\\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\\\">&lt;Cm&gt;</a><text>, #</text><a link=\\\"sa_op2\\\" hover=\\\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\\\">&lt;op2&gt;</a><text>{</text><text>, </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit optional general-purpose source register, default '11111' (field &quot;Rt&quot;)\\\">&lt;Xt&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"TLB Invalidate operation\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"4\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"3\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"tsb\",\n    asm: [\n        \"<asmtemplate><text>TSB CSYNC</text></asmtemplate>\",\n    ],\n    desc: \"Trace Synchronization Barrier\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"tst_ands_log_imm\",\n    asm: [\n        \"<asmtemplate><text>TST  </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Bitmask immediate (field &quot;imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ands_log_imm.xml#ANDS_32S_log_imm\\\">ANDS</a><text> WZR, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_imm\\\" hover=\\\"Bitmask immediate (field &quot;imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>TST  </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Bitmask immediate (field &quot;N:imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ands_log_imm.xml#ANDS_64S_log_imm\\\">ANDS</a><text> XZR, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_imm_1\\\" hover=\\\"Bitmask immediate (field &quot;N:imms:immr&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"tst_ands_log_shift\",\n    asm: [\n        \"<asmtemplate><text>TST  </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ands_log_shift.xml#ANDS_32_log_shift\\\">ANDS</a><text> WZR, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount\\\" hover=\\\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><text>TST  </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ands_log_shift.xml#ANDS_64_log_shift\\\">ANDS</a><text> XZR, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\\\"sa_shift\\\" hover=\\\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\\\">&lt;shift&gt;</a><text> #</text><a link=\\\"sa_amount_1\\\" hover=\\\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\\\">&lt;amount&gt;</a><text>}</text></asmtemplate>\",\n    ],\n    desc: \"Test (shifted register)\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" width=\\\"2\\\" name=\\\"shift\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"2\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imm6\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ubfiz_ubfm\",\n    asm: [\n        \"<asmtemplate><text>UBFIZ  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_lsb\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-31]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ubfm.xml#UBFM_32M_bitfield\\\">UBFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #(-</text><a link=\\\"sa_lsb\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-31]\\\">&lt;lsb&gt;</a><text> MOD 32), #(</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n        \"<asmtemplate><text>UBFIZ  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_lsb_2\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-63]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ubfm.xml#UBFM_64M_bitfield\\\">UBFM</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #(-</text><a link=\\\"sa_lsb_2\\\" hover=\\\"Bit number of lsb of the destination bitfield [0-63]\\\">&lt;lsb&gt;</a><text> MOD 64), #(</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n    ],\n    desc: \"Unsigned Bitfield Insert in Zero\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ubfm\",\n    asm: [\n        \"<asmtemplate><text>UBFM  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_immr\\\" hover=\\\"Right rotate amount [0-31] (field &quot;immr&quot;)\\\">&lt;immr&gt;</a><text>, #</text><a link=\\\"sa_imms\\\" hover=\\\"Leftmost bit number to be moved from the source [0-31] (field &quot;imms&quot;)\\\">&lt;imms&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>UBFM  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_immr_1\\\" hover=\\\"Right rotate amount [0-63] (field &quot;immr&quot;)\\\">&lt;immr&gt;</a><text>, #</text><a link=\\\"sa_imms_1\\\" hover=\\\"Leftmost bit number to be moved from the source [0-63] (field &quot;imms&quot;)\\\">&lt;imms&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Unsigned Bitfield Move\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"ubfx_ubfm\",\n    asm: [\n        \"<asmtemplate><text>UBFX  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_lsb_1\\\" hover=\\\"Bit number of lsb of the source bitfield [0-31]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ubfm.xml#UBFM_32M_bitfield\\\">UBFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #</text><a link=\\\"sa_lsb_1\\\" hover=\\\"Bit number of lsb of the source bitfield [0-31]\\\">&lt;lsb&gt;</a><text>, #(</text><a link=\\\"sa_lsb_1\\\" hover=\\\"Bit number of lsb of the source bitfield [0-31]\\\">&lt;lsb&gt;</a><text>+</text><a link=\\\"sa_width\\\" hover=\\\"Width of bitfield [1-32-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n        \"<asmtemplate><text>UBFX  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_lsb_3\\\" hover=\\\"Bit number of lsb of the source bitfield [0-63]\\\">&lt;lsb&gt;</a><text>, #</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ubfm.xml#UBFM_64M_bitfield\\\">UBFM</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, #</text><a link=\\\"sa_lsb_3\\\" hover=\\\"Bit number of lsb of the source bitfield [0-63]\\\">&lt;lsb&gt;</a><text>, #(</text><a link=\\\"sa_lsb_3\\\" hover=\\\"Bit number of lsb of the source bitfield [0-63]\\\">&lt;lsb&gt;</a><text>+</text><a link=\\\"sa_width_1\\\" hover=\\\"Width of bitfield [1-64-&lt;lsb&gt;]\\\">&lt;width&gt;</a><text>-1)</text></asmtemplate>\",\n    ],\n    desc: \"Unsigned Bitfield Extract\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"6\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"udf_perm_undef\",\n    asm: [\n        \"<asmtemplate><text>UDF  #</text><a link=\\\"sa_imm\\\" hover=\\\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\\\">&lt;imm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Permanently Undefined\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"16\\\" settings=\\\"16\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"16\\\" name=\\\"imm16\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"16\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"udiv\",\n    asm: [\n        \"<asmtemplate><text>UDIV  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>UDIV  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Unsigned Divide\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" name=\\\"op\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"5\\\" name=\\\"opcode2[5:1]\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"o1\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"umaddl\",\n    asm: [\n        \"<asmtemplate><text>UMADDL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, </text><a link=\\\"sa_xa\\\" hover=\\\"Third 64-bit general-purpose source register holding addend (field &quot;Ra&quot;)\\\">&lt;Xa&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Unsigned Multiply-Add Long\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"U\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op31[1:0]\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"umnegl_umsubl\",\n    asm: [\n        \"<asmtemplate><text>UMNEGL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"umsubl.xml#UMSUBL_64WA_dp_3src\\\">UMSUBL</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, XZR</text></asmtemplate>\",\n    ],\n    desc: \"Unsigned Multiply-Negate Long\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"U\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op31[1:0]\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"umsubl\",\n    asm: [\n        \"<asmtemplate><text>UMSUBL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, </text><a link=\\\"sa_xa\\\" hover=\\\"Third 64-bit general-purpose source register holding minuend (field &quot;Ra&quot;)\\\">&lt;Xa&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Unsigned Multiply-Subtract Long\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"U\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op31[1:0]\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"umulh\",\n    asm: [\n        \"<asmtemplate><text>UMULH  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_xn\\\" hover=\\\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Xn&gt;</a><text>, </text><a link=\\\"sa_xm\\\" hover=\\\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Xm&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Unsigned Multiply High\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"U\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op31[1:0]\\\" settings=\\\"2\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n          <c>(1)</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"umull_umaddl\",\n    asm: [\n        \"<asmtemplate><text>UMULL  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"umaddl.xml#UMADDL_64WA_dp_3src\\\">UMADDL</a><text> </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, </text><a link=\\\"sa_wm\\\" hover=\\\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\\\">&lt;Wm&gt;</a><text>, XZR</text></asmtemplate>\",\n    ],\n    desc: \"Unsigned Multiply Long\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"op54\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"5\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"23\\\" name=\\\"U\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" width=\\\"2\\\" name=\\\"op31[1:0]\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"Rm\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"o0\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" width=\\\"5\\\" name=\\\"Ra\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"uxtb_ubfm\",\n    asm: [\n        \"<asmtemplate><text>UXTB  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ubfm.xml#UBFM_32M_bitfield\\\">UBFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #0, #7</text></asmtemplate>\",\n    ],\n    desc: \"Unsigned Extend Byte\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\" settings=\\\"6\\\" psbits=\\\"xxxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\" settings=\\\"6\\\" psbits=\\\"xxxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"uxth_ubfm\",\n    asm: [\n        \"<asmtemplate><text>UXTH  </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a></asmtemplate>\",\n        \"<asmtemplate><a href=\\\"ubfm.xml#UBFM_32M_bitfield\\\">UBFM</a><text> </text><a link=\\\"sa_wd\\\" hover=\\\"32-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Wd&gt;</a><text>, </text><a link=\\\"sa_wn\\\" hover=\\\"32-bit general-purpose source register (field &quot;Rn&quot;)\\\">&lt;Wn&gt;</a><text>, #0, #15</text></asmtemplate>\",\n    ],\n    desc: \"Unsigned Extend Halfword\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" width=\\\"2\\\" name=\\\"opc\\\" usename=\\\"1\\\" settings=\\\"2\\\" psbits=\\\"xx\\\">\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"6\\\" settings=\\\"6\\\">\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"22\\\" name=\\\"N\\\" usename=\\\"1\\\" settings=\\\"1\\\" psbits=\\\"x\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" width=\\\"6\\\" name=\\\"immr\\\" usename=\\\"1\\\" settings=\\\"6\\\" psbits=\\\"xxxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"6\\\" name=\\\"imms\\\" usename=\\\"1\\\" settings=\\\"6\\\" psbits=\\\"xxxxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"wfe\",\n    asm: [\n        \"<asmtemplate><text>WFE</text></asmtemplate>\",\n    ],\n    desc: \"Wait For Event\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"wfet\",\n    asm: [\n        \"<asmtemplate><text>WFET  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rd&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Wait For Event with Timeout\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"20\\\" settings=\\\"20\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"wfi\",\n    asm: [\n        \"<asmtemplate><text>WFI</text></asmtemplate>\",\n    ],\n    desc: \"Wait For Interrupt\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"wfit\",\n    asm: [\n        \"<asmtemplate><text>WFIT  </text><a link=\\\"sa_xt\\\" hover=\\\"64-bit general-purpose source register (field &quot;Rd&quot;)\\\">&lt;Xt&gt;</a></asmtemplate>\",\n    ],\n    desc: \"Wait For Interrupt with Timeout\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"20\\\" settings=\\\"20\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"xaflag\",\n    asm: [\n        \"<asmtemplate><text>XAFLAG</text></asmtemplate>\",\n    ],\n    desc: \"Convert floating-point condition flags from external format to Arm format\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>(0)</c>\\n          <c>(0)</c>\\n          <c>(0)</c>\\n          <c>(0)</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"xpac\",\n    asm: [\n        \"<asmtemplate><text>XPACD  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>XPACI  </text><a link=\\\"sa_xd\\\" hover=\\\"64-bit general-purpose destination register (field &quot;Rd&quot;)\\\">&lt;Xd&gt;</a></asmtemplate>\",\n        \"<asmtemplate><text>XPACLRI</text></asmtemplate>\",\n    ],\n    desc: \"Strip Pointer Authentication Code\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" name=\\\"sf\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"30\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"29\\\" name=\\\"S\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"28\\\" width=\\\"8\\\" settings=\\\"8\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"5\\\" name=\\\"opcode2\\\" settings=\\\"5\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" name=\\\"opcode[5]\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"14\\\" name=\\\"opcode[4]\\\" settings=\\\"1\\\">\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"13\\\" width=\\\"3\\\" name=\\\"opcode[3:1]\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"10\\\" name=\\\"D\\\" usename=\\\"1\\\">\\n          <c></c>\\n        </box>\",\n        \"<box hibit=\\\"9\\\" width=\\\"5\\\" name=\\\"Rn\\\" usename=\\\"1\\\" settings=\\\"5\\\" psbits=\\\"xxxxx\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rd\\\" usename=\\\"1\\\">\\n          <c colspan=\\\"5\\\"></c>\\n        </box>\",\n    ],\n} \nFileInfo {\n    name: \"yield\",\n    asm: [\n        \"<asmtemplate><text>YIELD</text></asmtemplate>\",\n    ],\n    desc: \"YIELD\",\n    regdiagram: [\n        \"<box hibit=\\\"31\\\" width=\\\"10\\\" settings=\\\"10\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"21\\\" name=\\\"L\\\" settings=\\\"1\\\">\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"20\\\" width=\\\"2\\\" name=\\\"op0\\\" settings=\\\"2\\\">\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"18\\\" width=\\\"3\\\" name=\\\"op1\\\" settings=\\\"3\\\">\\n          <c>0</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"15\\\" width=\\\"4\\\" name=\\\"CRn\\\" settings=\\\"4\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"11\\\" width=\\\"4\\\" name=\\\"CRm\\\" usename=\\\"1\\\" settings=\\\"4\\\" psbits=\\\"xxxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n          <c>0</c>\\n        </box>\",\n        \"<box hibit=\\\"7\\\" width=\\\"3\\\" name=\\\"op2\\\" usename=\\\"1\\\" settings=\\\"3\\\" psbits=\\\"xxx\\\">\\n          <c>0</c>\\n          <c>0</c>\\n          <c>1</c>\\n        </box>\",\n        \"<box hibit=\\\"4\\\" width=\\\"5\\\" name=\\\"Rt\\\" settings=\\\"5\\\">\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n          <c>1</c>\\n        </box>\",\n    ],\n} \n""),
        ),
    ),
);
