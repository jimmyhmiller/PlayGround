(
    position: (
        x: 1512.7346,
        y: 71.6676,
    ),
    size: (
        width: 200.0,
        height: 100.0,
    ),
    on_click: [
        SaveWidgets,
    ],
    data: Noop,
);
(
    position: (
        x: 1492.1489,
        y: 228.28314,
    ),
    size: (
        width: 512.0,
        height: 512.0,
    ),
    on_click: [],
    data: Image(
        data: (
            path: "./resources/test.png",
        ),
    ),
);
(
    position: (
        x: 659.8125,
        y: 64.35156,
    ),
    size: (
        width: 100.0,
        height: 100.0,
    ),
    on_click: [
        SaveWidgets,
    ],
    data: Noop,
);
(
    position: (
        x: 135.40625,
        y: 252.21875,
    ),
    size: (
        width: 500.0,
        height: 500.0,
    ),
    on_click: [],
    data: TextPane(
        text_pane: (
            contents: "Widget(\n    position: Position(\n        x: 500.0,\n        y: 500.0,\n    ),\n    size: Size(\n        width: 100.0,\n        height: 100.0,\n    ),\n    on_click: [],\n    data: Compound(\n        children: [\n            2,\n            3,\n            5,\n        ],\n    ),\n)",
            line_height: 40.0,
            offset: (
                x: 0.0,
                y: 0.0,
            ),
        ),
    ),
);
(
    position: (
        x: 126.609375,
        y: -35.828125,
    ),
    size: (
        width: 200.0,
        height: 200.0,
    ),
    on_click: [],
    data: Text(
        text: "Lith",
        text_options: (
            font_family: "Ubuntu Mono",
            font_weight: Bold,
            size: 120.0,
            color: (
                r: 1.0,
                g: 1.0,
                b: 1.0,
                a: 1.0,
            ),
        ),
    ),
);
(
    position: (
        x: 3390.461,
        y: 44.34375,
    ),
    size: (
        width: 100.0,
        height: 100.0,
    ),
    on_click: [],
    data: Compound(
        children: [
            2,
            3,
            5,
        ],
    ),
);
(
    position: (
        x: 794.272,
        y: 178.73743,
    ),
    size: (
        width: 600.0,
        height: 600.0,
    ),
    on_click: [],
    data: Wasm(
        wasm: (
            path: "/Users/jimmyhmiller/Documents/Code/PlayGround/rust/editor2/target/wasm32-wasi/debug/counter.wasm",
            state: Some("{\"contents\":\"\",\"line_height\":30.0,\"offset\":{\"x\":0.0,\"y\":0.0},\"cursor\":{\"line\":0,\"column\":1},\"text_buffer\":{\"bytes\":[108,109,102,10,97,115,59,100,108,102,109,10,59,97,115,100,108,59,107,106,100,102,98,110,97,59,118,10,115,100,118,107,106,97,110,115,100,98,107,106,108,100,102,110,103,98,97,106,115,100,107,104,102,103,98,97,115,107,100,102,120,99,107,106,110,118,122,106,104,10,97,115,100,104,106,108,100,115,107,106,104,98,118,98,97,115,100,104,102,10,115,97,104,106,104,106,100,115,97,118,10,115,97,100,118,104,106,97,115,100,118,98,104,106,97,115,100,118,10,106,104,97,98,115,100,118,10,97,115,100,118,106,104,98,97,115,100,118,10,97,115,100,102,106,107,110,115,97,100,102,10,115,97,100,102,10,107,108,109,97,115,100,10,102]}}"),
        ),
    ),
);
(
    position: (
        x: 196.31274,
        y: 713.1929,
    ),
    size: (
        width: 2000.0,
        height: 1800.0,
    ),
    on_click: [],
    data: Wasm(
        wasm: (
            path: "/Users/jimmyhmiller/Documents/Code/PlayGround/rust/editor2/target/wasm32-wasi/release/asm.wasm",
            state: Some("{"file_info":[{"name":"adc","asm":["<asmtemplate><text>ADC  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>ADC  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Add with Carry","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"adcs","asm":["<asmtemplate><text>ADCS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>ADCS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Add with Carry, setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"add_addsub_ext","asm":["<asmtemplate><text>ADD  </text><a link=\"sa_wd_wsp\" hover=\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\"sa_wn_wsp\" hover=\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>","<asmtemplate><text>ADD  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_r\" hover=\"Width specifier (field &quot;option&quot;) [W,X]\">&lt;R&gt;</a><a link=\"sa_m\" hover=\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\"sa_extend_1\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>"],"desc":"Add (extended register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opt\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"imm3\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"add_addsub_imm","asm":["<asmtemplate><text>ADD  </text><a link=\"sa_wd_wsp\" hover=\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\"sa_wn_wsp\" hover=\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>ADD  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>"],"desc":"Add (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"sh\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"12\" name=\"imm12\" usename=\"1\">\n          <c colspan=\"12\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"add_addsub_shift","asm":["<asmtemplate><text>ADD  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>ADD  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Add (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"addg","asm":["<asmtemplate><text>ADDG  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Xd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_uimm6\" hover=\"Unsigned immediate, multiple of 16 [0-1008] (field &quot;uimm6&quot;)\">&lt;uimm6&gt;</a><text>, #</text><a link=\"sa_uimm4\" hover=\"Unsigned immediate [0-15] (field &quot;uimm4&quot;)\">&lt;uimm4&gt;</a></asmtemplate>"],"desc":"Add with Tag","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"uimm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"2\" name=\"op3\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>(0)</c>\n          <c>(0)</c>\n        </box>","<box hibit=\"13\" width=\"4\" name=\"uimm4\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"adds_addsub_ext","asm":["<asmtemplate><text>ADDS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn_wsp\" hover=\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>","<asmtemplate><text>ADDS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_r\" hover=\"Width specifier (field &quot;option&quot;) [W,X]\">&lt;R&gt;</a><a link=\"sa_m\" hover=\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\"sa_extend_1\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>"],"desc":"Add (extended register), setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opt\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"imm3\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"adds_addsub_imm","asm":["<asmtemplate><text>ADDS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn_wsp\" hover=\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>ADDS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>"],"desc":"Add (immediate), setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"sh\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"12\" name=\"imm12\" usename=\"1\">\n          <c colspan=\"12\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"adds_addsub_shift","asm":["<asmtemplate><text>ADDS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>ADDS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Add (shifted register), setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"adr","asm":["<asmtemplate><text>ADR  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_label\" hover=\"Label whose address is to be calculated (field &quot;immhi:immlo&quot;)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Form PC-relative address","regdiagram":["<box hibit=\"31\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"immlo\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"19\" name=\"immhi\" usename=\"1\">\n          <c colspan=\"19\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"adrp","asm":["<asmtemplate><text>ADRP  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_label\" hover=\"Label whose 4KB page address is to be calculated (field immhi:immlo)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Form PC-relative address to 4KB page","regdiagram":["<box hibit=\"31\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"immlo\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"19\" name=\"immhi\" usename=\"1\">\n          <c colspan=\"19\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"and_log_imm","asm":["<asmtemplate><text>AND  </text><a link=\"sa_wd_wsp\" hover=\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Bitmask immediate (field &quot;imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>AND  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"Bitmask immediate (field &quot;N:imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Bitwise AND (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"and_log_shift","asm":["<asmtemplate><text>AND  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>AND  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Bitwise AND (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ands_log_imm","asm":["<asmtemplate><text>ANDS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Bitmask immediate (field &quot;imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>ANDS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"Bitmask immediate (field &quot;N:imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Bitwise AND (immediate), setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ands_log_shift","asm":["<asmtemplate><text>ANDS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>ANDS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Bitwise AND (shifted register), setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"asr_sbfm","asm":["<asmtemplate><text>ASR  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_shift\" hover=\"Shift amount [0-31] (field &quot;immr&quot;)\">&lt;shift&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbfm.xml#SBFM_32M_bitfield\">SBFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_shift\" hover=\"Shift amount [0-31] (field &quot;immr&quot;)\">&lt;shift&gt;</a><text>, #31</text></asmtemplate>","<asmtemplate><text>ASR  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_shift_1\" hover=\"Shift amount [0-63] (field &quot;immr&quot;)\">&lt;shift&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbfm.xml#SBFM_64M_bitfield\">SBFM</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_shift_1\" hover=\"Shift amount [0-63] (field &quot;immr&quot;)\">&lt;shift&gt;</a><text>, #63</text></asmtemplate>"],"desc":"Arithmetic Shift Right (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\" settings=\"5\" psbits=\"xxxxxx\">\n          <c>x</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"asr_asrv","asm":["<asmtemplate><text>ASR  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"asrv.xml#ASRV_32_dp_2src\">ASRV</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>ASR  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>","<asmtemplate><a href=\"asrv.xml#ASRV_64_dp_2src\">ASRV</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Arithmetic Shift Right (register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode2[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"asrv","asm":["<asmtemplate><text>ASRV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>ASRV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Arithmetic Shift Right Variable","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode2[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"at_sys","asm":["<asmtemplate><text>AT  </text><a link=\"sa_at_op\" hover=\"AT instruction name, as listed for AT system instruction group (field &quot;op1:CRm&lt;0&gt;:op2&quot;) [S1E0R,S1E0W,S1E1R,S1E1RP (FEAT_PAN2),S1E1W,S1E1WP (FEAT_PAN2),S1E2R,S1E2W,S1E3R,S1E3W,S12E0R,S12E0W,S12E1R,S12E1W]\">&lt;at_op&gt;</a><text>, </text><a link=\"sa_xt_1\" hover=\"64-bit general-purpose source register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a></asmtemplate>","<asmtemplate><a href=\"sys.xml#SYS_CR_systeminstrs\">SYS</a><text> #</text><a link=\"sa_op1\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\">&lt;op1&gt;</a><text>, C7, </text><a link=\"sa_cm\" hover=\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\">&lt;Cm&gt;</a><text>, #</text><a link=\"sa_op2\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\">&lt;op2&gt;</a><text>, </text><a link=\"sa_xt_1\" hover=\"64-bit general-purpose source register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a></asmtemplate>"],"desc":"Address Translate","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"3\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>x</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"autda","asm":["<asmtemplate><text>AUTDA  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a></asmtemplate>","<asmtemplate><text>AUTDZA  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a></asmtemplate>"],"desc":"Authenticate Data address, using key A","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" name=\"opcode[5]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode[4]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"Z\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"opcode[2:0]\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"autdb","asm":["<asmtemplate><text>AUTDB  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a></asmtemplate>","<asmtemplate><text>AUTDZB  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a></asmtemplate>"],"desc":"Authenticate Data address, using key B","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" name=\"opcode[5]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode[4]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"Z\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"opcode[2:0]\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"autia","asm":["<asmtemplate><text>AUTIA  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a></asmtemplate>","<asmtemplate><text>AUTIZA  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a></asmtemplate>","<asmtemplate><text>AUTIA1716</text></asmtemplate>","<asmtemplate><text>AUTIASP</text></asmtemplate>","<asmtemplate><text>AUTIAZ</text></asmtemplate>"],"desc":"Authenticate Instruction address, using key A","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" name=\"opcode[5]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode[4]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"Z\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"opcode[2:0]\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"autib","asm":["<asmtemplate><text>AUTIB  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a></asmtemplate>","<asmtemplate><text>AUTIZB  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a></asmtemplate>","<asmtemplate><text>AUTIB1716</text></asmtemplate>","<asmtemplate><text>AUTIBSP</text></asmtemplate>","<asmtemplate><text>AUTIBZ</text></asmtemplate>"],"desc":"Authenticate Instruction address, using key B","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" name=\"opcode[5]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode[4]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"Z\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"opcode[2:0]\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"axflag","asm":["<asmtemplate><text>AXFLAG</text></asmtemplate>"],"desc":"Convert floating-point condition flags from Arm to external format","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>(0)</c>\n          <c>(0)</c>\n          <c>(0)</c>\n          <c>(0)</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"b_uncond","asm":["<asmtemplate><text>B  </text><a link=\"sa_label\" hover=\"Label to be unconditionally branched to (field imm26)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Branch","regdiagram":["<box hibit=\"31\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"30\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"26\" name=\"imm26\" usename=\"1\">\n          <c colspan=\"26\"></c>\n        </box>"]},{"name":"b_cond","asm":["<asmtemplate><text>B.</text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>  </text><a link=\"sa_label\" hover=\"Label to be conditionally branched to (field imm19)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Branch conditionally","regdiagram":["<box hibit=\"31\" width=\"7\" settings=\"7\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"24\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"19\" name=\"imm19\" usename=\"1\">\n          <c colspan=\"19\"></c>\n        </box>","<box hibit=\"4\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"3\" width=\"4\" name=\"cond\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>"]},{"name":"bc_cond","asm":["<asmtemplate><text>BC.</text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>  </text><a link=\"sa_label\" hover=\"Label to be conditionally branched to (field imm19)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Branch Consistent conditionally","regdiagram":["<box hibit=\"31\" width=\"7\" settings=\"7\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"24\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"19\" name=\"imm19\" usename=\"1\">\n          <c colspan=\"19\"></c>\n        </box>","<box hibit=\"4\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"3\" width=\"4\" name=\"cond\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>"]},{"name":"bfc_bfm","asm":["<asmtemplate><text>BFC  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, #</text><a link=\"sa_lsb\" hover=\"Bit number of lsb of the destination bitfield [0-31]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"bfm.xml#BFM_32M_bitfield\">BFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, WZR, #(-</text><a link=\"sa_lsb\" hover=\"Bit number of lsb of the destination bitfield [0-31]\">&lt;lsb&gt;</a><text> MOD 32), #(</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>","<asmtemplate><text>BFC  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, #</text><a link=\"sa_lsb_2\" hover=\"Bit number of lsb of the destination bitfield [0-63]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"bfm.xml#BFM_64M_bitfield\">BFM</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, XZR, #(-</text><a link=\"sa_lsb_2\" hover=\"Bit number of lsb of the destination bitfield [0-63]\">&lt;lsb&gt;</a><text> MOD 64), #(</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>"],"desc":"Bitfield Clear","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"bfi_bfm","asm":["<asmtemplate><text>BFI  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_lsb\" hover=\"Bit number of lsb of the destination bitfield [0-31]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"bfm.xml#BFM_32M_bitfield\">BFM</a><text>  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #(-</text><a link=\"sa_lsb\" hover=\"Bit number of lsb of the destination bitfield [0-31]\">&lt;lsb&gt;</a><text> MOD 32), #(</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>","<asmtemplate><text>BFI  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_lsb_2\" hover=\"Bit number of lsb of the destination bitfield [0-63]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"bfm.xml#BFM_64M_bitfield\">BFM</a><text>  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #(-</text><a link=\"sa_lsb_2\" hover=\"Bit number of lsb of the destination bitfield [0-63]\">&lt;lsb&gt;</a><text> MOD 64), #(</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>"],"desc":"Bitfield Insert","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" constraint=\"!= 11111\" psbits=\"xxxxx\">\n          <c colspan=\"5\">!= 11111</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"bfm","asm":["<asmtemplate><text>BFM  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_immr\" hover=\"Right rotate amount [0-31] (field &quot;immr&quot;)\">&lt;immr&gt;</a><text>, #</text><a link=\"sa_imms\" hover=\"Leftmost bit number to be moved from the source [0-31] (field &quot;imms&quot;)\">&lt;imms&gt;</a></asmtemplate>","<asmtemplate><text>BFM  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_immr_1\" hover=\"Right rotate amount [0-63] (field &quot;immr&quot;)\">&lt;immr&gt;</a><text>, #</text><a link=\"sa_imms_1\" hover=\"Leftmost bit number to be moved from the source [0-63] (field &quot;imms&quot;)\">&lt;imms&gt;</a></asmtemplate>"],"desc":"Bitfield Move","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"bfxil_bfm","asm":["<asmtemplate><text>BFXIL  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_lsb_1\" hover=\"Bit number of lsb of the source bitfield [0-31]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"bfm.xml#BFM_32M_bitfield\">BFM</a><text>  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_lsb_1\" hover=\"Bit number of lsb of the source bitfield [0-31]\">&lt;lsb&gt;</a><text>, #(</text><a link=\"sa_lsb_1\" hover=\"Bit number of lsb of the source bitfield [0-31]\">&lt;lsb&gt;</a><text>+</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>","<asmtemplate><text>BFXIL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_lsb_3\" hover=\"Bit number of lsb of the source bitfield [0-63]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"bfm.xml#BFM_64M_bitfield\">BFM</a><text>  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_lsb_3\" hover=\"Bit number of lsb of the source bitfield [0-63]\">&lt;lsb&gt;</a><text>, #(</text><a link=\"sa_lsb_3\" hover=\"Bit number of lsb of the source bitfield [0-63]\">&lt;lsb&gt;</a><text>+</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>"],"desc":"Bitfield extract and insert at low end","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"bic_log_shift","asm":["<asmtemplate><text>BIC  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>BIC  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Bitwise Bit Clear (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"bics","asm":["<asmtemplate><text>BICS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>BICS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Bitwise Bit Clear (shifted register), setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"bl","asm":["<asmtemplate><text>BL  </text><a link=\"sa_label\" hover=\"Label to be unconditionally branched to (field imm26)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Branch with Link","regdiagram":["<box hibit=\"31\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"26\" name=\"imm26\" usename=\"1\">\n          <c colspan=\"26\"></c>\n        </box>"]},{"name":"blr","asm":["<asmtemplate><text>BLR  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>"],"desc":"Branch with Link to Register","regdiagram":["<box hibit=\"31\" width=\"7\" settings=\"7\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"24\" name=\"Z\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"opc[2:1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"op2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op3[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"M\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rm\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>"]},{"name":"blra","asm":["<asmtemplate><text>BLRAAZ  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>","<asmtemplate><text>BLRAA  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm_sp\" hover=\"64-bit general-purpose source register or SP holding modifier (field &quot;Rm&quot;)\">&lt;Xm|SP&gt;</a></asmtemplate>","<asmtemplate><text>BLRABZ  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>","<asmtemplate><text>BLRAB  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm_sp\" hover=\"64-bit general-purpose source register or SP holding modifier (field &quot;Rm&quot;)\">&lt;Xm|SP&gt;</a></asmtemplate>"],"desc":"Branch with Link to Register, with pointer authentication","regdiagram":["<box hibit=\"31\" width=\"7\" settings=\"7\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"24\" name=\"Z\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"23\" name=\"opc[2:1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"op2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op3[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"10\" name=\"M\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"br","asm":["<asmtemplate><text>BR  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>"],"desc":"Branch to Register","regdiagram":["<box hibit=\"31\" width=\"7\" settings=\"7\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"24\" name=\"Z\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"opc[2:1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"op2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op3[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"M\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rm\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>"]},{"name":"bra","asm":["<asmtemplate><text>BRAAZ  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>","<asmtemplate><text>BRAA  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm_sp\" hover=\"64-bit general-purpose source register or SP holding modifier (field &quot;Rm&quot;)\">&lt;Xm|SP&gt;</a></asmtemplate>","<asmtemplate><text>BRABZ  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>","<asmtemplate><text>BRAB  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm_sp\" hover=\"64-bit general-purpose source register or SP holding modifier (field &quot;Rm&quot;)\">&lt;Xm|SP&gt;</a></asmtemplate>"],"desc":"Branch to Register, with pointer authentication","regdiagram":["<box hibit=\"31\" width=\"7\" settings=\"7\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"24\" name=\"Z\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"23\" name=\"opc[2:1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"op2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op3[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"10\" name=\"M\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"brk","asm":["<asmtemplate><text>BRK  #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Breakpoint instruction","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"1\" width=\"2\" name=\"LL\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>"]},{"name":"bti","asm":["<asmtemplate><text>BTI  </text><text>{</text><a link=\"sa_targets\" hover=\"Type of indirection (field &quot;op2&lt;2:1&gt;&quot;) [(omitted),c,j,jc]\">&lt;targets&gt;</a><text>}</text></asmtemplate>"],"desc":"Branch Target Identification","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"1\" psbits=\"xxx\">\n          <c>x</c>\n          <c>x</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"cas","asm":["<asmtemplate><text>CAS  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASA  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASAL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CAS  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASA  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASAL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Compare and Swap word or doubleword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"7\" settings=\"7\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"casb","asm":["<asmtemplate><text>CASAB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASALB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Compare and Swap byte in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"7\" settings=\"7\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cash","asm":["<asmtemplate><text>CASAH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASALH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Compare and Swap halfword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"7\" settings=\"7\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"casp","asm":["<asmtemplate><text>CASP  </text><a link=\"sa_ws\" hover=\"First 32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_w_s_plus_1\" hover=\"Second 32-bit general-purpose register to be compared and loaded\">&lt;W(s+1)&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"First 32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, </text><a link=\"sa_w_t_plus_1\" hover=\"Second 32-bit general-purpose register to be conditionally stored\">&lt;W(t+1)&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASPA  </text><a link=\"sa_ws\" hover=\"First 32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_w_s_plus_1\" hover=\"Second 32-bit general-purpose register to be compared and loaded\">&lt;W(s+1)&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"First 32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, </text><a link=\"sa_w_t_plus_1\" hover=\"Second 32-bit general-purpose register to be conditionally stored\">&lt;W(t+1)&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASPAL  </text><a link=\"sa_ws\" hover=\"First 32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_w_s_plus_1\" hover=\"Second 32-bit general-purpose register to be compared and loaded\">&lt;W(s+1)&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"First 32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, </text><a link=\"sa_w_t_plus_1\" hover=\"Second 32-bit general-purpose register to be conditionally stored\">&lt;W(t+1)&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASPL  </text><a link=\"sa_ws\" hover=\"First 32-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_w_s_plus_1\" hover=\"Second 32-bit general-purpose register to be compared and loaded\">&lt;W(s+1)&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"First 32-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, </text><a link=\"sa_w_t_plus_1\" hover=\"Second 32-bit general-purpose register to be conditionally stored\">&lt;W(t+1)&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASP  </text><a link=\"sa_xs\" hover=\"First 64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_x_s_plus_1\" hover=\"Second 64-bit general-purpose register to be compared and loaded\">&lt;X(s+1)&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"First 64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, </text><a link=\"sa_x_t_plus_1\" hover=\"Second 64-bit general-purpose register to be conditionally stored\">&lt;X(t+1)&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASPA  </text><a link=\"sa_xs\" hover=\"First 64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_x_s_plus_1\" hover=\"Second 64-bit general-purpose register to be compared and loaded\">&lt;X(s+1)&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"First 64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, </text><a link=\"sa_x_t_plus_1\" hover=\"Second 64-bit general-purpose register to be conditionally stored\">&lt;X(t+1)&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASPAL  </text><a link=\"sa_xs\" hover=\"First 64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_x_s_plus_1\" hover=\"Second 64-bit general-purpose register to be compared and loaded\">&lt;X(s+1)&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"First 64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, </text><a link=\"sa_x_t_plus_1\" hover=\"Second 64-bit general-purpose register to be conditionally stored\">&lt;X(t+1)&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>CASPL  </text><a link=\"sa_xs\" hover=\"First 64-bit general-purpose register to be compared and loaded (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_x_s_plus_1\" hover=\"Second 64-bit general-purpose register to be compared and loaded\">&lt;X(s+1)&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"First 64-bit general-purpose register to be conditionally stored (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, </text><a link=\"sa_x_t_plus_1\" hover=\"Second 64-bit general-purpose register to be conditionally stored\">&lt;X(t+1)&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Compare and Swap Pair of words or doublewords in memory","regdiagram":["<box hibit=\"31\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"30\" name=\"sz\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cbnz","asm":["<asmtemplate><text>CBNZ  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be tested (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, </text><a link=\"sa_label\" hover=\"Label to be conditionally branched to (field imm19)\">&lt;label&gt;</a></asmtemplate>","<asmtemplate><text>CBNZ  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be tested (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, </text><a link=\"sa_label\" hover=\"Label to be conditionally branched to (field imm19)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Compare and Branch on Nonzero","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"24\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"19\" name=\"imm19\" usename=\"1\">\n          <c colspan=\"19\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cbz","asm":["<asmtemplate><text>CBZ  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be tested (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, </text><a link=\"sa_label\" hover=\"Label to be conditionally branched to (field imm19)\">&lt;label&gt;</a></asmtemplate>","<asmtemplate><text>CBZ  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be tested (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, </text><a link=\"sa_label\" hover=\"Label to be conditionally branched to (field imm19)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Compare and Branch on Zero","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"24\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"19\" name=\"imm19\" usename=\"1\">\n          <c colspan=\"19\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ccmn_imm","asm":["<asmtemplate><text>CCMN  </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Five bit unsigned (positive) immediate (field &quot;imm5&quot;)\">&lt;imm&gt;</a><text>, #</text><a link=\"sa_nzcv\" hover=\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\">&lt;nzcv&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><text>CCMN  </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Five bit unsigned (positive) immediate (field &quot;imm5&quot;)\">&lt;imm&gt;</a><text>, #</text><a link=\"sa_nzcv\" hover=\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\">&lt;nzcv&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>"],"desc":"Conditional Compare Negative (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"imm5\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"10\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"3\" width=\"4\" name=\"nzcv\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>"]},{"name":"ccmn_reg","asm":["<asmtemplate><text>CCMN  </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, #</text><a link=\"sa_nzcv\" hover=\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\">&lt;nzcv&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><text>CCMN  </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>, #</text><a link=\"sa_nzcv\" hover=\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\">&lt;nzcv&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>"],"desc":"Conditional Compare Negative (register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"3\" width=\"4\" name=\"nzcv\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>"]},{"name":"ccmp_imm","asm":["<asmtemplate><text>CCMP  </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Five bit unsigned (positive) immediate (field &quot;imm5&quot;)\">&lt;imm&gt;</a><text>, #</text><a link=\"sa_nzcv\" hover=\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\">&lt;nzcv&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><text>CCMP  </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Five bit unsigned (positive) immediate (field &quot;imm5&quot;)\">&lt;imm&gt;</a><text>, #</text><a link=\"sa_nzcv\" hover=\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\">&lt;nzcv&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>"],"desc":"Conditional Compare (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"imm5\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"10\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"3\" width=\"4\" name=\"nzcv\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>"]},{"name":"ccmp_reg","asm":["<asmtemplate><text>CCMP  </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, #</text><a link=\"sa_nzcv\" hover=\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\">&lt;nzcv&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><text>CCMP  </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>, #</text><a link=\"sa_nzcv\" hover=\"Flag bit specifier, an immediate [0-15], giving the alternative state for 4-bit NZCV condition flags (field &quot;nzcv&quot;)\">&lt;nzcv&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>"],"desc":"Conditional Compare (register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"3\" width=\"4\" name=\"nzcv\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>"]},{"name":"cfinv","asm":["<asmtemplate><text>CFINV</text></asmtemplate>"],"desc":"Invert Carry Flag","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" name=\"op0[1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"19\" name=\"op0[0]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>(0)</c>\n          <c>(0)</c>\n          <c>(0)</c>\n          <c>(0)</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"cfp_sys","asm":["<asmtemplate><text>CFP  RCTX, </text><a link=\"sa_xt_1\" hover=\"64-bit general-purpose source register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a></asmtemplate>","<asmtemplate><a href=\"sys.xml#SYS_CR_systeminstrs\">SYS</a><text> #3, C7, C3, #4, </text><a link=\"sa_xt_1\" hover=\"64-bit general-purpose source register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a></asmtemplate>"],"desc":"Control Flow Prediction Restriction by Context","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cinc_csinc","asm":["<asmtemplate><text>CINC  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn_1\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><a href=\"csinc.xml#CSINC_32_condsel\">CSINC</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn_1\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wn_1\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Wn&gt;</a><text>, invert(</text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>)</text></asmtemplate>","<asmtemplate><text>CINC  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><a href=\"csinc.xml#CSINC_64_condsel\">CSINC</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xn&gt;</a><text>, invert(</text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>)</text></asmtemplate>"],"desc":"Conditional Increment","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\" settings=\"5\" constraint=\"!= 11111\" psbits=\"xxxxx\">\n          <c colspan=\"5\">!= 11111</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\" settings=\"3\" constraint=\"!= 111x\" psbits=\"xxxx\">\n          <c colspan=\"4\">!= 111x</c>\n        </box>","<box hibit=\"11\" name=\"op2[1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"o2\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" constraint=\"!= 11111\" psbits=\"xxxxx\">\n          <c colspan=\"5\">!= 11111</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cinv_csinv","asm":["<asmtemplate><text>CINV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn_1\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><a href=\"csinv.xml#CSINV_32_condsel\">CSINV</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn_1\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wn_1\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Wn&gt;</a><text>, invert(</text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>)</text></asmtemplate>","<asmtemplate><text>CINV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><a href=\"csinv.xml#CSINV_64_condsel\">CSINV</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xn&gt;</a><text>, invert(</text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>)</text></asmtemplate>"],"desc":"Conditional Invert","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\" settings=\"5\" constraint=\"!= 11111\" psbits=\"xxxxx\">\n          <c colspan=\"5\">!= 11111</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\" settings=\"3\" constraint=\"!= 111x\" psbits=\"xxxx\">\n          <c colspan=\"4\">!= 111x</c>\n        </box>","<box hibit=\"11\" name=\"op2[1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"o2\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" constraint=\"!= 11111\" psbits=\"xxxxx\">\n          <c colspan=\"5\">!= 11111</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"clrex","asm":["<asmtemplate><text>CLREX  </text><text>{</text><text>#</text><a link=\"sa_imm\" hover=\"Optional 4-bit unsigned immediate [0-15], default 15 (field &quot;CRm&quot;)\">&lt;imm&gt;</a><text>}</text></asmtemplate>"],"desc":"Clear Exclusive","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"cls_int","asm":["<asmtemplate><text>CLS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><text>CLS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>"],"desc":"Count Leading Sign bits","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"5\" name=\"opcode[5:1]\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"clz_int","asm":["<asmtemplate><text>CLZ  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><text>CLZ  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>"],"desc":"Count Leading Zeros","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"5\" name=\"opcode[5:1]\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cmn_adds_addsub_ext","asm":["<asmtemplate><text>CMN  </text><a link=\"sa_wn_wsp\" hover=\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>","<asmtemplate><a href=\"adds_addsub_ext.xml#ADDS_32S_addsub_ext\">ADDS</a><text> WZR, </text><a link=\"sa_wn_wsp\" hover=\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>","<asmtemplate><text>CMN  </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_r\" hover=\"Width specifier (field &quot;option&quot;) [W,X]\">&lt;R&gt;</a><a link=\"sa_m\" hover=\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\"sa_extend_1\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>","<asmtemplate><a href=\"adds_addsub_ext.xml#ADDS_64S_addsub_ext\">ADDS</a><text> XZR, </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_r\" hover=\"Width specifier (field &quot;option&quot;) [W,X]\">&lt;R&gt;</a><a link=\"sa_m\" hover=\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\"sa_extend_1\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>"],"desc":"Compare Negative (extended register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opt\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"imm3\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"cmn_adds_addsub_imm","asm":["<asmtemplate><text>CMN  </text><a link=\"sa_wn_wsp\" hover=\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"adds_addsub_imm.xml#ADDS_32S_addsub_imm\">ADDS</a><text> WZR, </text><a link=\"sa_wn_wsp\" hover=\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>CMN  </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"adds_addsub_imm.xml#ADDS_64S_addsub_imm\">ADDS</a><text> XZR, </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>"],"desc":"Compare Negative (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"sh\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"12\" name=\"imm12\" usename=\"1\">\n          <c colspan=\"12\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"cmn_adds_addsub_shift","asm":["<asmtemplate><text>CMN  </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"adds_addsub_shift.xml#ADDS_32_addsub_shift\">ADDS</a><text> WZR, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>CMN  </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"adds_addsub_shift.xml#ADDS_64_addsub_shift\">ADDS</a><text> XZR, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Compare Negative (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"cmp_subs_addsub_ext","asm":["<asmtemplate><text>CMP  </text><a link=\"sa_wn_wsp\" hover=\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>","<asmtemplate><a href=\"subs_addsub_ext.xml#SUBS_32S_addsub_ext\">SUBS</a><text> WZR, </text><a link=\"sa_wn_wsp\" hover=\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>","<asmtemplate><text>CMP  </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_r\" hover=\"Width specifier (field &quot;option&quot;) [W,X]\">&lt;R&gt;</a><a link=\"sa_m\" hover=\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\"sa_extend_1\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>","<asmtemplate><a href=\"subs_addsub_ext.xml#SUBS_64S_addsub_ext\">SUBS</a><text> XZR, </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_r\" hover=\"Width specifier (field &quot;option&quot;) [W,X]\">&lt;R&gt;</a><a link=\"sa_m\" hover=\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\"sa_extend_1\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>"],"desc":"Compare (extended register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opt\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"imm3\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"cmp_subs_addsub_imm","asm":["<asmtemplate><text>CMP  </text><a link=\"sa_wn_wsp\" hover=\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"subs_addsub_imm.xml#SUBS_32S_addsub_imm\">SUBS</a><text> WZR, </text><a link=\"sa_wn_wsp\" hover=\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>CMP  </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"subs_addsub_imm.xml#SUBS_64S_addsub_imm\">SUBS</a><text> XZR, </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>"],"desc":"Compare (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"sh\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"12\" name=\"imm12\" usename=\"1\">\n          <c colspan=\"12\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"cmp_subs_addsub_shift","asm":["<asmtemplate><text>CMP  </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"subs_addsub_shift.xml#SUBS_32_addsub_shift\">SUBS</a><text> WZR, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>CMP  </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"subs_addsub_shift.xml#SUBS_64_addsub_shift\">SUBS</a><text> XZR, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Compare (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"cmpp_subps","asm":["<asmtemplate><text>CMPP  </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_xm_sp\" hover=\"Second 64-bit general-purpose source register or SP (field &quot;Xm&quot;)\">&lt;Xm|SP&gt;</a></asmtemplate>","<asmtemplate><a href=\"subps.xml#SUBPS_64S_dp_2src\">SUBPS</a><text> XZR, </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_xm_sp\" hover=\"Second 64-bit general-purpose source register or SP (field &quot;Xm&quot;)\">&lt;Xm|SP&gt;</a></asmtemplate>"],"desc":"Compare with Tag","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Xm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"opcode&lt;5&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode&lt;4&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"opcode&lt;3&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"12\" name=\"opcode&lt;2&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"opcode&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"opcode&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xd\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"cneg_csneg","asm":["<asmtemplate><text>CNEG  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn_1\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><a href=\"csneg.xml#CSNEG_32_condsel\">CSNEG</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn_1\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wn_1\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Wn&gt;</a><text>, invert(</text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>)</text></asmtemplate>","<asmtemplate><text>CNEG  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><a href=\"csneg.xml#CSNEG_64_condsel\">CSNEG</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xn&gt;</a><text>, invert(</text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>)</text></asmtemplate>"],"desc":"Conditional Negate","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\" settings=\"3\" constraint=\"!= 111x\" psbits=\"xxxx\">\n          <c colspan=\"4\">!= 111x</c>\n        </box>","<box hibit=\"11\" name=\"op2[1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"o2\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpp_sys","asm":["<asmtemplate><text>CPP  RCTX, </text><a link=\"sa_xt_1\" hover=\"64-bit general-purpose source register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a></asmtemplate>","<asmtemplate><a href=\"sys.xml#SYS_CR_systeminstrs\">SYS</a><text> #3, C7, C3, #7, </text><a link=\"sa_xt_1\" hover=\"64-bit general-purpose source register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a></asmtemplate>"],"desc":"Cache Prefetch Prediction Restriction by Context","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfp","asm":["<asmtemplate><text>CPYFE  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFM  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFP  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfpn","asm":["<asmtemplate><text>CPYFEN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, reads and writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfprn","asm":["<asmtemplate><text>CPYFERN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPRN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, reads non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfprt","asm":["<asmtemplate><text>CPYFERT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMRT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPRT  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, reads unprivileged","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfprtn","asm":["<asmtemplate><text>CPYFERTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMRTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPRTN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, reads unprivileged, reads and writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfprtrn","asm":["<asmtemplate><text>CPYFERTRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMRTRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPRTRN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, reads unprivileged and non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfprtwn","asm":["<asmtemplate><text>CPYFERTWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMRTWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPRTWN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, reads unprivileged, writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfpt","asm":["<asmtemplate><text>CPYFET  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPT  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, reads and writes unprivileged","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfptn","asm":["<asmtemplate><text>CPYFETN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPTN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, reads and writes unprivileged and non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfptrn","asm":["<asmtemplate><text>CPYFETRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMTRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPTRN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, reads and writes unprivileged, reads non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfptwn","asm":["<asmtemplate><text>CPYFETWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMTWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPTWN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, reads and writes unprivileged, writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfpwn","asm":["<asmtemplate><text>CPYFEWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPWN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfpwt","asm":["<asmtemplate><text>CPYFEWT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMWT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPWT  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, writes unprivileged","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfpwtn","asm":["<asmtemplate><text>CPYFEWTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMWTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPWTN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, writes unprivileged, reads and writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfpwtrn","asm":["<asmtemplate><text>CPYFEWTRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMWTRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPWTRN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, writes unprivileged, reads non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyfpwtwn","asm":["<asmtemplate><text>CPYFEWTWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFMWTWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYFPWTWN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy Forward-only, writes unprivileged and non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyp","asm":["<asmtemplate><text>CPYE  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYM  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYP  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpypn","asm":["<asmtemplate><text>CPYEN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, reads and writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyprn","asm":["<asmtemplate><text>CPYERN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPRN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, reads non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyprt","asm":["<asmtemplate><text>CPYERT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMRT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPRT  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, reads unprivileged","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyprtn","asm":["<asmtemplate><text>CPYERTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMRTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPRTN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, reads unprivileged, reads and writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyprtrn","asm":["<asmtemplate><text>CPYERTRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMRTRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPRTRN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, reads unprivileged and non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyprtwn","asm":["<asmtemplate><text>CPYERTWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMRTWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPRTWN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, reads unprivileged, writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpypt","asm":["<asmtemplate><text>CPYET  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPT  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, reads and writes unprivileged","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyptn","asm":["<asmtemplate><text>CPYETN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPTN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, reads and writes unprivileged and non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyptrn","asm":["<asmtemplate><text>CPYETRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMTRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPTRN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, reads and writes unprivileged, reads non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpyptwn","asm":["<asmtemplate><text>CPYETWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMTWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPTWN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, reads and writes unprivileged, writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpypwn","asm":["<asmtemplate><text>CPYEWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPWN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpypwt","asm":["<asmtemplate><text>CPYEWT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMWT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPWT  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, writes unprivileged","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpypwtn","asm":["<asmtemplate><text>CPYEWTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMWTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPWTN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, writes unprivileged, reads and writes non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpypwtrn","asm":["<asmtemplate><text>CPYEWTRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMWTRN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPWTRN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, writes unprivileged, reads non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cpypwtwn","asm":["<asmtemplate><text>CPYEWTWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYMWTWN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds an encoding of source address (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be transferred (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>","<asmtemplate><text>CPYPWTWN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, [</text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source address and is updated by the instruction (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be transferred and is updated by the instruction to encode the remaining size and destination (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!</text></asmtemplate>"],"desc":"Memory Copy, writes unprivileged and non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"crc32","asm":["<asmtemplate><text>CRC32B  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"32-bit general-purpose data source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>CRC32H  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"32-bit general-purpose data source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>CRC32W  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"32-bit general-purpose data source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>CRC32X  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"64-bit general-purpose data source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"CRC32 checksum","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"opcode2[5:3]\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"12\" name=\"C\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"crc32c","asm":["<asmtemplate><text>CRC32CB  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"32-bit general-purpose data source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>CRC32CH  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"32-bit general-purpose data source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>CRC32CW  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"32-bit general-purpose data source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>CRC32CX  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose accumulator output register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose accumulator input register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"64-bit general-purpose data source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"CRC32C checksum","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"opcode2[5:3]\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"12\" name=\"C\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"csdb","asm":["<asmtemplate><text>CSDB</text></asmtemplate>"],"desc":"Consumption of Speculative Data Barrier","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"csel","asm":["<asmtemplate><text>CSEL  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><text>CSEL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>"],"desc":"Conditional Select","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" name=\"op2[1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"o2\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"cset_csinc","asm":["<asmtemplate><text>CSET  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><a href=\"csinc.xml#CSINC_32_condsel\">CSINC</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, WZR, WZR, invert(</text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>)</text></asmtemplate>","<asmtemplate><text>CSET  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><a href=\"csinc.xml#CSINC_64_condsel\">CSINC</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, XZR, XZR, invert(</text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>)</text></asmtemplate>"],"desc":"Conditional Set","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\" settings=\"3\" constraint=\"!= 111x\" psbits=\"xxxx\">\n          <c colspan=\"4\">!= 111x</c>\n        </box>","<box hibit=\"11\" name=\"op2[1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"o2\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"csetm_csinv","asm":["<asmtemplate><text>CSETM  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><a href=\"csinv.xml#CSINV_32_condsel\">CSINV</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, WZR, WZR, invert(</text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>)</text></asmtemplate>","<asmtemplate><text>CSETM  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><a href=\"csinv.xml#CSINV_64_condsel\">CSINV</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, XZR, XZR, invert(</text><a link=\"sa_cond_1\" hover=\"Standard condition, excluding AL and NV (field &quot;cond&quot;)\">&lt;cond&gt;</a><text>)</text></asmtemplate>"],"desc":"Conditional Set Mask","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\" settings=\"3\" constraint=\"!= 111x\" psbits=\"xxxx\">\n          <c colspan=\"4\">!= 111x</c>\n        </box>","<box hibit=\"11\" name=\"op2[1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"o2\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"csinc","asm":["<asmtemplate><text>CSINC  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><text>CSINC  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>"],"desc":"Conditional Select Increment","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" name=\"op2[1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"o2\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"csinv","asm":["<asmtemplate><text>CSINV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><text>CSINV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>"],"desc":"Conditional Select Invert","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" name=\"op2[1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"o2\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"csneg","asm":["<asmtemplate><text>CSNEG  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>","<asmtemplate><text>CSNEG  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>, </text><a link=\"sa_cond\" hover=\"Standard condition (field &quot;cond&quot;)\">&lt;cond&gt;</a></asmtemplate>"],"desc":"Conditional Select Negation","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"cond\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" name=\"op2[1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"o2\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"dc_sys","asm":["<asmtemplate><text>DC  </text><a link=\"sa_dc_op\" hover=\"DC instruction name, as listed for DC system instruction group (field &quot;op1:CRm:op2&quot;) [CGDSW (FEAT_MTE2),CGDVAC (FEAT_MTE),CGDVADP (FEAT_MTE),CGDVAP (FEAT_MTE),CGSW (FEAT_MTE2),CGVAC (FEAT_MTE),CGVADP (FEAT_MTE),CGVAP (FEAT_MTE),CIGDSW (FEAT_MTE2),CIGDVAC (FEAT_MTE),CIGSW (FEAT_MTE2),CIGVAC (FEAT_MTE),CISW,CIVAC,CSW,CVAC,CVADP (FEAT_DPB2),CVAP (FEAT_DPB),CVAU,GVA (FEAT_MTE),GZVA (FEAT_MTE),IGDSW (FEAT_MTE2),IGDVAC (FEAT_MTE2),IGSW (FEAT_MTE2),IGVAC (FEAT_MTE2),ISW,IVAC,ZVA]\">&lt;dc_op&gt;</a><text>, </text><a link=\"sa_xt_1\" hover=\"64-bit general-purpose source register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a></asmtemplate>","<asmtemplate><a href=\"sys.xml#SYS_CR_systeminstrs\">SYS</a><text> #</text><a link=\"sa_op1\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\">&lt;op1&gt;</a><text>, C7, </text><a link=\"sa_cm\" hover=\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\">&lt;Cm&gt;</a><text>, #</text><a link=\"sa_op2\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\">&lt;op2&gt;</a><text>, </text><a link=\"sa_xt_1\" hover=\"64-bit general-purpose source register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a></asmtemplate>"],"desc":"Data Cache operation","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"dcps1","asm":["<asmtemplate><text>DCPS1  </text><text>{</text><text>#</text><a link=\"sa_imm\" hover=\"Optional 16-bit unsigned immediate [0-65535], default 0 (field &quot;imm16&quot;)\">&lt;imm&gt;</a><text>}</text></asmtemplate>"],"desc":"Debug Change PE State to EL1.","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"1\" width=\"2\" name=\"LL\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>"]},{"name":"dcps2","asm":["<asmtemplate><text>DCPS2  </text><text>{</text><text>#</text><a link=\"sa_imm\" hover=\"Optional 16-bit unsigned immediate [0-65535], default 0 (field &quot;imm16&quot;)\">&lt;imm&gt;</a><text>}</text></asmtemplate>"],"desc":"Debug Change PE State to EL2.","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"1\" width=\"2\" name=\"LL\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>"]},{"name":"dcps3","asm":["<asmtemplate><text>DCPS3  </text><text>{</text><text>#</text><a link=\"sa_imm\" hover=\"Optional 16-bit unsigned immediate [0-65535], default 0 (field &quot;imm16&quot;)\">&lt;imm&gt;</a><text>}</text></asmtemplate>"],"desc":"Debug Change PE State to EL3","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"1\" width=\"2\" name=\"LL\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"dgh","asm":["<asmtemplate><text>DGH</text></asmtemplate>"],"desc":"Data Gathering Hint","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"dmb","asm":["<asmtemplate><text>DMB  </text><a link=\"sa_option\" hover=\"Specifies the limitation on the barrier operation\">&lt;option&gt;</a><text>|#</text><a link=\"sa_imm\" hover=\"4-bit unsigned immediate [0-15] (field &quot;CRm&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Data Memory Barrier","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" name=\"op2[2]\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"6\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"drps","asm":["<asmtemplate><text>DRPS</text></asmtemplate>"],"desc":"","regdiagram":["<box hibit=\"31\" width=\"7\" settings=\"7\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"24\" width=\"4\" name=\"opc\" settings=\"4\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"op2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"op3\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"op4\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>"]},{"name":"dsb","asm":["<asmtemplate><text>DSB  </text><a link=\"sa_option\" hover=\"Specifies the limitation on the barrier operation\">&lt;option&gt;</a><text>|#</text><a link=\"sa_imm\" hover=\"4-bit unsigned immediate [0-15] (field &quot;CRm&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>DSB  </text><a link=\"sa_option_1\" hover=\"Specifies the limitation on the barrier operation\">&lt;option&gt;</a><text>nXS|#</text><a link=\"sa_imm_1\" hover=\"5-bit unsigned immediate (field &quot;imm2&quot;) [16,20,24,28]\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Data Synchronization Barrier","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" name=\"op2[2]\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"6\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"dvp_sys","asm":["<asmtemplate><text>DVP  RCTX, </text><a link=\"sa_xt_1\" hover=\"64-bit general-purpose source register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a></asmtemplate>","<asmtemplate><a href=\"sys.xml#SYS_CR_systeminstrs\">SYS</a><text> #3, C7, C3, #5, </text><a link=\"sa_xt_1\" hover=\"64-bit general-purpose source register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a></asmtemplate>"],"desc":"Data Value Prediction Restriction by Context","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"eon","asm":["<asmtemplate><text>EON  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>EON  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Bitwise Exclusive OR NOT (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"eor_log_imm","asm":["<asmtemplate><text>EOR  </text><a link=\"sa_wd_wsp\" hover=\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Bitmask immediate (field &quot;imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>EOR  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"Bitmask immediate (field &quot;N:imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Bitwise Exclusive OR (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"eor_log_shift","asm":["<asmtemplate><text>EOR  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>EOR  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Bitwise Exclusive OR (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"eret","asm":["<asmtemplate><text>ERET</text></asmtemplate>"],"desc":"Exception Return","regdiagram":["<box hibit=\"31\" width=\"7\" settings=\"7\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"24\" name=\"opc[3]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"opc[2:0]\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"op2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op3[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"M\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"op4\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>"]},{"name":"ereta","asm":["<asmtemplate><text>ERETAA</text></asmtemplate>","<asmtemplate><text>ERETAB</text></asmtemplate>"],"desc":"Exception Return, with pointer authentication","regdiagram":["<box hibit=\"31\" width=\"7\" settings=\"7\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"24\" name=\"opc[3]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"opc[2:0]\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"op2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op3[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"10\" name=\"M\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"op4\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"esb","asm":["<asmtemplate><text>ESB</text></asmtemplate>"],"desc":"Error Synchronization Barrier","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"extr","asm":["<asmtemplate><text>EXTR  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, #</text><a link=\"sa_lsb\" hover=\"Least significant bit position from which to extract [0-31] (field &quot;imms&quot;)\">&lt;lsb&gt;</a></asmtemplate>","<asmtemplate><text>EXTR  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>, #</text><a link=\"sa_lsb_1\" hover=\"Least significant bit position from which to extract [0-63] (field &quot;imms&quot;)\">&lt;lsb&gt;</a></asmtemplate>"],"desc":"Extract register","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op21\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"gmi","asm":["<asmtemplate><text>GMI  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Xd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Xm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Tag Mask Insert","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Xm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"opcode&lt;5&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode&lt;4&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"opcode&lt;3&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"12\" name=\"opcode&lt;2&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"11\" name=\"opcode&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"opcode&lt;0&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"hint","asm":["<asmtemplate><text>HINT  #</text><a link=\"sa_imm\" hover=\"7-bit unsigned immediate [0-127 (field &quot;CRm:op2&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Hint instruction","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"hlt","asm":["<asmtemplate><text>HLT  #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Halt instruction","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"1\" width=\"2\" name=\"LL\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>"]},{"name":"hvc","asm":["<asmtemplate><text>HVC  #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Hypervisor Call","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"1\" width=\"2\" name=\"LL\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>"]},{"name":"ic_sys","asm":["<asmtemplate><text>IC  </text><a link=\"sa_ic_op\" hover=\"IC instruction name, as listed for IC system instruction pages (field &quot;op1:CRm:op2&quot;) [IALLU,IALLUIS,IVAU]\">&lt;ic_op&gt;</a><text>{</text><text>, </text><a link=\"sa_xt\" hover=\"64-bit optional general-purpose source register, default '11111' (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"sys.xml#SYS_CR_systeminstrs\">SYS</a><text> #</text><a link=\"sa_op1\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\">&lt;op1&gt;</a><text>, C7, </text><a link=\"sa_cm\" hover=\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\">&lt;Cm&gt;</a><text>, #</text><a link=\"sa_op2\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\">&lt;op2&gt;</a><text>{</text><text>, </text><a link=\"sa_xt\" hover=\"64-bit optional general-purpose source register, default '11111' (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>}</text></asmtemplate>"],"desc":"Instruction Cache operation","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"irg","asm":["<asmtemplate><text>IRG  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Xd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Xm&quot;)\">&lt;Xm&gt;</a><text>}</text></asmtemplate>"],"desc":"Insert Random Tag","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Xm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"opcode&lt;5&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode&lt;4&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"opcode&lt;3&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"12\" name=\"opcode&lt;2&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"11\" name=\"opcode&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"opcode&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"isb","asm":["<asmtemplate><text>ISB  </text><text>{</text><a link=\"sa_option\" hover=\"Specifies an optional limitation on the barrier operation\">&lt;option&gt;</a><text>|#</text><a link=\"sa_imm\" hover=\"Optional 4-bit unsigned immediate [0-15], default 15 (field &quot;CRm&quot;)\">&lt;imm&gt;</a><text>}</text></asmtemplate>"],"desc":"Instruction Synchronization Barrier","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" name=\"op2[2]\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"6\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"ld64b","asm":["<asmtemplate><text>LD64B  </text><a link=\"sa_xt\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>"],"desc":"Single-copy Atomic 64-byte Load","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldadd","asm":["<asmtemplate><text>LDADD  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDA  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDAL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADD  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDA  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDAL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic add on word or doubleword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldaddb","asm":["<asmtemplate><text>LDADDAB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDALB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic add on byte in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldaddh","asm":["<asmtemplate><text>LDADDAH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDALH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDADDLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic add on halfword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldapr","asm":["<asmtemplate><text>LDAPR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDAPR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire RCpc Register","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"R\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldaprb","asm":["<asmtemplate><text>LDAPRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire RCpc Register Byte","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"R\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldaprh","asm":["<asmtemplate><text>LDAPRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire RCpc Register Halfword","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"R\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldapur_gen","asm":["<asmtemplate><text>LDAPUR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDAPUR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire RCpc Register (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldapurb","asm":["<asmtemplate><text>LDAPURB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire RCpc Register Byte (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldapurh","asm":["<asmtemplate><text>LDAPURH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire RCpc Register Halfword (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldapursb","asm":["<asmtemplate><text>LDAPURSB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDAPURSB  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire RCpc Register Signed Byte (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldapursh","asm":["<asmtemplate><text>LDAPURSH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDAPURSH  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire RCpc Register Signed Halfword (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldapursw","asm":["<asmtemplate><text>LDAPURSW  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire RCpc Register Signed Word (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldar","asm":["<asmtemplate><text>LDAR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDAR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire Register","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldarb","asm":["<asmtemplate><text>LDARB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire Register Byte","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldarh","asm":["<asmtemplate><text>LDARH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire Register Halfword","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldaxp","asm":["<asmtemplate><text>LDAXP  </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDAXP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire Exclusive Pair of Registers","regdiagram":["<box hibit=\"31\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" name=\"sz\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldaxr","asm":["<asmtemplate><text>LDAXR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDAXR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire Exclusive Register","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldaxrb","asm":["<asmtemplate><text>LDAXRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire Exclusive Register Byte","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldaxrh","asm":["<asmtemplate><text>LDAXRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load-Acquire Exclusive Register Halfword","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldclr","asm":["<asmtemplate><text>LDCLR  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRA  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRAL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLR  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRA  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRAL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit clear on word or doubleword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldclrb","asm":["<asmtemplate><text>LDCLRAB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRALB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit clear on byte in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldclrh","asm":["<asmtemplate><text>LDCLRAH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRALH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDCLRLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit clear on halfword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldeor","asm":["<asmtemplate><text>LDEOR  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORA  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORAL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEOR  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORA  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORAL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic exclusive OR on word or doubleword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldeorb","asm":["<asmtemplate><text>LDEORAB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORALB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic exclusive OR on byte in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldeorh","asm":["<asmtemplate><text>LDEORAH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORALH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDEORLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic exclusive OR on halfword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldg","asm":["<asmtemplate><text>LDG  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Allocation Tag","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"opc&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"opc&lt;0&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" name=\"op2&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"op2&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldgm","asm":["<asmtemplate><text>LDGM  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Load Tag Multiple","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"opc&lt;1&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"opc&lt;0&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" name=\"imm9&lt;8&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"19\" name=\"imm9&lt;7&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"18\" name=\"imm9&lt;6&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"17\" name=\"imm9&lt;5&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"16\" name=\"imm9&lt;4&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"15\" name=\"imm9&lt;3&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"imm9&lt;2&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"imm9&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"12\" name=\"imm9&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"op2&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"op2&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldlar","asm":["<asmtemplate><text>LDLAR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDLAR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load LOAcquire Register","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldlarb","asm":["<asmtemplate><text>LDLARB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load LOAcquire Register Byte","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldlarh","asm":["<asmtemplate><text>LDLARH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load LOAcquire Register Halfword","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldnp_gen","asm":["<asmtemplate><text>LDNP  </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_imm\" hover=\"Optional signed immediate byte offset, multiple of 4 [-256-252], default 0 (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDNP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_imm_1\" hover=\"Optional signed immediate byte offset, multiple of 8 [-512-504], default 0 (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Pair of Registers, with non-temporal hint","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>x</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" width=\"7\" name=\"imm7\" usename=\"1\">\n          <c colspan=\"7\"></c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldp_gen","asm":["<asmtemplate><text>LDP  </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_imm_1\" hover=\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>LDP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_imm_3\" hover=\"Signed immediate byte offset, multiple of 8 [-512-504] (field &quot;imm7&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>LDP  </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm_3\" hover=\"Signed immediate byte offset, multiple of 8 [-512-504] (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDP  </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_imm\" hover=\"Optional signed immediate byte offset, multiple of 4 [-256-252], default 0 (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_imm_2\" hover=\"Optional signed immediate byte offset, multiple of 8 [-512-504], default 0 (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Pair of Registers","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>x</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" width=\"7\" name=\"imm7\" usename=\"1\">\n          <c colspan=\"7\"></c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldpsw","asm":["<asmtemplate><text>LDPSW  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_imm_1\" hover=\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>LDPSW  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDPSW  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_imm\" hover=\"Optional signed immediate byte offset, multiple of 4 [-256-252], default 0 (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Pair of Registers Signed Word","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" width=\"7\" name=\"imm7\" usename=\"1\">\n          <c colspan=\"7\"></c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldr_imm_gen","asm":["<asmtemplate><text>LDR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>LDR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>LDR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset, multiple of 4 [0-16380], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm_1\" hover=\"Optional positive immediate byte offset, multiple of 8 [0-32760], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register (immediate)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldr_lit_gen","asm":["<asmtemplate><text>LDR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, </text><a link=\"sa_label\" hover=\"Label from which the data is to be loaded (field imm19)\">&lt;label&gt;</a></asmtemplate>","<asmtemplate><text>LDR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, </text><a link=\"sa_label\" hover=\"Label from which the data is to be loaded (field imm19)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Load Register (literal)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>0</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"19\" name=\"imm19\" usename=\"1\">\n          <c colspan=\"19\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldr_reg_gen","asm":["<asmtemplate><text>LDR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#2]\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount_1\" hover=\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#3]\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register (register)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" name=\"S\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldra","asm":["<asmtemplate><text>LDRAA  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset, multiple of 8 [-4096-4088], default 0 (field &quot;S:imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDRAA  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset, multiple of 8 [-4096-4088], default 0 (field &quot;S:imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]!</text></asmtemplate>","<asmtemplate><text>LDRAB  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset, multiple of 8 [-4096-4088], default 0 (field &quot;S:imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDRAB  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset, multiple of 8 [-4096-4088], default 0 (field &quot;S:imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]!</text></asmtemplate>"],"desc":"Load Register, with pointer authentication","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"M\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"S\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" name=\"W\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"10\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldrb_imm","asm":["<asmtemplate><text>LDRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>LDRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset [0-4095], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Byte (immediate)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldrb_reg","asm":["<asmtemplate><text>LDRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>), </text><a link=\"sa_extend\" hover=\"Index extend specifier (field &quot;option&quot;) [SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, LSL </text><a link=\"sa_amount\" hover=\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Byte (register)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" name=\"S\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldrh_imm","asm":["<asmtemplate><text>LDRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>LDRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset, multiple of 2 [0-8190], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Halfword (immediate)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldrh_reg","asm":["<asmtemplate><text>LDRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#1]\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Halfword (register)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" name=\"S\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldrsb_imm","asm":["<asmtemplate><text>LDRSB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>LDRSB  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>LDRSB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDRSB  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDRSB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset [0-4095], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDRSB  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset [0-4095], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Byte (immediate)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldrsb_reg","asm":["<asmtemplate><text>LDRSB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>), </text><a link=\"sa_extend\" hover=\"Index extend specifier (field &quot;option&quot;) [SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDRSB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, LSL </text><a link=\"sa_amount\" hover=\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDRSB  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>), </text><a link=\"sa_extend\" hover=\"Index extend specifier (field &quot;option&quot;) [SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDRSB  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, LSL </text><a link=\"sa_amount\" hover=\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Byte (register)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" name=\"S\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldrsh_imm","asm":["<asmtemplate><text>LDRSH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>LDRSH  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>LDRSH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDRSH  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDRSH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset, multiple of 2 [0-8190], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDRSH  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset, multiple of 2 [0-8190], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Halfword (immediate)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldrsh_reg","asm":["<asmtemplate><text>LDRSH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#1]\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDRSH  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#1]\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Halfword (register)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" name=\"S\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldrsw_imm","asm":["<asmtemplate><text>LDRSW  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>LDRSW  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>LDRSW  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset, multiple of 4 [0-16380], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Word (immediate)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldrsw_lit","asm":["<asmtemplate><text>LDRSW  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, </text><a link=\"sa_label\" hover=\"Label from which the data is to be loaded (field imm19)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Load Register Signed Word (literal)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"19\" name=\"imm19\" usename=\"1\">\n          <c colspan=\"19\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldrsw_reg","asm":["<asmtemplate><text>LDRSW  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#2]\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Word (register)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" name=\"S\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldset","asm":["<asmtemplate><text>LDSET  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETA  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETAL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSET  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETA  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETAL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit set on word or doubleword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldsetb","asm":["<asmtemplate><text>LDSETAB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETALB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit set on byte in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldseth","asm":["<asmtemplate><text>LDSETAH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETALH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSETLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit set on halfword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldsmax","asm":["<asmtemplate><text>LDSMAX  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXA  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXAL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAX  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXA  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXAL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed maximum on word or doubleword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldsmaxb","asm":["<asmtemplate><text>LDSMAXAB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXALB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed maximum on byte in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldsmaxh","asm":["<asmtemplate><text>LDSMAXAH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXALH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMAXLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed maximum on halfword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldsmin","asm":["<asmtemplate><text>LDSMIN  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINA  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINAL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMIN  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINA  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINAL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed minimum on word or doubleword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldsminb","asm":["<asmtemplate><text>LDSMINAB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINALB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed minimum on byte in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldsminh","asm":["<asmtemplate><text>LDSMINAH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINALH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDSMINLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed minimum on halfword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldtr","asm":["<asmtemplate><text>LDTR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDTR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register (unprivileged)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldtrb","asm":["<asmtemplate><text>LDTRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Byte (unprivileged)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldtrh","asm":["<asmtemplate><text>LDTRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Halfword (unprivileged)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldtrsb","asm":["<asmtemplate><text>LDTRSB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDTRSB  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Byte (unprivileged)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldtrsh","asm":["<asmtemplate><text>LDTRSH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDTRSH  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Halfword (unprivileged)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldtrsw","asm":["<asmtemplate><text>LDTRSW  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Word (unprivileged)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldumax","asm":["<asmtemplate><text>LDUMAX  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXA  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXAL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAX  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXA  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXAL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned maximum on word or doubleword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldumaxb","asm":["<asmtemplate><text>LDUMAXAB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXALB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned maximum on byte in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldumaxh","asm":["<asmtemplate><text>LDUMAXAH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXALH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMAXLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned maximum on halfword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldumin","asm":["<asmtemplate><text>LDUMIN  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINA  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINAL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMIN  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINA  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINAL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned minimum on word or doubleword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"lduminb","asm":["<asmtemplate><text>LDUMINAB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINALB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned minimum on byte in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"lduminh","asm":["<asmtemplate><text>LDUMINAH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINALH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>LDUMINLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned minimum on halfword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldur_gen","asm":["<asmtemplate><text>LDUR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDUR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldurb","asm":["<asmtemplate><text>LDURB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Byte (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldurh","asm":["<asmtemplate><text>LDURH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Halfword (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldursb","asm":["<asmtemplate><text>LDURSB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDURSB  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Byte (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldursh","asm":["<asmtemplate><text>LDURSH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDURSH  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Halfword (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldursw","asm":["<asmtemplate><text>LDURSW  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Load Register Signed Word (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldxp","asm":["<asmtemplate><text>LDXP  </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDXP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load Exclusive Pair of Registers","regdiagram":["<box hibit=\"31\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" name=\"sz\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldxr","asm":["<asmtemplate><text>LDXR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>LDXR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load Exclusive Register","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldxrb","asm":["<asmtemplate><text>LDXRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load Exclusive Register Byte","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ldxrh","asm":["<asmtemplate><text>LDXRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Load Exclusive Register Halfword","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"lsl_ubfm","asm":["<asmtemplate><text>LSL  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_shift_1\" hover=\"Shift amount [0-31]\">&lt;shift&gt;</a></asmtemplate>","<asmtemplate><a href=\"ubfm.xml#UBFM_32M_bitfield\">UBFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #(-</text><a link=\"sa_shift_1\" hover=\"Shift amount [0-31]\">&lt;shift&gt;</a><text> MOD 32), #(31-</text><a link=\"sa_shift_1\" hover=\"Shift amount [0-31]\">&lt;shift&gt;</a><text>)</text></asmtemplate>","<asmtemplate><text>LSL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_shift_3\" hover=\"Shift amount [0-63]\">&lt;shift&gt;</a></asmtemplate>","<asmtemplate><a href=\"ubfm.xml#UBFM_64M_bitfield\">UBFM</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #(-</text><a link=\"sa_shift_3\" hover=\"Shift amount [0-63]\">&lt;shift&gt;</a><text> MOD 64), #(63-</text><a link=\"sa_shift_3\" hover=\"Shift amount [0-63]\">&lt;shift&gt;</a><text>)</text></asmtemplate>"],"desc":"Logical Shift Left (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\" settings=\"5\" constraint=\"!= x11111\" psbits=\"xxxxxx\">\n          <c colspan=\"6\">!= x11111</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"lsl_lslv","asm":["<asmtemplate><text>LSL  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"lslv.xml#LSLV_32_dp_2src\">LSLV</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>LSL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>","<asmtemplate><a href=\"lslv.xml#LSLV_64_dp_2src\">LSLV</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Logical Shift Left (register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode2[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"lslv","asm":["<asmtemplate><text>LSLV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>LSLV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Logical Shift Left Variable","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode2[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"lsr_ubfm","asm":["<asmtemplate><text>LSR  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_shift\" hover=\"Shift amount [0-31] (field &quot;immr&quot;)\">&lt;shift&gt;</a></asmtemplate>","<asmtemplate><a href=\"ubfm.xml#UBFM_32M_bitfield\">UBFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_shift\" hover=\"Shift amount [0-31] (field &quot;immr&quot;)\">&lt;shift&gt;</a><text>, #31</text></asmtemplate>","<asmtemplate><text>LSR  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_shift_2\" hover=\"Shift amount [0-63] (field &quot;immr&quot;)\">&lt;shift&gt;</a></asmtemplate>","<asmtemplate><a href=\"ubfm.xml#UBFM_64M_bitfield\">UBFM</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_shift_2\" hover=\"Shift amount [0-63] (field &quot;immr&quot;)\">&lt;shift&gt;</a><text>, #63</text></asmtemplate>"],"desc":"Logical Shift Right (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\" settings=\"5\" psbits=\"xxxxxx\">\n          <c>x</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"lsr_lsrv","asm":["<asmtemplate><text>LSR  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"lsrv.xml#LSRV_32_dp_2src\">LSRV</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>LSR  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>","<asmtemplate><a href=\"lsrv.xml#LSRV_64_dp_2src\">LSRV</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Logical Shift Right (register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode2[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"lsrv","asm":["<asmtemplate><text>LSRV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>LSRV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Logical Shift Right Variable","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode2[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"madd","asm":["<asmtemplate><text>MADD  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, </text><a link=\"sa_wa\" hover=\"Third 32-bit general-purpose source register holding addend (field &quot;Ra&quot;)\">&lt;Wa&gt;</a></asmtemplate>","<asmtemplate><text>MADD  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>, </text><a link=\"sa_xa\" hover=\"Third 64-bit general-purpose source register holding addend (field &quot;Ra&quot;)\">&lt;Xa&gt;</a></asmtemplate>"],"desc":"Multiply-Add","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"op31\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"mneg_msub","asm":["<asmtemplate><text>MNEG  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"msub.xml#MSUB_32A_dp_3src\">MSUB</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, WZR</text></asmtemplate>","<asmtemplate><text>MNEG  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>","<asmtemplate><a href=\"msub.xml#MSUB_64A_dp_3src\">MSUB</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>, XZR</text></asmtemplate>"],"desc":"Multiply-Negate","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"op31\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"mov_orr_log_imm","asm":["<asmtemplate><text>MOV  </text><a link=\"sa_wd_wsp\" hover=\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\">&lt;Wd|WSP&gt;</a><text>, #</text><a link=\"sa_imm_2\" hover=\"Bitmask immediate (field &quot;imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><a href=\"orr_log_imm.xml#ORR_32_log_imm\">ORR</a><text> </text><a link=\"sa_wd_wsp\" hover=\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\">&lt;Wd|WSP&gt;</a><text>, WZR, #</text><a link=\"sa_imm_2\" hover=\"Bitmask immediate (field &quot;imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>MOV  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\">&lt;Xd|SP&gt;</a><text>, #</text><a link=\"sa_imm_3\" hover=\"Bitmask immediate (field &quot;N:imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><a href=\"orr_log_imm.xml#ORR_64_log_imm\">ORR</a><text> </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\">&lt;Xd|SP&gt;</a><text>, XZR, #</text><a link=\"sa_imm_3\" hover=\"Bitmask immediate (field &quot;N:imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Move (bitmask immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"mov_movn","asm":["<asmtemplate><text>MOV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"32-bit immediate, the bitwise inverse of which can be (field &quot;imm16:hw&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><a href=\"movn.xml#MOVN_32_movewide\">MOVN</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, #</text><a>&lt;imm16&gt;</a><text>, LSL #</text><a link=\"sa_shift\" hover=\"Amount by which to shift the immediate left (field &quot;hw&quot;)\">&lt;shift&gt;</a></asmtemplate>","<asmtemplate><text>MOV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, #</text><a link=\"sa_imm_2\" hover=\"64-bit immediate, the bitwise inverse of which can be (field &quot;imm16:hw&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><a href=\"movn.xml#MOVN_64_movewide\">MOVN</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, #</text><a>&lt;imm16&gt;</a><text>, LSL #</text><a link=\"sa_shift_1\" hover=\"Amount by which to shift the immediate left (field &quot;hw&quot;)\">&lt;shift&gt;</a></asmtemplate>"],"desc":"Move (inverted wide immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"hw\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"mov_orr_log_shift","asm":["<asmtemplate><text>MOV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"orr_log_shift.xml#ORR_32_log_shift\">ORR</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>MOV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>","<asmtemplate><a href=\"orr_log_shift.xml#ORR_64_log_shift\">ORR</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Move (register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\" settings=\"6\" psbits=\"xxxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"mov_add_addsub_imm","asm":["<asmtemplate><text>MOV  </text><a link=\"sa_wd_wsp\" hover=\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\"sa_wn_wsp\" hover=\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a></asmtemplate>","<asmtemplate><a href=\"add_addsub_imm.xml#ADD_32_addsub_imm\">ADD</a><text> </text><a link=\"sa_wd_wsp\" hover=\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\"sa_wn_wsp\" hover=\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, #0</text></asmtemplate>","<asmtemplate><text>MOV  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a></asmtemplate>","<asmtemplate><a href=\"add_addsub_imm.xml#ADD_64_addsub_imm\">ADD</a><text> </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #0</text></asmtemplate>"],"desc":"","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"sh\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" width=\"12\" name=\"imm12\" usename=\"1\" settings=\"12\" psbits=\"xxxxxxxxxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"mov_movz","asm":["<asmtemplate><text>MOV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"32-bit immediate which can be (field &quot;imm16:hw&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><a href=\"movz.xml#MOVZ_32_movewide\">MOVZ</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, #</text><a>&lt;imm16&gt;</a><text>, LSL #</text><a link=\"sa_shift\" hover=\"Amount by which to shift the immediate left (field &quot;hw&quot;)\">&lt;shift&gt;</a></asmtemplate>","<asmtemplate><text>MOV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, #</text><a link=\"sa_imm_2\" hover=\"64-bit immediate which can be (field &quot;imm16:hw&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><a href=\"movz.xml#MOVZ_64_movewide\">MOVZ</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, #</text><a>&lt;imm16&gt;</a><text>, LSL #</text><a link=\"sa_shift_1\" hover=\"Amount by which to shift the immediate left (field &quot;hw&quot;)\">&lt;shift&gt;</a></asmtemplate>"],"desc":"Move (wide immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"hw\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"movk","asm":["<asmtemplate><text>MOVK  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\"sa_shift\" hover=\"Amount by which to shift the immediate left (field &quot;hw&quot;)\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>MOVK  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\"sa_shift_1\" hover=\"Amount by which to shift the immediate left (field &quot;hw&quot;)\">&lt;shift&gt;</a><text>}</text></asmtemplate>"],"desc":"Move wide with keep","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"hw\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"movn","asm":["<asmtemplate><text>MOVN  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\"sa_shift\" hover=\"Amount by which to shift the immediate left (field &quot;hw&quot;)\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>MOVN  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\"sa_shift_1\" hover=\"Amount by which to shift the immediate left (field &quot;hw&quot;)\">&lt;shift&gt;</a><text>}</text></asmtemplate>"],"desc":"Move wide with NOT","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"hw\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"movz","asm":["<asmtemplate><text>MOVZ  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\"sa_shift\" hover=\"Amount by which to shift the immediate left (field &quot;hw&quot;)\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>MOVZ  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a><text>{</text><text>, LSL #</text><a link=\"sa_shift_1\" hover=\"Amount by which to shift the immediate left (field &quot;hw&quot;)\">&lt;shift&gt;</a><text>}</text></asmtemplate>"],"desc":"Move wide with zero","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"hw\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"mrs","asm":["<asmtemplate><text>MRS  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose destination register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, (</text><a link=\"sa_systemreg\" hover=\"System register name (field &quot;o0:op1:CRn:CRm:op2&quot;)\">&lt;systemreg&gt;</a><text>|S</text><a link=\"sa_op0\" hover=\"Unsigned immediate (field &quot;o0&quot;) [2,3]\">&lt;op0&gt;</a><text>_</text><a link=\"sa_op1\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\">&lt;op1&gt;</a><text>_</text><a link=\"sa_cn\" hover=\"Name 'Cn', with 'n' [0-15] (field &quot;CRn&quot;)\">&lt;Cn&gt;</a><text>_</text><a link=\"sa_cm\" hover=\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\">&lt;Cm&gt;</a><text>_</text><a link=\"sa_op2\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\">&lt;op2&gt;</a><text>)</text></asmtemplate>"],"desc":"Move System Register","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" name=\"op0[1]\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"19\" name=\"o0\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"msr_imm","asm":["<asmtemplate><text>MSR  </text><a link=\"sa_pstatefield\" hover=\"PSTATE field name (field &quot;op1:op2:CRm&quot;) [ALLINT (FEAT_NMI),DAIFClr,DAIFSet,DIT (FEAT_DIT),PAN (FEAT_PAN),SEE(pstate),SPSel,SSBS (FEAT_SSBS),TCO (FEAT_MTE),UAO (FEAT_UAO)]\">&lt;pstatefield&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"4-bit unsigned immediate [0-15] (field &quot;CRm&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Move immediate value to Special Register","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"msr_reg","asm":["<asmtemplate><text>MSR  (</text><a link=\"sa_systemreg\" hover=\"System register name (field &quot;o0:op1:CRn:CRm:op2&quot;)\">&lt;systemreg&gt;</a><text>|S</text><a link=\"sa_op0\" hover=\"Unsigned immediate (field &quot;o0&quot;) [2,3]\">&lt;op0&gt;</a><text>_</text><a link=\"sa_op1\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\">&lt;op1&gt;</a><text>_</text><a link=\"sa_cn\" hover=\"Name 'Cn', with 'n' [0-15] (field &quot;CRn&quot;)\">&lt;Cn&gt;</a><text>_</text><a link=\"sa_cm\" hover=\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\">&lt;Cm&gt;</a><text>_</text><a link=\"sa_op2\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\">&lt;op2&gt;</a><text>), </text><a link=\"sa_xt\" hover=\"64-bit general-purpose source register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a></asmtemplate>"],"desc":"Move general-purpose register to System Register","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" name=\"op0[1]\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"19\" name=\"o0\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"msub","asm":["<asmtemplate><text>MSUB  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, </text><a link=\"sa_wa\" hover=\"Third 32-bit general-purpose source register holding minuend (field &quot;Ra&quot;)\">&lt;Wa&gt;</a></asmtemplate>","<asmtemplate><text>MSUB  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>, </text><a link=\"sa_xa\" hover=\"Third 64-bit general-purpose source register holding minuend (field &quot;Ra&quot;)\">&lt;Xa&gt;</a></asmtemplate>"],"desc":"Multiply-Subtract","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"op31\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"mul_madd","asm":["<asmtemplate><text>MUL  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"madd.xml#MADD_32A_dp_3src\">MADD</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, WZR</text></asmtemplate>","<asmtemplate><text>MUL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>","<asmtemplate><a href=\"madd.xml#MADD_64A_dp_3src\">MADD</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>, XZR</text></asmtemplate>"],"desc":"","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"op31\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"mvn_orn_log_shift","asm":["<asmtemplate><text>MVN  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"orn_log_shift.xml#ORN_32_log_shift\">ORN</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>MVN  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"orn_log_shift.xml#ORN_64_log_shift\">ORN</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Bitwise NOT","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"neg_sub_addsub_shift","asm":["<asmtemplate><text>NEG  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"sub_addsub_shift.xml#SUB_32_addsub_shift\">SUB</a><text>  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>NEG  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"sub_addsub_shift.xml#SUB_64_addsub_shift\">SUB</a><text>  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Negate (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"negs_subs_addsub_shift","asm":["<asmtemplate><text>NEGS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"subs_addsub_shift.xml#SUBS_32_addsub_shift\">SUBS</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>NEGS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"subs_addsub_shift.xml#SUBS_64_addsub_shift\">SUBS</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text> </text><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Negate, setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\" settings=\"5\" constraint=\"!= 11111\" psbits=\"xxxxx\">\n          <c colspan=\"5\">!= 11111</c>\n        </box>"]},{"name":"ngc_sbc","asm":["<asmtemplate><text>NGC  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbc.xml#SBC_32_addsub_carry\">SBC</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>NGC  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbc.xml#SBC_64_addsub_carry\">SBC</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Negate with Carry","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ngcs_sbcs","asm":["<asmtemplate><text>NGCS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbcs.xml#SBCS_32_addsub_carry\">SBCS</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, WZR, </text><a link=\"sa_wm_1\" hover=\"32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>NGCS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbcs.xml#SBCS_64_addsub_carry\">SBCS</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, XZR, </text><a link=\"sa_xm_1\" hover=\"64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Negate with Carry, setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"nop","asm":["<asmtemplate><text>NOP</text></asmtemplate>"],"desc":"No Operation","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"orn_log_shift","asm":["<asmtemplate><text>ORN  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>ORN  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Bitwise OR NOT (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"orr_log_imm","asm":["<asmtemplate><text>ORR  </text><a link=\"sa_wd_wsp\" hover=\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Bitmask immediate (field &quot;imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>ORR  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"Bitmask immediate (field &quot;N:imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Bitwise OR (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"orr_log_shift","asm":["<asmtemplate><text>ORR  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>ORR  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Bitwise OR (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"pacda","asm":["<asmtemplate><text>PACDA  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a></asmtemplate>","<asmtemplate><text>PACDZA  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a></asmtemplate>"],"desc":"Pointer Authentication Code for Data address, using key A","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" name=\"opcode[5]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode[4]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"Z\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"opcode[2:0]\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"pacdb","asm":["<asmtemplate><text>PACDB  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a></asmtemplate>","<asmtemplate><text>PACDZB  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a></asmtemplate>"],"desc":"Pointer Authentication Code for Data address, using key B","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" name=\"opcode[5]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode[4]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"Z\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"opcode[2:0]\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"pacga","asm":["<asmtemplate><text>PACGA  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm_sp\" hover=\"Second 64-bit general-purpose source register or SP (field &quot;Rm&quot;)\">&lt;Xm|SP&gt;</a></asmtemplate>"],"desc":"Pointer Authentication Code, using Generic key","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"opcode2\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"pacia","asm":["<asmtemplate><text>PACIA  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a></asmtemplate>","<asmtemplate><text>PACIZA  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a></asmtemplate>","<asmtemplate><text>PACIA1716</text></asmtemplate>","<asmtemplate><text>PACIASP</text></asmtemplate>","<asmtemplate><text>PACIAZ</text></asmtemplate>"],"desc":"Pointer Authentication Code for Instruction address, using key A","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" name=\"opcode[5]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode[4]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"Z\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"opcode[2:0]\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"pacib","asm":["<asmtemplate><text>PACIB  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose source register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a></asmtemplate>","<asmtemplate><text>PACIZB  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a></asmtemplate>","<asmtemplate><text>PACIB1716</text></asmtemplate>","<asmtemplate><text>PACIBSP</text></asmtemplate>","<asmtemplate><text>PACIBZ</text></asmtemplate>"],"desc":"Pointer Authentication Code for Instruction address, using key B","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" name=\"opcode[5]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode[4]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"Z\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"opcode[2:0]\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"prfm_imm","asm":["<asmtemplate><text>PRFM  (</text><a link=\"sa_prfop\" hover=\"Prefetch operation, defined as {syntax{&lt;type&gt;&lt;target&gt;&lt;policy&gt;}} (field &quot;Rt&lt;4:3&gt;&quot;)\">&lt;prfop&gt;</a><text>|#</text><a link=\"sa_imm5\" hover=\"Prefetch operation encoding as an immediate [0-31] (field &quot;Rt&quot;)\">&lt;imm5&gt;</a><text>), [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset, multiple of 8 [0-32760], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Prefetch Memory (immediate)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" width=\"12\" name=\"imm12\" usename=\"1\">\n          <c colspan=\"12\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"prfm_lit","asm":["<asmtemplate><text>PRFM  (</text><a link=\"sa_prfop\" hover=\"Prefetch operation, defined as {syntax{&lt;type&gt;&lt;target&gt;&lt;policy&gt;}} (field &quot;Rt&lt;4:3&gt;&quot;)\">&lt;prfop&gt;</a><text>|#</text><a link=\"sa_imm5\" hover=\"Prefetch operation encoding as an immediate [0-31] (field &quot;Rt&quot;)\">&lt;imm5&gt;</a><text>), </text><a link=\"sa_label\" hover=\"Label from which the data is to be loaded (field imm19)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Prefetch Memory (literal)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"19\" name=\"imm19\" usename=\"1\">\n          <c colspan=\"19\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"prfm_reg","asm":["<asmtemplate><text>PRFM  (</text><a link=\"sa_prfop\" hover=\"Prefetch operation, defined as {syntax{&lt;type&gt;&lt;target&gt;&lt;policy&gt;}} (field &quot;Rt&lt;4:3&gt;&quot;)\">&lt;prfop&gt;</a><text>|#</text><a link=\"sa_imm5\" hover=\"Prefetch operation encoding as an immediate [0-31] (field &quot;Rt&quot;)\">&lt;imm5&gt;</a><text>), [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#3]\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>"],"desc":"Prefetch Memory (register)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" name=\"S\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"prfum","asm":["<asmtemplate><text>PRFUM (</text><a link=\"sa_prfop\" hover=\"Prefetch operation, defined as {syntax{&lt;type&gt;&lt;target&gt;&lt;policy&gt;}} (field &quot;Rt&lt;4:3&gt;&quot;)\">&lt;prfop&gt;</a><text>|#</text><a link=\"sa_imm5\" hover=\"Prefetch operation encoding as an immediate [0-31] (field &quot;Rt&quot;)\">&lt;imm5&gt;</a><text>), [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Prefetch Memory (unscaled offset)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"psb","asm":["<asmtemplate><text>PSB CSYNC</text></asmtemplate>"],"desc":"Profiling Synchronization Barrier","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"pssbb_dsb","asm":["<asmtemplate><text>PSSBB</text></asmtemplate>","<asmtemplate><a href=\"dsb.xml#DSB_BO_barriers\">DSB</a><text> #4</text></asmtemplate>"],"desc":"Physical Speculative Store Bypass Barrier","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" name=\"op2[2]\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"6\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"rbit_int","asm":["<asmtemplate><text>RBIT  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><text>RBIT  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>"],"desc":"Reverse Bits","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"opcode[1:0]\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ret","asm":["<asmtemplate><text>RET  </text><text>{</text><a link=\"sa_xn\" hover=\"64-bit general-purpose register holding address to be branched to (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>}</text></asmtemplate>"],"desc":"Return from subroutine","regdiagram":["<box hibit=\"31\" width=\"7\" settings=\"7\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"24\" name=\"Z\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"opc[2:1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"op2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op3[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"M\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rm\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>"]},{"name":"reta","asm":["<asmtemplate><text>RETAA</text></asmtemplate>","<asmtemplate><text>RETAB</text></asmtemplate>"],"desc":"Return from subroutine, with pointer authentication","regdiagram":["<box hibit=\"31\" width=\"7\" settings=\"7\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"24\" name=\"Z\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"opc[2:1]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"op2\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op3[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"10\" name=\"M\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rm\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"rev","asm":["<asmtemplate><text>REV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><text>REV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>"],"desc":"Reverse Bytes","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"rev16_int","asm":["<asmtemplate><text>REV16  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><text>REV16  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>"],"desc":"Reverse bytes in 16-bit halfwords","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"rev32_int","asm":["<asmtemplate><text>REV32  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>"],"desc":"Reverse bytes in 32-bit words","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"rev64_rev","asm":["<asmtemplate><text>REV64  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>","<asmtemplate><a href=\"rev.xml#REV_64_dp_1src\">REV</a><text>  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a></asmtemplate>"],"desc":"Reverse Bytes","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"rmif","asm":["<asmtemplate><text>RMIF  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_shift\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;shift&gt;</a><text>, #</text><a link=\"sa_mask\" hover=\"Flag bit mask, an immediate [0-15], which selects the bits that are inserted into the NZCV condition flags (field &quot;mask&quot;)\">&lt;mask&gt;</a></asmtemplate>"],"desc":"Rotate, Mask Insert Flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"14\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"3\" width=\"4\" name=\"mask\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>"]},{"name":"ror_extr","asm":["<asmtemplate><text>ROR  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_ws\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Ws&gt;</a><text>, #</text><a link=\"sa_shift\" hover=\"Amount by which to rotate [0-31] (field &quot;imms&quot;)\">&lt;shift&gt;</a></asmtemplate>","<asmtemplate><a href=\"extr.xml#EXTR_32_extract\">EXTR</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_ws\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_ws\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Ws&gt;</a><text>, #</text><a link=\"sa_shift\" hover=\"Amount by which to rotate [0-31] (field &quot;imms&quot;)\">&lt;shift&gt;</a></asmtemplate>","<asmtemplate><text>ROR  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xs&gt;</a><text>, #</text><a link=\"sa_shift_1\" hover=\"Amount by which to rotate [0-63] (field &quot;imms&quot;)\">&lt;shift&gt;</a></asmtemplate>","<asmtemplate><a href=\"extr.xml#EXTR_64_extract\">EXTR</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot; and &quot;Rm&quot;)\">&lt;Xs&gt;</a><text>, #</text><a link=\"sa_shift_1\" hover=\"Amount by which to rotate [0-63] (field &quot;imms&quot;)\">&lt;shift&gt;</a></asmtemplate>"],"desc":"Rotate right (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op21\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ror_rorv","asm":["<asmtemplate><text>ROR  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"rorv.xml#RORV_32_dp_2src\">RORV</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>ROR  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>","<asmtemplate><a href=\"rorv.xml#RORV_64_dp_2src\">RORV</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Rotate Right (register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode2[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"rorv","asm":["<asmtemplate><text>RORV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding a shift amount from 0 to 31 in its bottom 5 bits (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>RORV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding a shift amount from 0 to 63 in its bottom 6 bits (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Rotate Right Variable","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"opcode2[5:2]\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sb","asm":["<asmtemplate><text>SB</text></asmtemplate>"],"desc":"Speculation Barrier","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>(0)</c>\n          <c>(0)</c>\n          <c>(0)</c>\n          <c>(0)</c>\n        </box>","<box hibit=\"7\" name=\"op2[2]\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"6\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"sbc","asm":["<asmtemplate><text>SBC  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>SBC  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Subtract with Carry","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sbcs","asm":["<asmtemplate><text>SBCS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>SBCS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Subtract with Carry, setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sbfiz_sbfm","asm":["<asmtemplate><text>SBFIZ  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_lsb\" hover=\"Bit number of lsb of the destination bitfield [0-31]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbfm.xml#SBFM_32M_bitfield\">SBFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #(-</text><a link=\"sa_lsb\" hover=\"Bit number of lsb of the destination bitfield [0-31]\">&lt;lsb&gt;</a><text> MOD 32), #(</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>","<asmtemplate><text>SBFIZ  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_lsb_2\" hover=\"Bit number of lsb of the destination bitfield [0-63]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbfm.xml#SBFM_64M_bitfield\">SBFM</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #(-</text><a link=\"sa_lsb_2\" hover=\"Bit number of lsb of the destination bitfield [0-63]\">&lt;lsb&gt;</a><text> MOD 64), #(</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>"],"desc":"Signed Bitfield Insert in Zero","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sbfm","asm":["<asmtemplate><text>SBFM  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_immr\" hover=\"Right rotate amount [0-31] (field &quot;immr&quot;)\">&lt;immr&gt;</a><text>, #</text><a link=\"sa_imms\" hover=\"Leftmost bit number to be moved from the source [0-31] (field &quot;imms&quot;)\">&lt;imms&gt;</a></asmtemplate>","<asmtemplate><text>SBFM  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_immr_1\" hover=\"Right rotate amount [0-63] (field &quot;immr&quot;)\">&lt;immr&gt;</a><text>, #</text><a link=\"sa_imms_1\" hover=\"Leftmost bit number to be moved from the source [0-63] (field &quot;imms&quot;)\">&lt;imms&gt;</a></asmtemplate>"],"desc":"Signed Bitfield Move","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sbfx_sbfm","asm":["<asmtemplate><text>SBFX  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_lsb_1\" hover=\"Bit number of lsb of the source bitfield [0-31]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbfm.xml#SBFM_32M_bitfield\">SBFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_lsb_1\" hover=\"Bit number of lsb of the source bitfield [0-31]\">&lt;lsb&gt;</a><text>, #(</text><a link=\"sa_lsb_1\" hover=\"Bit number of lsb of the source bitfield [0-31]\">&lt;lsb&gt;</a><text>+</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>","<asmtemplate><text>SBFX  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_lsb_3\" hover=\"Bit number of lsb of the source bitfield [0-63]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbfm.xml#SBFM_64M_bitfield\">SBFM</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_lsb_3\" hover=\"Bit number of lsb of the source bitfield [0-63]\">&lt;lsb&gt;</a><text>, #(</text><a link=\"sa_lsb_3\" hover=\"Bit number of lsb of the source bitfield [0-63]\">&lt;lsb&gt;</a><text>+</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>"],"desc":"Signed Bitfield Extract","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sdiv","asm":["<asmtemplate><text>SDIV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>SDIV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Signed Divide","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"5\" name=\"opcode2[5:1]\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"10\" name=\"o1\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"setf","asm":["<asmtemplate><text>SETF8  </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><text>SETF16  </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>"],"desc":"Evaluation of 8 or 16 bit flag values","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"6\" name=\"opcode2\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"sz\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"13\" width=\"4\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"3\" width=\"4\" name=\"mask\" settings=\"4\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>"]},{"name":"setgp","asm":["<asmtemplate><text>SETGE  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETGM  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETGP  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>"],"desc":"Memory Set with tag setting","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xxxx\">\n          <c>x</c>\n          <c>x</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"setgpn","asm":["<asmtemplate><text>SETGEN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETGMN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETGPN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>"],"desc":"Memory Set with tag setting, non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xxxx\">\n          <c>x</c>\n          <c>x</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"setgpt","asm":["<asmtemplate><text>SETGET  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETGMT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETGPT  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>"],"desc":"Memory Set with tag setting, unprivileged","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xxxx\">\n          <c>x</c>\n          <c>x</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"setgptn","asm":["<asmtemplate><text>SETGETN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is set to zero at the end of the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs_1\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETGMTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETGPTN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds an encoding of destination address (an integer multiple of 16) and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be set (an integer multiple of 16) and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data in bits&lt;7:0&gt; (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>"],"desc":"Memory Set with tag setting, unprivileged and non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xxxx\">\n          <c>x</c>\n          <c>x</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"setp","asm":["<asmtemplate><text>SETE  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds the number of bytes to be set and is set to zero at the end of instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETM  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETP  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>"],"desc":"Memory Set","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xxxx\">\n          <c>x</c>\n          <c>x</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"setpn","asm":["<asmtemplate><text>SETEN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds the number of bytes to be set and is set to zero at the end of instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETMN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETPN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>"],"desc":"Memory Set, non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xxxx\">\n          <c>x</c>\n          <c>x</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"setpt","asm":["<asmtemplate><text>SETET  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds the number of bytes to be set and is set to zero at the end of instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETMT  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETPT  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>"],"desc":"Memory Set, unprivileged","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xxxx\">\n          <c>x</c>\n          <c>x</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"setptn","asm":["<asmtemplate><text>SETETN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_2\" hover=\"64-bit general-purpose register that holds the number of bytes to be set and is set to zero at the end of instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETMTN  [</text><a link=\"sa_xd_1\" hover=\"64-bit general-purpose register that holds an encoding of destination address and for option B is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn_1\" hover=\"64-bit general-purpose register that holds an encoding of number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>","<asmtemplate><text>SETPTN  [</text><a link=\"sa_xd\" hover=\"64-bit general-purpose register that holds the destination address and is updated by the instruction (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>]!, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose register that holds the number of bytes to be set and is updated by the instruction (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>!, </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register that holds the source data (field &quot;Rs&quot;)\">&lt;Xs&gt;</a></asmtemplate>"],"desc":"Memory Set, unprivileged and non-temporal","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"sz\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"op1\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"op2\" usename=\"1\" settings=\"2\" psbits=\"xxxx\">\n          <c>x</c>\n          <c>x</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sev","asm":["<asmtemplate><text>SEV</text></asmtemplate>"],"desc":"Send Event","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"sevl","asm":["<asmtemplate><text>SEVL</text></asmtemplate>"],"desc":"Send Event Local","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"smaddl","asm":["<asmtemplate><text>SMADDL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, </text><a link=\"sa_xa\" hover=\"Third 64-bit general-purpose source register holding addend (field &quot;Ra&quot;)\">&lt;Xa&gt;</a></asmtemplate>"],"desc":"Signed Multiply-Add Long","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"U\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op31[1:0]\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"smc","asm":["<asmtemplate><text>SMC  #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Secure Monitor Call","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"1\" width=\"2\" name=\"LL\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"smnegl_smsubl","asm":["<asmtemplate><text>SMNEGL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"smsubl.xml#SMSUBL_64WA_dp_3src\">SMSUBL</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, XZR</text></asmtemplate>"],"desc":"Signed Multiply-Negate Long","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"U\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op31[1:0]\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"smsubl","asm":["<asmtemplate><text>SMSUBL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, </text><a link=\"sa_xa\" hover=\"Third 64-bit general-purpose source register holding minuend (field &quot;Ra&quot;)\">&lt;Xa&gt;</a></asmtemplate>"],"desc":"Signed Multiply-Subtract Long","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"U\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op31[1:0]\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"smulh","asm":["<asmtemplate><text>SMULH  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Signed Multiply High","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"U\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op31[1:0]\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"smull_smaddl","asm":["<asmtemplate><text>SMULL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"smaddl.xml#SMADDL_64WA_dp_3src\">SMADDL</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, XZR</text></asmtemplate>"],"desc":"Signed Multiply Long","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"U\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op31[1:0]\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ssbb_dsb","asm":["<asmtemplate><text>SSBB</text></asmtemplate>","<asmtemplate><a href=\"dsb.xml#DSB_BO_barriers\">DSB</a><text> #0</text></asmtemplate>"],"desc":"Speculative Store Bypass Barrier","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" name=\"op2[2]\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"6\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"st2g","asm":["<asmtemplate><text>ST2G  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>ST2G  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>ST2G  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Allocation Tags","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"opc&lt;1&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"opc&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" name=\"op2&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"op2&lt;0&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"st64b","asm":["<asmtemplate><text>ST64B  </text><a link=\"sa_xt\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text> {,#0}</text><text>]</text></asmtemplate>"],"desc":"Single-copy Atomic 64-byte Store without Return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"st64bv","asm":["<asmtemplate><text>ST64BV  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register into which the status result of this instruction is written (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Single-copy Atomic 64-byte Store with Return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"st64bv0","asm":["<asmtemplate><text>ST64BV0  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register into which the status result of this instruction is written (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Single-copy Atomic 64-byte EL0 Store with Return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" settings=\"2\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stadd_ldadd","asm":["<asmtemplate><text>STADD  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldadd.xml#LDADD_32_memop\">LDADD</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STADDL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldadd.xml#LDADDL_32_memop\">LDADDL</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STADD  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldadd.xml#LDADD_64_memop\">LDADD</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STADDL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldadd.xml#LDADDL_64_memop\">LDADDL</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic add on word or doubleword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"staddb_ldaddb","asm":["<asmtemplate><text>STADDB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldaddb.xml#LDADDB_32_memop\">LDADDB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STADDLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldaddb.xml#LDADDLB_32_memop\">LDADDLB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic add on byte in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"staddh_ldaddh","asm":["<asmtemplate><text>STADDH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldaddh.xml#LDADDH_32_memop\">LDADDH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STADDLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldaddh.xml#LDADDLH_32_memop\">LDADDLH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic add on halfword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stclr_ldclr","asm":["<asmtemplate><text>STCLR  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldclr.xml#LDCLR_32_memop\">LDCLR</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STCLRL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldclr.xml#LDCLRL_32_memop\">LDCLRL</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STCLR  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldclr.xml#LDCLR_64_memop\">LDCLR</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STCLRL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldclr.xml#LDCLRL_64_memop\">LDCLRL</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit clear on word or doubleword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stclrb_ldclrb","asm":["<asmtemplate><text>STCLRB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldclrb.xml#LDCLRB_32_memop\">LDCLRB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STCLRLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldclrb.xml#LDCLRLB_32_memop\">LDCLRLB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit clear on byte in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stclrh_ldclrh","asm":["<asmtemplate><text>STCLRH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldclrh.xml#LDCLRH_32_memop\">LDCLRH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STCLRLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldclrh.xml#LDCLRLH_32_memop\">LDCLRLH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit clear on halfword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"steor_ldeor","asm":["<asmtemplate><text>STEOR  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldeor.xml#LDEOR_32_memop\">LDEOR</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STEORL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldeor.xml#LDEORL_32_memop\">LDEORL</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STEOR  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldeor.xml#LDEOR_64_memop\">LDEOR</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STEORL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldeor.xml#LDEORL_64_memop\">LDEORL</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic exclusive OR on word or doubleword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"steorb_ldeorb","asm":["<asmtemplate><text>STEORB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldeorb.xml#LDEORB_32_memop\">LDEORB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STEORLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldeorb.xml#LDEORLB_32_memop\">LDEORLB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic exclusive OR on byte in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"steorh_ldeorh","asm":["<asmtemplate><text>STEORH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldeorh.xml#LDEORH_32_memop\">LDEORH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STEORLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldeorh.xml#LDEORLH_32_memop\">LDEORLH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic exclusive OR on halfword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stg","asm":["<asmtemplate><text>STG  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>STG  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>STG  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Allocation Tag","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"opc&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"opc&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" name=\"op2&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"op2&lt;0&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stgm","asm":["<asmtemplate><text>STGM  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Store Tag Multiple","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"opc&lt;1&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"opc&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" name=\"imm9&lt;8&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"19\" name=\"imm9&lt;7&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"18\" name=\"imm9&lt;6&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"17\" name=\"imm9&lt;5&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"16\" name=\"imm9&lt;4&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"15\" name=\"imm9&lt;3&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"imm9&lt;2&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"imm9&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"12\" name=\"imm9&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"op2&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"op2&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stgp","asm":["<asmtemplate><text>STGP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Xt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_imm_1\" hover=\"Signed immediate offset, multiple of 16 [-1024-1008] (field &quot;simm7&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>STGP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Xt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"Signed immediate offset, multiple of 16 [-1024-1008] (field &quot;simm7&quot;)\">&lt;imm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>STGP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Xt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_imm\" hover=\"Optional signed immediate offset, multiple of 16 [-1024-1008], default 0 (field &quot;simm7&quot;)\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Allocation Tag and Pair of registers","regdiagram":["<box hibit=\"31\" name=\"opc&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"30\" name=\"opc&lt;0&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" width=\"7\" name=\"simm7\" usename=\"1\">\n          <c colspan=\"7\"></c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Xt2\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stllr","asm":["<asmtemplate><text>STLLR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>STLLR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store LORelease Register","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stllrb","asm":["<asmtemplate><text>STLLRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store LORelease Register Byte","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stllrh","asm":["<asmtemplate><text>STLLRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store LORelease Register Halfword","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stlr","asm":["<asmtemplate><text>STLR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>STLR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store-Release Register","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stlrb","asm":["<asmtemplate><text>STLRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store-Release Register Byte","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stlrh","asm":["<asmtemplate><text>STLRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store-Release Register Halfword","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stlur_gen","asm":["<asmtemplate><text>STLUR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>STLUR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store-Release Register (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stlurb","asm":["<asmtemplate><text>STLURB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store-Release Register Byte (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stlurh","asm":["<asmtemplate><text>STLURH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store-Release Register Halfword (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stlxp","asm":["<asmtemplate><text>STLXP  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>STLXP  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store-Release Exclusive Pair of registers","regdiagram":["<box hibit=\"31\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" name=\"sz\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stlxr","asm":["<asmtemplate><text>STLXR  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>STLXR  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store-Release Exclusive Register","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stlxrb","asm":["<asmtemplate><text>STLXRB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store-Release Exclusive Register Byte","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stlxrh","asm":["<asmtemplate><text>STLXRH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store-Release Exclusive Register Halfword","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stnp_gen","asm":["<asmtemplate><text>STNP  </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_imm\" hover=\"Optional signed immediate byte offset, multiple of 4 [-256-252], default 0 (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>STNP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_imm_1\" hover=\"Optional signed immediate byte offset, multiple of 8 [-512-504], default 0 (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Pair of Registers, with non-temporal hint","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>x</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" width=\"7\" name=\"imm7\" usename=\"1\">\n          <c colspan=\"7\"></c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stp_gen","asm":["<asmtemplate><text>STP  </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_imm_1\" hover=\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>STP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_imm_3\" hover=\"Signed immediate byte offset, multiple of 8 [-512-504] (field &quot;imm7&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>STP  </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"Signed immediate byte offset, multiple of 4 [-256-252] (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>STP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm_3\" hover=\"Signed immediate byte offset, multiple of 8 [-512-504] (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>STP  </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_imm\" hover=\"Optional signed immediate byte offset, multiple of 4 [-256-252], default 0 (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>STP  </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_imm_2\" hover=\"Optional signed immediate byte offset, multiple of 8 [-512-504], default 0 (field &quot;imm7&quot;)\">&lt;imm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Pair of Registers","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>x</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"3\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" width=\"7\" name=\"imm7\" usename=\"1\">\n          <c colspan=\"7\"></c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"str_imm_gen","asm":["<asmtemplate><text>STR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>STR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>STR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>STR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>STR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset, multiple of 4 [0-16380], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>STR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm_1\" hover=\"Optional positive immediate byte offset, multiple of 8 [0-32760], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register (immediate)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"str_reg_gen","asm":["<asmtemplate><text>STR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#2]\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>STR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount_1\" hover=\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#3]\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register (register)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" name=\"S\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"strb_imm","asm":["<asmtemplate><text>STRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>STRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>STRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset [0-4095], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register Byte (immediate)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"strb_reg","asm":["<asmtemplate><text>STRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>), </text><a link=\"sa_extend\" hover=\"Index extend specifier (field &quot;option&quot;) [SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>STRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, LSL </text><a link=\"sa_amount\" hover=\"Index shift amount, it must be {value{#0}} (field &quot;S&quot;)\">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register Byte (register)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" name=\"S\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"strh_imm","asm":["<asmtemplate><text>STRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>STRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Signed immediate byte offset [-256-255] (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>STRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_pimm\" hover=\"Optional positive immediate byte offset, multiple of 2 [0-8190], default 0 (field &quot;imm12&quot;)\">&lt;pimm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register Halfword (immediate)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"strh_reg","asm":["<asmtemplate><text>STRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, (</text><a link=\"sa_wm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>|</text><a link=\"sa_xm\" hover=\"When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>)</text><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Index extend/shift specifier, default LSL, and which must be omitted for LSL option when &lt;amount&gt; is omitted (field &quot;option&quot;) [LSL,SXTW,SXTX,UXTW]\">&lt;extend&gt;</a><text> </text><text>{</text><a link=\"sa_amount\" hover=\"Index shift amount, optional when &lt;extend&gt; is not LSL (field &quot;S&quot;) [#0,#1]\">&lt;amount&gt;</a><text>}</text><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register Halfword (register)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" name=\"S\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stset_ldset","asm":["<asmtemplate><text>STSET  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldset.xml#LDSET_32_memop\">LDSET</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSETL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldset.xml#LDSETL_32_memop\">LDSETL</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSET  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldset.xml#LDSET_64_memop\">LDSET</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSETL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldset.xml#LDSETL_64_memop\">LDSETL</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit set on word or doubleword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stsetb_ldsetb","asm":["<asmtemplate><text>STSETB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsetb.xml#LDSETB_32_memop\">LDSETB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSETLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsetb.xml#LDSETLB_32_memop\">LDSETLB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit set on byte in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stseth_ldseth","asm":["<asmtemplate><text>STSETH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldseth.xml#LDSETH_32_memop\">LDSETH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSETLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldseth.xml#LDSETLH_32_memop\">LDSETLH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic bit set on halfword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stsmax_ldsmax","asm":["<asmtemplate><text>STSMAX  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmax.xml#LDSMAX_32_memop\">LDSMAX</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSMAXL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmax.xml#LDSMAXL_32_memop\">LDSMAXL</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSMAX  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmax.xml#LDSMAX_64_memop\">LDSMAX</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSMAXL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmax.xml#LDSMAXL_64_memop\">LDSMAXL</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed maximum on word or doubleword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stsmaxb_ldsmaxb","asm":["<asmtemplate><text>STSMAXB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmaxb.xml#LDSMAXB_32_memop\">LDSMAXB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSMAXLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmaxb.xml#LDSMAXLB_32_memop\">LDSMAXLB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed maximum on byte in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stsmaxh_ldsmaxh","asm":["<asmtemplate><text>STSMAXH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmaxh.xml#LDSMAXH_32_memop\">LDSMAXH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSMAXLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmaxh.xml#LDSMAXLH_32_memop\">LDSMAXLH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed maximum on halfword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stsmin_ldsmin","asm":["<asmtemplate><text>STSMIN  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmin.xml#LDSMIN_32_memop\">LDSMIN</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSMINL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmin.xml#LDSMINL_32_memop\">LDSMINL</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSMIN  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmin.xml#LDSMIN_64_memop\">LDSMIN</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSMINL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsmin.xml#LDSMINL_64_memop\">LDSMINL</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed minimum on word or doubleword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stsminb_ldsminb","asm":["<asmtemplate><text>STSMINB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsminb.xml#LDSMINB_32_memop\">LDSMINB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSMINLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsminb.xml#LDSMINLB_32_memop\">LDSMINLB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed minimum on byte in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stsminh_ldsminh","asm":["<asmtemplate><text>STSMINH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsminh.xml#LDSMINH_32_memop\">LDSMINH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STSMINLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldsminh.xml#LDSMINLH_32_memop\">LDSMINLH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic signed minimum on halfword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"sttr","asm":["<asmtemplate><text>STTR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>STTR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register (unprivileged)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sttrb","asm":["<asmtemplate><text>STTRB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register Byte (unprivileged)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sttrh","asm":["<asmtemplate><text>STTRH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register Halfword (unprivileged)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stumax_ldumax","asm":["<asmtemplate><text>STUMAX  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumax.xml#LDUMAX_32_memop\">LDUMAX</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STUMAXL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumax.xml#LDUMAXL_32_memop\">LDUMAXL</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STUMAX  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumax.xml#LDUMAX_64_memop\">LDUMAX</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STUMAXL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumax.xml#LDUMAXL_64_memop\">LDUMAXL</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned maximum on word or doubleword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stumaxb_ldumaxb","asm":["<asmtemplate><text>STUMAXB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumaxb.xml#LDUMAXB_32_memop\">LDUMAXB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STUMAXLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumaxb.xml#LDUMAXLB_32_memop\">LDUMAXLB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned maximum on byte in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stumaxh_ldumaxh","asm":["<asmtemplate><text>STUMAXH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumaxh.xml#LDUMAXH_32_memop\">LDUMAXH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STUMAXLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumaxh.xml#LDUMAXLH_32_memop\">LDUMAXLH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned maximum on halfword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stumin_ldumin","asm":["<asmtemplate><text>STUMIN  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumin.xml#LDUMIN_32_memop\">LDUMIN</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STUMINL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumin.xml#LDUMINL_32_memop\">LDUMINL</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STUMIN  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumin.xml#LDUMIN_64_memop\">LDUMIN</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STUMINL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"ldumin.xml#LDUMINL_64_memop\">LDUMINL</a><text> </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, XZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned minimum on word or doubleword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stuminb_lduminb","asm":["<asmtemplate><text>STUMINB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"lduminb.xml#LDUMINB_32_memop\">LDUMINB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STUMINLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"lduminb.xml#LDUMINLB_32_memop\">LDUMINLB</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned minimum on byte in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stuminh_lduminh","asm":["<asmtemplate><text>STUMINH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"lduminh.xml#LDUMINH_32_memop\">LDUMINH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>STUMINLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><a href=\"lduminh.xml#LDUMINLH_32_memop\">LDUMINLH</a><text> </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register holding data value to be operated on with the contents of memory location (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, WZR, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Atomic unsigned minimum on halfword in memory, without return","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"stur_gen","asm":["<asmtemplate><text>STUR  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>","<asmtemplate><text>STUR  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sturb","asm":["<asmtemplate><text>STURB  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register Byte (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sturh","asm":["<asmtemplate><text>STURH  </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate byte offset [-256-255], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Register Halfword (unscaled)","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stxp","asm":["<asmtemplate><text>STXP  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt1\" hover=\"First 32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt1&gt;</a><text>, </text><a link=\"sa_wt2\" hover=\"Second 32-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Wt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>STXP  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_xt1\" hover=\"First 64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt1&gt;</a><text>, </text><a link=\"sa_xt2\" hover=\"Second 64-bit general-purpose register to be transferred (field &quot;Rt2&quot;)\">&lt;Xt2&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store Exclusive Pair of registers","regdiagram":["<box hibit=\"31\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" name=\"sz\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stxr","asm":["<asmtemplate><text>STXR  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>","<asmtemplate><text>STXR  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store Exclusive Register","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stxrb","asm":["<asmtemplate><text>STXRB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store Exclusive Register Byte","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stxrh","asm":["<asmtemplate><text>STXRH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register into which the status result of store exclusive is written (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be transferred (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>{,#0}</text><text>]</text></asmtemplate>"],"desc":"Store Exclusive Register Halfword","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"o1\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Rt2\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stz2g","asm":["<asmtemplate><text>STZ2G  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>STZ2G  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>STZ2G  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Allocation Tags, Zeroing","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"opc&lt;1&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"opc&lt;0&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" name=\"op2&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"op2&lt;0&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stzg","asm":["<asmtemplate><text>STZG  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>], #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a></asmtemplate>","<asmtemplate><text>STZG  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>]!</text></asmtemplate>","<asmtemplate><text>STZG  </text><a link=\"sa_xt_sp\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt|SP&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>{</text><text>, #</text><a link=\"sa_simm\" hover=\"Optional signed immediate offset, multiple of 16 [-4096-4080], default 0 (field &quot;imm9&quot;)\">&lt;simm&gt;</a><text>}</text><text>]</text></asmtemplate>"],"desc":"Store Allocation Tag, Zeroing","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"opc&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"opc&lt;0&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"9\" name=\"imm9\" usename=\"1\">\n          <c colspan=\"9\"></c>\n        </box>","<box hibit=\"11\" name=\"op2&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"op2&lt;0&gt;\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"stzgm","asm":["<asmtemplate><text>STZGM  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be transferred (field &quot;Xt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Store Tag and Zero Multiple","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"opc&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"opc&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" name=\"imm9&lt;8&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"19\" name=\"imm9&lt;7&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"18\" name=\"imm9&lt;6&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"17\" name=\"imm9&lt;5&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"16\" name=\"imm9&lt;4&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"15\" name=\"imm9&lt;3&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"imm9&lt;2&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"imm9&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"12\" name=\"imm9&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"op2&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"op2&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sub_addsub_ext","asm":["<asmtemplate><text>SUB  </text><a link=\"sa_wd_wsp\" hover=\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\"sa_wn_wsp\" hover=\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>","<asmtemplate><text>SUB  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_r\" hover=\"Width specifier (field &quot;option&quot;) [W,X]\">&lt;R&gt;</a><a link=\"sa_m\" hover=\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\"sa_extend_1\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>"],"desc":"Subtract (extended register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opt\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"imm3\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sub_addsub_imm","asm":["<asmtemplate><text>SUB  </text><a link=\"sa_wd_wsp\" hover=\"32-bit destination general-purpose register or WSP (field &quot;Rd&quot;)\">&lt;Wd|WSP&gt;</a><text>, </text><a link=\"sa_wn_wsp\" hover=\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>SUB  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Rd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>"],"desc":"Subtract (immediate)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"sh\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"12\" name=\"imm12\" usename=\"1\">\n          <c colspan=\"12\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sub_addsub_shift","asm":["<asmtemplate><text>SUB  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>SUB  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Subtract (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"subg","asm":["<asmtemplate><text>SUBG  </text><a link=\"sa_xd_sp\" hover=\"64-bit destination general-purpose register or SP (field &quot;Xd&quot;)\">&lt;Xd|SP&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_uimm6\" hover=\"Unsigned immediate, multiple of 16 [0-1008] (field &quot;uimm6&quot;)\">&lt;uimm6&gt;</a><text>, #</text><a link=\"sa_uimm4\" hover=\"Unsigned immediate [0-15] (field &quot;uimm4&quot;)\">&lt;uimm4&gt;</a></asmtemplate>"],"desc":"Subtract with Tag","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"22\" name=\"o2\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"uimm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"2\" name=\"op3\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>(0)</c>\n          <c>(0)</c>\n        </box>","<box hibit=\"13\" width=\"4\" name=\"uimm4\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"subp","asm":["<asmtemplate><text>SUBP  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Xd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_xm_sp\" hover=\"Second 64-bit general-purpose source register or SP (field &quot;Xm&quot;)\">&lt;Xm|SP&gt;</a></asmtemplate>"],"desc":"Subtract Pointer","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Xm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"opcode&lt;5&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode&lt;4&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"opcode&lt;3&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"12\" name=\"opcode&lt;2&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"opcode&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"opcode&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"subps","asm":["<asmtemplate><text>SUBPS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Xd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Xn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_xm_sp\" hover=\"Second 64-bit general-purpose source register or SP (field &quot;Xm&quot;)\">&lt;Xm|SP&gt;</a></asmtemplate>"],"desc":"Subtract Pointer, setting Flags","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Xm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"opcode&lt;5&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode&lt;4&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"13\" name=\"opcode&lt;3&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"12\" name=\"opcode&lt;2&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"11\" name=\"opcode&lt;1&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"opcode&lt;0&gt;\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Xn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Xd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"subs_addsub_ext","asm":["<asmtemplate><text>SUBS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn_wsp\" hover=\"First 32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_extend\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>","<asmtemplate><text>SUBS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"First 64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, </text><a link=\"sa_r\" hover=\"Width specifier (field &quot;option&quot;) [W,X]\">&lt;R&gt;</a><a link=\"sa_m\" hover=\"Second general-purpose source register number [0-30] or ZR (31) (field &quot;Rm&quot;)\">&lt;m&gt;</a><text>{</text><text>, </text><a link=\"sa_extend_1\" hover=\"Extension applied to second source operand (field &quot;option&quot;) [LSL,SXTB,SXTH,SXTW,SXTX,UXTB,UXTH,UXTW,UXTX]\">&lt;extend&gt;</a><text> </text><text>{</text><text>#</text><a link=\"sa_amount\" hover=\"Left shift amount applied after extension [0-4], default 0 (field &quot;imm3&quot;)\">&lt;amount&gt;</a><text>}</text><text>}</text></asmtemplate>"],"desc":"Subtract (extended register), setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"opt\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"3\" name=\"option\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"12\" width=\"3\" name=\"imm3\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"subs_addsub_imm","asm":["<asmtemplate><text>SUBS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn_wsp\" hover=\"32-bit source general-purpose register or WSP (field &quot;Rn&quot;)\">&lt;Wn|WSP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>SUBS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn_sp\" hover=\"64-bit source general-purpose register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Unsigned immediate [0-4095] (field &quot;imm12&quot;)\">&lt;imm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional left shift to apply to the immediate, default LSL #0 (field &quot;sh&quot;) [LSL #0,LSL #12]\">&lt;shift&gt;</a><text>}</text></asmtemplate>"],"desc":"Subtract (immediate), setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"sh\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"12\" name=\"imm12\" usename=\"1\">\n          <c colspan=\"12\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"subs_addsub_shift","asm":["<asmtemplate><text>SUBS  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>SUBS  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift type applied to second source operand, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Subtract (shifted register), setting flags","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"svc","asm":["<asmtemplate><text>SVC  #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Supervisor Call","regdiagram":["<box hibit=\"31\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>","<box hibit=\"4\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"1\" width=\"2\" name=\"LL\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>"]},{"name":"swp","asm":["<asmtemplate><text>SWP  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPA  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPAL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPL  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWP  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPA  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPAL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPL  </text><a link=\"sa_xs\" hover=\"64-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Xs&gt;</a><text>, </text><a link=\"sa_xt\" hover=\"64-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Swap word or doubleword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"1\" psbits=\"xx\">\n          <c>1</c>\n          <c>x</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"swpb","asm":["<asmtemplate><text>SWPAB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPALB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPLB  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Swap byte in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"swph","asm":["<asmtemplate><text>SWPAH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPALH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>","<asmtemplate><text>SWPLH  </text><a link=\"sa_ws\" hover=\"32-bit general-purpose register to be stored (field &quot;Rs&quot;)\">&lt;Ws&gt;</a><text>, </text><a link=\"sa_wt\" hover=\"32-bit general-purpose register to be loaded (field &quot;Rt&quot;)\">&lt;Wt&gt;</a><text>, [</text><a link=\"sa_xn_sp\" hover=\"64-bit general-purpose base register or SP (field &quot;Rn&quot;)\">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>"],"desc":"Swap halfword in memory","regdiagram":["<box hibit=\"31\" width=\"2\" name=\"size\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"29\" width=\"3\" settings=\"3\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"26\" name=\"V\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"25\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" name=\"A\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"22\" name=\"R\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rs\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o3\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"3\" name=\"opc\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"2\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sxtb_sbfm","asm":["<asmtemplate><text>SXTB  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbfm.xml#SBFM_32M_bitfield\">SBFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #0, #7</text></asmtemplate>","<asmtemplate><text>SXTB  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbfm.xml#SBFM_64M_bitfield\">SBFM</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #0, #7</text></asmtemplate>"],"desc":"Signed Extend Byte","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\" settings=\"6\" psbits=\"xxxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\" settings=\"6\" psbits=\"xxxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sxth_sbfm","asm":["<asmtemplate><text>SXTH  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbfm.xml#SBFM_32M_bitfield\">SBFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #0, #15</text></asmtemplate>","<asmtemplate><text>SXTH  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbfm.xml#SBFM_64M_bitfield\">SBFM</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #0, #15</text></asmtemplate>"],"desc":"Sign Extend Halfword","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\" settings=\"6\" psbits=\"xxxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\" settings=\"6\" psbits=\"xxxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sxtw_sbfm","asm":["<asmtemplate><text>SXTW  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><a href=\"sbfm.xml#SBFM_64M_bitfield\">SBFM</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #0, #31</text></asmtemplate>"],"desc":"Sign Extend Word","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\" settings=\"6\" psbits=\"xxxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\" settings=\"6\" psbits=\"xxxxxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sys","asm":["<asmtemplate><text>SYS  #</text><a link=\"sa_op1\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\">&lt;op1&gt;</a><text>, </text><a link=\"sa_cn\" hover=\"Name 'Cn', with 'n' [0-15] (field &quot;CRn&quot;)\">&lt;Cn&gt;</a><text>, </text><a link=\"sa_cm\" hover=\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\">&lt;Cm&gt;</a><text>, #</text><a link=\"sa_op2\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\">&lt;op2&gt;</a><text>{</text><text>, </text><a link=\"sa_xt\" hover=\"64-bit optional general-purpose source register, default '11111' (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>}</text></asmtemplate>"],"desc":"System instruction","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"sysl","asm":["<asmtemplate><text>SYSL  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose destination register (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>, #</text><a link=\"sa_op1\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\">&lt;op1&gt;</a><text>, </text><a link=\"sa_cn\" hover=\"Name 'Cn', with 'n' [0-15] (field &quot;CRn&quot;)\">&lt;Cn&gt;</a><text>, </text><a link=\"sa_cm\" hover=\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\">&lt;Cm&gt;</a><text>, #</text><a link=\"sa_op2\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\">&lt;op2&gt;</a></asmtemplate>"],"desc":"System instruction with result","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"tbnz","asm":["<asmtemplate><text>TBNZ  </text><a link=\"sa_r\" hover=\"Width specifier (field &quot;b5&quot;) [W,X]\">&lt;R&gt;</a><a link=\"sa_t\" hover=\"General-purpose register number [0-30] to be tested or ZR (31) (field &quot;Rt&quot;)\">&lt;t&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Bit number to be tested [0-63] (field &quot;b5:b40&quot;)\">&lt;imm&gt;</a><text>, </text><a link=\"sa_label\" hover=\"Label to be conditionally branched to (field imm14)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Test bit and Branch if Nonzero","regdiagram":["<box hibit=\"31\" name=\"b5\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"24\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"23\" width=\"5\" name=\"b40\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"18\" width=\"14\" name=\"imm14\" usename=\"1\">\n          <c colspan=\"14\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"tbz","asm":["<asmtemplate><text>TBZ  </text><a link=\"sa_r\" hover=\"Width specifier (field &quot;b5&quot;) [W,X]\">&lt;R&gt;</a><a link=\"sa_t\" hover=\"General-purpose register number [0-30] to be tested or ZR (31) (field &quot;Rt&quot;)\">&lt;t&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Bit number to be tested [0-63] (field &quot;b5:b40&quot;)\">&lt;imm&gt;</a><text>, </text><a link=\"sa_label\" hover=\"Label to be conditionally branched to (field imm14)\">&lt;label&gt;</a></asmtemplate>"],"desc":"Test bit and Branch if Zero","regdiagram":["<box hibit=\"31\" name=\"b5\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"6\" settings=\"6\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"24\" name=\"op\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"5\" name=\"b40\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"18\" width=\"14\" name=\"imm14\" usename=\"1\">\n          <c colspan=\"14\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"tlbi_sys","asm":["<asmtemplate><text>TLBI  </text><a link=\"sa_tlbi_op\" hover=\"TLBI instruction name, as listed for TLBI system instruction group (field &quot;op1:CRm:op2&quot;) [ALLE1,ALLE1IS,ALLE1OS (FEAT_TLBIOS),ALLE2,ALLE2IS,ALLE2OS (FEAT_TLBIOS),ALLE3,ALLE3IS,ALLE3OS (FEAT_TLBIOS),ASIDE1,ASIDE1IS,ASIDE1OS (FEAT_TLBIOS),IPAS2E1,IPAS2E1IS,IPAS2E1OS (FEAT_TLBIOS),IPAS2LE1,IPAS2LE1IS,IPAS2LE1OS (FEAT_TLBIOS),RIPAS2E1 (FEAT_TLBIRANGE),RIPAS2E1IS (FEAT_TLBIRANGE),RIPAS2E1OS (FEAT_TLBIRANGE),RIPAS2LE1 (FEAT_TLBIRANGE),RIPAS2LE1IS (FEAT_TLBIRANGE),RIPAS2LE1OS (FEAT_TLBIRANGE),RVAAE1 (FEAT_TLBIRANGE),RVAAE1IS (FEAT_TLBIRANGE),RVAAE1OS (FEAT_TLBIRANGE),RVAALE1 (FEAT_TLBIRANGE),RVAALE1IS (FEAT_TLBIRANGE),RVAALE1OS (FEAT_TLBIRANGE),RVAE1 (FEAT_TLBIRANGE),RVAE1IS (FEAT_TLBIRANGE),RVAE1OS (FEAT_TLBIRANGE),RVAE2 (FEAT_TLBIRANGE),RVAE2IS (FEAT_TLBIRANGE),RVAE2OS (FEAT_TLBIRANGE),RVAE3 (FEAT_TLBIRANGE),RVAE3IS (FEAT_TLBIRANGE),RVAE3OS (FEAT_TLBIRANGE),RVALE1 (FEAT_TLBIRANGE),RVALE1IS (FEAT_TLBIRANGE),RVALE1OS  (FEAT_TLBIRANGE),RVALE2 (FEAT_TLBIRANGE),RVALE2IS (FEAT_TLBIRANGE),RVALE2OS (FEAT_TLBIRANGE),RVALE3 (FEAT_TLBIRANGE),RVALE3IS (FEAT_TLBIRANGE),RVALE3OS (FEAT_TLBIRANGE),VAAE1,VAAE1IS,VAAE1OS (FEAT_TLBIOS),VAALE1,VAALE1IS,VAALE1OS (FEAT_TLBIOS),VAE1,VAE1IS,VAE1OS (FEAT_TLBIOS),VAE2,VAE2IS,VAE2OS (FEAT_TLBIOS),VAE3,VAE3IS,VAE3OS (FEAT_TLBIOS),VALE1,VALE1IS,VALE1OS (FEAT_TLBIOS),VALE2,VALE2IS,VALE2OS (FEAT_TLBIOS),VALE3,VALE3IS,VALE3OS (FEAT_TLBIOS),VMALLE1,VMALLE1IS,VMALLE1OS (FEAT_TLBIOS),VMALLS12E1,VMALLS12E1IS,VMALLS12E1OS (FEAT_TLBIOS)]\">&lt;tlbi_op&gt;</a><text>{</text><text>, </text><a link=\"sa_xt\" hover=\"64-bit optional general-purpose source register, default '11111' (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"sys.xml#SYS_CR_systeminstrs\">SYS</a><text> #</text><a link=\"sa_op1\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op1&quot;)\">&lt;op1&gt;</a><text>, C8, </text><a link=\"sa_cm\" hover=\"Name 'Cm', with 'm' [0-15] (field &quot;CRm&quot;)\">&lt;Cm&gt;</a><text>, #</text><a link=\"sa_op2\" hover=\"3-bit unsigned immediate [0-7] (field &quot;op2&quot;)\">&lt;op2&gt;</a><text>{</text><text>, </text><a link=\"sa_xt\" hover=\"64-bit optional general-purpose source register, default '11111' (field &quot;Rt&quot;)\">&lt;Xt&gt;</a><text>}</text></asmtemplate>"],"desc":"TLB Invalidate operation","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\">\n          <c colspan=\"4\"></c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\">\n          <c colspan=\"3\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"tsb","asm":["<asmtemplate><text>TSB CSYNC</text></asmtemplate>"],"desc":"Trace Synchronization Barrier","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"tst_ands_log_imm","asm":["<asmtemplate><text>TST  </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Bitmask immediate (field &quot;imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><a href=\"ands_log_imm.xml#ANDS_32S_log_imm\">ANDS</a><text> WZR, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_imm\" hover=\"Bitmask immediate (field &quot;imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><text>TST  </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"Bitmask immediate (field &quot;N:imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>","<asmtemplate><a href=\"ands_log_imm.xml#ANDS_64S_log_imm\">ANDS</a><text> XZR, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_imm_1\" hover=\"Bitmask immediate (field &quot;N:imms:immr&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"tst_ands_log_shift","asm":["<asmtemplate><text>TST  </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"ands_log_shift.xml#ANDS_32_log_shift\">ANDS</a><text> WZR, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount\" hover=\"Shift amount [0-31], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><text>TST  </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>","<asmtemplate><a href=\"ands_log_shift.xml#ANDS_64_log_shift\">ANDS</a><text> XZR, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a><text>{</text><text>, </text><a link=\"sa_shift\" hover=\"Optional shift applied to final source, default LSL (field &quot;shift&quot;) [ASR,LSL,LSR,ROR]\">&lt;shift&gt;</a><text> #</text><a link=\"sa_amount_1\" hover=\"Shift amount [0-63], default 0 (field &quot;imm6&quot;)\">&lt;amount&gt;</a><text>}</text></asmtemplate>"],"desc":"Test (shifted register)","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"23\" width=\"2\" name=\"shift\" usename=\"1\">\n          <c colspan=\"2\"></c>\n        </box>","<box hibit=\"21\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imm6\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"ubfiz_ubfm","asm":["<asmtemplate><text>UBFIZ  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_lsb\" hover=\"Bit number of lsb of the destination bitfield [0-31]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"ubfm.xml#UBFM_32M_bitfield\">UBFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #(-</text><a link=\"sa_lsb\" hover=\"Bit number of lsb of the destination bitfield [0-31]\">&lt;lsb&gt;</a><text> MOD 32), #(</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>","<asmtemplate><text>UBFIZ  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_lsb_2\" hover=\"Bit number of lsb of the destination bitfield [0-63]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"ubfm.xml#UBFM_64M_bitfield\">UBFM</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #(-</text><a link=\"sa_lsb_2\" hover=\"Bit number of lsb of the destination bitfield [0-63]\">&lt;lsb&gt;</a><text> MOD 64), #(</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>"],"desc":"Unsigned Bitfield Insert in Zero","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ubfm","asm":["<asmtemplate><text>UBFM  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_immr\" hover=\"Right rotate amount [0-31] (field &quot;immr&quot;)\">&lt;immr&gt;</a><text>, #</text><a link=\"sa_imms\" hover=\"Leftmost bit number to be moved from the source [0-31] (field &quot;imms&quot;)\">&lt;imms&gt;</a></asmtemplate>","<asmtemplate><text>UBFM  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_immr_1\" hover=\"Right rotate amount [0-63] (field &quot;immr&quot;)\">&lt;immr&gt;</a><text>, #</text><a link=\"sa_imms_1\" hover=\"Leftmost bit number to be moved from the source [0-63] (field &quot;imms&quot;)\">&lt;imms&gt;</a></asmtemplate>"],"desc":"Unsigned Bitfield Move","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"ubfx_ubfm","asm":["<asmtemplate><text>UBFX  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_lsb_1\" hover=\"Bit number of lsb of the source bitfield [0-31]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"ubfm.xml#UBFM_32M_bitfield\">UBFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #</text><a link=\"sa_lsb_1\" hover=\"Bit number of lsb of the source bitfield [0-31]\">&lt;lsb&gt;</a><text>, #(</text><a link=\"sa_lsb_1\" hover=\"Bit number of lsb of the source bitfield [0-31]\">&lt;lsb&gt;</a><text>+</text><a link=\"sa_width\" hover=\"Width of bitfield [1-32-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>","<asmtemplate><text>UBFX  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_lsb_3\" hover=\"Bit number of lsb of the source bitfield [0-63]\">&lt;lsb&gt;</a><text>, #</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a></asmtemplate>","<asmtemplate><a href=\"ubfm.xml#UBFM_64M_bitfield\">UBFM</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, #</text><a link=\"sa_lsb_3\" hover=\"Bit number of lsb of the source bitfield [0-63]\">&lt;lsb&gt;</a><text>, #(</text><a link=\"sa_lsb_3\" hover=\"Bit number of lsb of the source bitfield [0-63]\">&lt;lsb&gt;</a><text>+</text><a link=\"sa_width_1\" hover=\"Width of bitfield [1-64-&lt;lsb&gt;]\">&lt;width&gt;</a><text>-1)</text></asmtemplate>"],"desc":"Unsigned Bitfield Extract","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\">\n          <c colspan=\"6\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"udf_perm_undef","asm":["<asmtemplate><text>UDF  #</text><a link=\"sa_imm\" hover=\"16-bit unsigned immediate [0-65535] (field &quot;imm16&quot;)\">&lt;imm&gt;</a></asmtemplate>"],"desc":"Permanently Undefined","regdiagram":["<box hibit=\"31\" width=\"16\" settings=\"16\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"16\" name=\"imm16\" usename=\"1\">\n          <c colspan=\"16\"></c>\n        </box>"]},{"name":"udiv","asm":["<asmtemplate><text>UDIV  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><text>UDIV  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Unsigned Divide","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"30\" name=\"op\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" width=\"5\" name=\"opcode2[5:1]\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"10\" name=\"o1\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"umaddl","asm":["<asmtemplate><text>UMADDL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, </text><a link=\"sa_xa\" hover=\"Third 64-bit general-purpose source register holding addend (field &quot;Ra&quot;)\">&lt;Xa&gt;</a></asmtemplate>"],"desc":"Unsigned Multiply-Add Long","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"U\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op31[1:0]\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"umnegl_umsubl","asm":["<asmtemplate><text>UMNEGL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"umsubl.xml#UMSUBL_64WA_dp_3src\">UMSUBL</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, XZR</text></asmtemplate>"],"desc":"Unsigned Multiply-Negate Long","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"U\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op31[1:0]\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"umsubl","asm":["<asmtemplate><text>UMSUBL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, </text><a link=\"sa_xa\" hover=\"Third 64-bit general-purpose source register holding minuend (field &quot;Ra&quot;)\">&lt;Xa&gt;</a></asmtemplate>"],"desc":"Unsigned Multiply-Subtract Long","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"U\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op31[1:0]\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"umulh","asm":["<asmtemplate><text>UMULH  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_xn\" hover=\"First 64-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Xn&gt;</a><text>, </text><a link=\"sa_xm\" hover=\"Second 64-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Xm&gt;</a></asmtemplate>"],"desc":"Unsigned Multiply High","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"U\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op31[1:0]\" settings=\"2\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n          <c>(1)</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"umull_umaddl","asm":["<asmtemplate><text>UMULL  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a></asmtemplate>","<asmtemplate><a href=\"umaddl.xml#UMADDL_64WA_dp_3src\">UMADDL</a><text> </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"First 32-bit general-purpose source register holding multiplicand (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, </text><a link=\"sa_wm\" hover=\"Second 32-bit general-purpose source register holding multiplier (field &quot;Rm&quot;)\">&lt;Wm&gt;</a><text>, XZR</text></asmtemplate>"],"desc":"Unsigned Multiply Long","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"op54\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"5\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"23\" name=\"U\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>1</c>\n        </box>","<box hibit=\"22\" width=\"2\" name=\"op31[1:0]\" settings=\"2\">\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"Rm\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"15\" name=\"o0\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" width=\"5\" name=\"Ra\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"uxtb_ubfm","asm":["<asmtemplate><text>UXTB  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><a href=\"ubfm.xml#UBFM_32M_bitfield\">UBFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #0, #7</text></asmtemplate>"],"desc":"Unsigned Extend Byte","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\" settings=\"6\" psbits=\"xxxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\" settings=\"6\" psbits=\"xxxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"uxth_ubfm","asm":["<asmtemplate><text>UXTH  </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a></asmtemplate>","<asmtemplate><a href=\"ubfm.xml#UBFM_32M_bitfield\">UBFM</a><text> </text><a link=\"sa_wd\" hover=\"32-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Wd&gt;</a><text>, </text><a link=\"sa_wn\" hover=\"32-bit general-purpose source register (field &quot;Rn&quot;)\">&lt;Wn&gt;</a><text>, #0, #15</text></asmtemplate>"],"desc":"Unsigned Extend Halfword","regdiagram":["<box hibit=\"31\" name=\"sf\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"30\" width=\"2\" name=\"opc\" usename=\"1\" settings=\"2\" psbits=\"xx\">\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"6\" settings=\"6\">\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"22\" name=\"N\" usename=\"1\" settings=\"1\" psbits=\"x\">\n          <c>0</c>\n        </box>","<box hibit=\"21\" width=\"6\" name=\"immr\" usename=\"1\" settings=\"6\" psbits=\"xxxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"6\" name=\"imms\" usename=\"1\" settings=\"6\" psbits=\"xxxxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"wfe","asm":["<asmtemplate><text>WFE</text></asmtemplate>"],"desc":"Wait For Event","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"wfet","asm":["<asmtemplate><text>WFET  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose source register (field &quot;Rd&quot;)\">&lt;Xt&gt;</a></asmtemplate>"],"desc":"Wait For Event with Timeout","regdiagram":["<box hibit=\"31\" width=\"20\" settings=\"20\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"wfi","asm":["<asmtemplate><text>WFI</text></asmtemplate>"],"desc":"Wait For Interrupt","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"wfit","asm":["<asmtemplate><text>WFIT  </text><a link=\"sa_xt\" hover=\"64-bit general-purpose source register (field &quot;Rd&quot;)\">&lt;Xt&gt;</a></asmtemplate>"],"desc":"Wait For Interrupt with Timeout","regdiagram":["<box hibit=\"31\" width=\"20\" settings=\"20\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"xaflag","asm":["<asmtemplate><text>XAFLAG</text></asmtemplate>"],"desc":"Convert floating-point condition flags from external format to Arm format","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>(0)</c>\n          <c>(0)</c>\n          <c>(0)</c>\n          <c>(0)</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]},{"name":"xpac","asm":["<asmtemplate><text>XPACD  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a></asmtemplate>","<asmtemplate><text>XPACI  </text><a link=\"sa_xd\" hover=\"64-bit general-purpose destination register (field &quot;Rd&quot;)\">&lt;Xd&gt;</a></asmtemplate>","<asmtemplate><text>XPACLRI</text></asmtemplate>"],"desc":"Strip Pointer Authentication Code","regdiagram":["<box hibit=\"31\" name=\"sf\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"30\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"29\" name=\"S\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"28\" width=\"8\" settings=\"8\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"5\" name=\"opcode2\" settings=\"5\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" name=\"opcode[5]\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"14\" name=\"opcode[4]\" settings=\"1\">\n          <c>1</c>\n        </box>","<box hibit=\"13\" width=\"3\" name=\"opcode[3:1]\" settings=\"3\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"10\" name=\"D\" usename=\"1\">\n          <c></c>\n        </box>","<box hibit=\"9\" width=\"5\" name=\"Rn\" usename=\"1\" settings=\"5\" psbits=\"xxxxx\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rd\" usename=\"1\">\n          <c colspan=\"5\"></c>\n        </box>"]},{"name":"yield","asm":["<asmtemplate><text>YIELD</text></asmtemplate>"],"desc":"YIELD","regdiagram":["<box hibit=\"31\" width=\"10\" settings=\"10\">\n          <c>1</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"21\" name=\"L\" settings=\"1\">\n          <c>0</c>\n        </box>","<box hibit=\"20\" width=\"2\" name=\"op0\" settings=\"2\">\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"18\" width=\"3\" name=\"op1\" settings=\"3\">\n          <c>0</c>\n          <c>1</c>\n          <c>1</c>\n        </box>","<box hibit=\"15\" width=\"4\" name=\"CRn\" settings=\"4\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n          <c>0</c>\n        </box>","<box hibit=\"11\" width=\"4\" name=\"CRm\" usename=\"1\" settings=\"4\" psbits=\"xxxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n          <c>0</c>\n        </box>","<box hibit=\"7\" width=\"3\" name=\"op2\" usename=\"1\" settings=\"3\" psbits=\"xxx\">\n          <c>0</c>\n          <c>0</c>\n          <c>1</c>\n        </box>","<box hibit=\"4\" width=\"5\" name=\"Rt\" settings=\"5\">\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n          <c>1</c>\n        </box>"]}],"offset":370}"),
        ),
    ),
);
