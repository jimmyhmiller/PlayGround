// What if => meant {} kind of like $ in haskell?
// What if <symbol> <?name> <?(args)> {} was a special pattern?

data Action {
    Increment
    Decrement
}

data Maybe {
    None
    Just(a)
}

data Person {
    Customer(:id)
    Employee(:id, :position)
}

fn double(x) { x * 2 }

fn get-customer-id {
    Customer(:id) => Just(id)
    Employee(_) => None
}

fn counter {
    (state, Increment) => state + 1
    (state, Decrement) => state - 1
    (state, _) => state
}

fn div {
    (numerator, 0) => throw DivideByZero
    (numerator, divisor) => numerator / divisor
}

protocol Fn {
    invoke(f, args)
}

implement Fn(Map) {
    invoke(map, arg) {
        get(arg, map)
    }
}

val jimmy = {
    :name "jimmy"
    :address {
        :address1 "12448 breaklines street"
        :address2 "apt 305"
        :city "carmel"
        :state "Indiana"
    }
    :age 24
}

assoc(:name, "jimmy miller", jimmy)

infix (a |> f) {
    f(a)
}

protocol Async {
    then(promise, f)
}

implement Async(Promise) {
    then(promise, f) {
        promise..then(f)
    }
}

async get-user-info(userId) {
    user <- get-user(userId)
    comments <- get-comments(user)
    assoc(:comments, comments, user)
}


fn get-user-info(userId) {
    then(getUser(userId), user =>
        then(getComments(user), comments =>
            assoc(:comments, comments, user)))
}

jimmy
|> assoc(:name, "jimmy miller")

jimmy(:address, :address1)
jimmy(:address)(:address1)

map(fn(x) => x + 2, [1 2 3 4])


protocol StateReducer {
    reduce(state, action)
}

implement StateReducer(Action) {
    fn reduce(state = 0, action) {
        match(action) {
            Increment => state + 1
            Decrement => state - 1
            otherwise => state
        }
    }
}

fn Hello({:name}) {
    <div>{name}</div>
}

protocol Seq {
    cons(coll, elem)
    first(coll)
    rest(coll)
    isEmpty(coll)
    empty()
}

implement Seq(JsArray) {
    cons(coll, elem) {
        val newColl = coll..slice()
        newColl..unshift(elem)
        newColl
    }
    empty() {
        JsArray()
    }
    first(coll) {
        coll(0)
    }
    rest(coll) {
        val newColl = coll..slice()
        newColl..shift(0)
        newColl
    }
    isEmpty(coll) {
        coll..length == 0
    }
}

val variable-name = 3

data DivideEror = DivideByZero

fn div {
    (numerator, 0) => throw DivideByZero
    (numerator, divisor) => numerator / divisor
}


fn handle-div-zero(num) {
    match (num `div` 0) {
        n => n
        DivideByZero => 0
    }
}

fn double-even-numbers(n) {
    pre {
        assert(n % 2 == 0)
    }
    post(ret) {
        assert(ret > n)
    }
    n * 2
}

// Example arities
addEm(a, b)
addEm(a, b, c)

addEm(1, 2, _) // fn
addEm(1, _, 3) // fn
addEm(a=1, b=2) // 3
addEm(a=1, b=2, c=_) //fn
addEm(1,2) // 3
addEm(1) // Error
addEm(a=1) // Error


fn map(f, coll, ? ...colls) {}
map(+2)(1...10) // list


fn map(f, coll, ...colls) {}
map(+2)(1...10) // fn


fn fib {
    0 => 0
    1 => 1
    n => fib(n - 1) + fib(n - 2)
}


fn fib-lazy {
    () => fib-lazy(0, 1)
    (a, b) => cons(a, lazy-seq(fib(b, a + b)))
}


// Should I consider making | whitespace? 

data Operation {
    And
    Or
    If
    Iff
}

data Statement {
    T
    F
    Neg(statement)
    Prop(string)
    Op(operation, statement, statement)
}


fn or(p, q) => Op(Or, p, q)

fn and(p, q) => Op(And, p, q)


fn remove-f-or {
    Op(Or, F, q) => q
    Op(Or, p, F) => p
    s => s
}


val reducer-store = atom({})

fn reducer(path) {
    fn (f) {
        update!(reducer-store, path, f)
        f
    }
}

@reducer(:counter)

fn reduce-counter {
    (state, Increment) => state + 1
    (state, Decrement) => state - 1
}

multi reducer {
    (_, action) => constructor(action)
}

method reducer(Increment) {
    (state, _) => state + 1
}

method reducer(Decrement) {
    (state, _) => state - 1
}

method reducer() {
    (_, _) => 0
}


// <program> = expr | comment | program*
// comment = <'//'> #'.*'
// phrase = phrase-type phrase-name phrase-body |
//          phrase-type phrase-name phrase-args phrase-body |
//          phrase-type phrase-args phrase-body
// phrase-type = identifier
// phrase-name = identifier
// phrase-body = open-c expr* close-c
// phrase-args = <args>


// <expr> = fn-application | literal | infix-application | lambda | val | phrase
// fn-application = identifier open-p (expr <','?>)* close-p
// infix-application = expr <' '> symbol <' '> expr |
//                     expr <' '> <'`'> identifier  <'`'> <' '> expr
// <symbol> = #'[$-/:-?{-~!"^_`\[\]]'
// <keyword> = #':[A-Za-z]+'
// <identifier> = #'[A-Za-z\-_!?]+'
// <literal> = #'[0-9]' | identifier | keyword | string
// string = <'"'> #'[^"]*' <'"'>
// fn = <'fn'> identifier open-c fn-body close-c | <'fn'> identifier lambda
// fn-body = lambda+
// lambda = fn-args  <'=>'> expr | fn-args <'=>'> open-c expr+ close-c
// <arg> = identifier
// args = open-p (arg <','?>)* close-p | arg | literal
// fn-args = open-p ((arg | literal)  <','?>)* close-p | arg | literal

// val = <'val'> identifier <'='> expr


// <open-p> = <'('>
// <close-p> = <')'>
// <open-c> = <'{'>
// <close-c> = <'}'>
