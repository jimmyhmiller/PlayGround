{"version":3,"sources":["hipo/attribute.cljc"],"mappings":";AAIA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC,AAAKC;AAAL,AAAiD,AAAAC,AAAA,AAAAC,AAAAH;AAAAI,AAAA;AAAAC,AAAA;AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAAE,AAAA,AAAAH,AAAAE;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAASW;AAAT,AAAAV,AAAAD,AAAA,AAAA,AAAWY;AAAX,AAAA,AAAkB,AAAAtB,AAAA,AAAiB,AAACuB,AAAKF,AAAGC;;AAA5C;AAAA,AAAAjB;AAAAE;AAAAC;AAAA,AAAAC,AAAA;;;;;;;AAAA,AAAAG,AAAA,AAAAN,AAAAD;AAAA,AAAA,AAAAO;AAAA,AAAA,AAAAP,AAAAO;AAAA,AAAA,AAAA,AAAAC,AAAAR;AAAA,AAAAS,AAAA,AAAAC,AAAAV;AAAA,AAAA,AAAA,AAAAW,AAAAX;AAAAS;AAAA,AAAAG,AAAAH;AAAA;;;;;;;AAAA,AAAAI,AAAA,AAAAC,AAAAd;AAAA,AAAAM,AAAAO,AAAA,AAAA,AAASG;AAAT,AAAAV,AAAAO,AAAA,AAAA,AAAWI;AAAX,AAAA,AAAkB,AAAAtB,AAAA,AAAiB,AAACuB,AAAKF,AAAGC;;AAA5C;AAAA,AAAA,AAAAF,AAAAf;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAEjD,AAAA,AAAOmB,AAAiCC;AAAxC,AAA2C,AAAA,AAAA,AAAUA;;AAErD,AAAA,AAAMC,AAAoBC,AAAGN,AAAEC;AAA/B,AAAkC,AAAMK,AAAG,AAACH,AAAgC,AAACD,AAAKF,AAAIC;;AAEtF,AAAA,AAAMM,AACHD,AAAGN,AAAEC,AAAEO;AADV,AAEE,AAAAC,AAAa,AAAA,AAAI,AAAAE,AAAUX,AAAG,AAACY,AAAmB,AAACC,AAAUb,AAAGQ;AAAhE,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAAiBJ,AAAGI,AAAI,AAACR,AAAKF,AAAGC;;AACjC,AAAeK,AAAG,AAACJ,AAAKF,AAAGC;;;AAE/B,AAAA,AAAMa,AACHR,AAAGN,AAAEQ;AADR,AAEE,AAAAC,AAAa,AAAA,AAAI,AAAAE,AAAUX,AAAG,AAACY,AAAmB,AAACC,AAAUb,AAAGQ;AAAhE,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAAoBJ,AAAGI,AAAI,AAACR,AAAKF;;AACjC,AAAkBM,AAAG,AAACJ,AAAKF;;;AAE/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAe,AAAAC,AAAAC,AAAAC,AAAKM;AAAL,AACe,AAAAT,AAAAC,AAAAE,AAACb;AADhB,AAAA,AAAA,AAAA,AAAAc,AAAAC,AAAAC,AAAAC,AAAAC;AAAA,AAEe,AAAAD;AAAO,AAAAH,AAAAC,AAAAE,AAAAC,AAAChB;;AAA4B,AAAAY,AAAAC,AAAAG,AAACT;;;AAEpD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAW,AAAAC,AAAAC,AAAAC,AAAKC;AAAL,AAGkD,AAAAD;AAAA,AAAS,AAAAH;;AAAY,AAAAA,AAAAC,AAAAE;;AAArB;;AAHlD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAQA,AAAA,AAAME,AACHC,AAAKC;AADR,AAEE,AAAID;AACF,AACE,AAACE,AAAKF;AAAM,AAACG,AAAUH,AAAKC;;AAD9B,AAEQ,AAACG,AAAEH,AAAED;;;;AAHf;;;AAMF,AAAA,AAAMK,AACH5B,AAAE6B,AAAGC,AAAIC;AADZ,AAEE,AAAK,AAACT,AAAS,AAAA,AAAKtB,AAAG6B,AAClB,AAACP,AAAS,AAAA,AAAMtB,AAAG8B,AACnB,AAACR,AAAS,AAAA,AAAOtB,AAAG+B;;AAE3B,AAAA,AAAMC,AACHhC,AAAE6B,AAAGC,AAAIC;AADZ,AAEE,AAAMtC,AAAE,AAACwC,AAAO,AAAA,AAAqBjC,AAAGqB;AAClCa,AAAE,AAAA,AAAAC,AAACC;AAAD,AAAO,AAAMC,AAAE,AAAA,AAAAF;AAAR,AAAqB,AAAI,AAACP,AAAgBS,AAAER,AAAGC,AAAI,AAACpC,AAAKqC;AAApCI;;AAAA;;AAA+C1C;AADnF,AAEE,AAAI,AAAA,AAACiC,AAAUQ;AACb,AAAAI,AAAC,AAAA,AAAOJ;AAAR,AAAA,AAAAI,AAAAA,AAAAA,AAAWtB,AAAAA;;AACXkB;;;AAEN,AAAA,AAAMK,AACHzC,AAAGiC,AAAKS,AAAGC,AAAGzC;AADjB,AAGE,AAAI,AAAI,AAAC0C,AAAaF,AAAI,AAACE,AAAaD;AACtC,AAAIA;AAAG,AAAC1C,AAAeD,AAAGiC,AAAKU,AAAGzC;;AAAG,AAACM,AAAkBR,AAAGiC,AAAK/B;;;AAChE,AAAMF,AAAGiC,AAAK,AAAClC,AAAmBC,AAAGiC,AAAKU;;;AAE9C,AAAA,AAAME,AACH7C,AAAGE,AAAE6B,AAAGC,AAAIC,AAAKS,AAAGC;AADvB,AAEE,AAAMP,AAAE,AAACF,AAAQhC,AAAE6B,AAAGC,AAAIC;AACpBa,AAAE,AAAAC,AAAI,AAAA,AAAKX;AAAT,AAAA,AAAAW;AAAAA;;AAAYN;;;AADpB,AAEE,AAACK,AAAAA,AAAAA,AAAE9C,AAAAA,AAAGiC,AAAAA,AAAKS,AAAAA,AAAGC,AAAAA,AAAGzC,AAAAA","names":["p1__37203#","p2__37204#","p3__37205#","p4__37202#","hipo.attribute/style-handler","seq__37207","cljs.core/seq","chunk__37208","count__37209","i__37210","vec__37219","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__37224","cljs.core/first","cljs.core/next","k","v","cljs.core/name","hipo.attribute/property-name->js-property-name","n","hipo.attribute/set-property-value","el","hipo.attribute/set-attribute!","m","temp__5733__auto__","nns","cljs.core/Keyword","hipo.hiccup/key->namespace","cljs.core/namespace","hipo.attribute/remove-attribute!","p1__37228#","p2__37229#","p3__37231#","p4__37230#","p1__37233#","p2__37234#","p3__37236#","p4__37232#","p5__37235#","hipo.attribute/default-handler-fns","p1__37239#","p2__37240#","p3__37241#","p4__37238#","hipo.attribute/default-handlers","hipo.attribute/matches?","expr","s","cljs.core/set?","cljs.core/contains?","cljs.core._EQ_","hipo.attribute/target-matches?","ns","tag","attr","hipo.attribute/handler","cljs.core.concat","h","p1__37246#","cljs.core/some","t","fexpr__37247","hipo.attribute/default-set-value!","ov","nv","hipo.hiccup/literal?","hipo.attribute/set-value!","f","or__4126__auto__"],"sourcesContent":["(ns hipo.attribute\n  (:require [hipo.hiccup :as hic]))\n\n#?(:cljs\n(def style-handler {:target {:attr \"style\"} :fn #(doseq [[k v] %4] (aset %1 \"style\" (name k) v))}))\n\n(defn- property-name->js-property-name [n] (.replace n \"-\" \"_\"))\n\n(defn set-property-value [el k v] (aset el (property-name->js-property-name (name k)) v))\n\n(defn set-attribute!\n  [el k v m]\n  (if-let [nns (if (keyword? k) (hic/key->namespace (namespace k) m))]\n    (.setAttributeNS el nns (name k) v)\n    (.setAttribute el (name k) v)))\n\n(defn remove-attribute!\n  [el k m]\n  (if-let [nns (if (keyword? k) (hic/key->namespace (namespace k) m))]\n    (.removeAttributeNS el nns (name k))\n    (.removeAttribute el (name k))))\n\n(def default-handler-fns\n  {:prop {:fn #(set-property-value %1 %2 %4)}\n   :attr {:fn #(if %4 (set-attribute! %1 %2 %4 %5) (remove-attribute! %1 %2 %5))}})\n\n(def default-handlers\n  [{:target {:ns \"svg\" :attr \"class\"} :type :attr}\n   {:target {:tag \"input\" :attr #{\"value\" \"checked\"}} :type :prop}\n   {:target {:tag \"input\" :attr \"autofocus\"} :fn #(when %4 (.focus %1) (.setAttribute %1 %2 %4))}\n   {:target {:tag \"option\" :attr #{\"selected\"}} :type :prop}\n   {:target {:tag \"select\" :attr #{\"value\" \"selectIndex\"}} :type :prop}\n   {:target {:tag \"textarea\" :attr #{\"value\"}} :type :prop}])\n\n(defn matches?\n  [expr s]\n  (if expr\n    (cond\n      (set? expr) (contains? expr s)\n      :else (= s expr))\n    true))\n\n(defn target-matches?\n  [m ns tag attr]\n  (and (matches? (:ns m) ns)\n       (matches? (:tag m) tag)\n       (matches? (:attr m) attr)))\n\n(defn handler\n  [m ns tag attr]\n  (let [v (concat (:attribute-handlers m) default-handlers)\n        h (some #(let [t (:target %)] (if (target-matches? t ns tag (name attr)) %)) v)]\n    (if (contains? h :type)\n      ((:type h) default-handler-fns)\n      h)))\n\n(defn default-set-value!\n  [el attr ov nv m]\n  ; Set object via property access. Literal values are set via attribute access because associated properties might not exist.\n  (if (or (hic/literal? ov) (hic/literal? nv))\n    (if nv (set-attribute! el attr nv m) (remove-attribute! el attr m))\n    (aset el attr (set-property-value el attr nv))))\n\n(defn set-value!\n  [el m ns tag attr ov nv]\n  (let [h (handler m ns tag attr)\n        f (or (:fn h) default-set-value!)]\n    (f el attr ov nv m)))\n"]}