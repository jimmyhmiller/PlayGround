{
"version":3,
"file":"goog.result.resultutil.js",
"lineCount":119,
"mappings":"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",
"sources":["goog/result/resultutil.js"],
"sourcesContent":["// Copyright 2012 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview This file provides primitives and tools (wait, transform,\n *     chain, combine) that make it easier to work with Results. This section\n *     gives an overview of their functionality along with some examples and the\n *     actual definitions have detailed descriptions next to them.\n *\n *\n * NOTE: goog.result is soft deprecated - we expect to replace this and\n * goog.async.Deferred with a wrapper around W3C Promises:\n * http://dom.spec.whatwg.org/#promises.\n */\n\ngoog.provide('goog.result');\n\ngoog.require('goog.array');\ngoog.require('goog.result.DependentResult');\ngoog.require('goog.result.Result');\ngoog.require('goog.result.SimpleResult');\n\n\n/**\n * Returns a successful result containing the provided value.\n *\n * Example:\n * <pre>\n *\n * var value = 'some-value';\n * var result = goog.result.immediateResult(value);\n * assertEquals(goog.result.Result.State.SUCCESS, result.getState());\n * assertEquals(value, result.getValue());\n *\n * </pre>\n *\n * @param {*} value The value of the result.\n * @return {!goog.result.Result} A Result object that has already been resolved\n *     to the supplied value.\n */\ngoog.result.successfulResult = function(value) {\n  var result = new goog.result.SimpleResult();\n  result.setValue(value);\n  return result;\n};\n\n\n/**\n * Returns a failed result with the optional error slug set.\n *\n * Example:\n * <pre>\n *\n * var error = new Error('something-failed');\n * var result = goog.result.failedResult(error);\n * assertEquals(goog.result.Result.State.ERROR, result.getState());\n * assertEquals(error, result.getError());\n *\n * </pre>\n *\n * @param {*=} opt_error The error to which the result should resolve.\n * @return {!goog.result.Result} A Result object that has already been resolved\n *     to the supplied Error.\n */\ngoog.result.failedResult = function(opt_error) {\n  var result = new goog.result.SimpleResult();\n  result.setError(opt_error);\n  return result;\n};\n\n\n/**\n * Returns a canceled result.\n * The result will be resolved to an error of type CancelError.\n *\n * Example:\n * <pre>\n *\n * var result = goog.result.canceledResult();\n * assertEquals(goog.result.Result.State.ERROR, result.getState());\n * var error = result.getError();\n * assertTrue(error instanceof goog.result.Result.CancelError);\n *\n * </pre>\n *\n * @return {!goog.result.Result} A canceled Result.\n */\ngoog.result.canceledResult = function() {\n  var result = new goog.result.SimpleResult();\n  result.cancel();\n  return result;\n};\n\n\n/**\n * Calls the handler on resolution of the result (success or failure).\n * The handler is passed the result object as the only parameter. The call will\n * be immediate if the result is no longer pending.\n *\n * Example:\n * <pre>\n *\n * var result = xhr.get('testdata/xhr_test_text.data');\n *\n * // Wait for the result to be resolved and alert it's state.\n * goog.result.wait(result, function(result) {\n *   alert('State: ' + result.getState());\n * });\n * </pre>\n *\n * @param {!goog.result.Result} result The result to install the handlers.\n * @param {function(this:T, !goog.result.Result)} handler The handler to be\n *     called. The handler is passed the result object as the only parameter.\n * @param {T=} opt_scope Optional scope for the handler.\n * @template T\n */\ngoog.result.wait = function(result, handler, opt_scope) {\n  result.wait(handler, opt_scope);\n};\n\n\n/**\n * Calls the handler if the result succeeds. The result object is the only\n * parameter passed to the handler. The call will be immediate if the result\n * has already succeeded.\n *\n * Example:\n * <pre>\n *\n * var result = xhr.get('testdata/xhr_test_text.data');\n *\n * // attach a success handler.\n * goog.result.waitOnSuccess(result, function(resultValue, result) {\n *   var datavalue = result.getvalue();\n *   alert('value: ' + datavalue + ' == ' + resultValue);\n * });\n * </pre>\n *\n * @param {!goog.result.Result} result The result to install the handlers.\n * @param {function(this:T, ?, !goog.result.Result)} handler The handler to be\n *     called. The handler is passed the result value and the result as\n *     parameters.\n * @param {T=} opt_scope Optional scope for the handler.\n * @template T\n */\ngoog.result.waitOnSuccess = function(result, handler, opt_scope) {\n  goog.result.wait(result, function(res) {\n    if (res.getState() == goog.result.Result.State.SUCCESS) {\n      // 'this' refers to opt_scope\n      handler.call(this, res.getValue(), res);\n    }\n  }, opt_scope);\n};\n\n\n/**\n * Calls the handler if the result action errors. The result object is passed as\n * the only parameter to the handler. The call will be immediate if the result\n * object has already resolved to an error.\n *\n * Example:\n *\n * <pre>\n *\n * var result = xhr.get('testdata/xhr_test_text.data');\n *\n * // Attach a failure handler.\n * goog.result.waitOnError(result, function(error) {\n *  // Failed asynchronous call!\n * });\n * </pre>\n *\n * @param {!goog.result.Result} result The result to install the handlers.\n * @param {function(this:T, ?, !goog.result.Result)} handler The handler to be\n *     called. The handler is passed the error and the result object as\n *     parameters.\n * @param {T=} opt_scope Optional scope for the handler.\n * @template T\n */\ngoog.result.waitOnError = function(result, handler, opt_scope) {\n  goog.result.wait(result, function(res) {\n    if (res.getState() == goog.result.Result.State.ERROR) {\n      // 'this' refers to opt_scope\n      handler.call(this, res.getError(), res);\n    }\n  }, opt_scope);\n};\n\n\n/**\n * Given a result and a transform function, returns a new result whose value,\n * on success, will be the value of the given result after having been passed\n * through the transform function.\n *\n * If the given result is an error, the returned result is also an error and the\n * transform will not be called.\n *\n * Example:\n * <pre>\n *\n * var result = xhr.getJson('testdata/xhr_test_json.data');\n *\n * // Transform contents of returned data using 'processJson' and create a\n * // transformed result to use returned JSON.\n * var transformedResult = goog.result.transform(result, processJson);\n *\n * // Attach success and failure handlers to the transformed result.\n * goog.result.waitOnSuccess(transformedResult, function(resultValue, result) {\n *   var jsonData = resultValue;\n *   assertEquals('ok', jsonData['stat']);\n * });\n *\n * goog.result.waitOnError(transformedResult, function(error) {\n *   // Failed getJson call\n * });\n * </pre>\n *\n * @param {!goog.result.Result} result The result whose value will be\n *     transformed.\n * @param {function(?):?} transformer The transformer\n *     function. The return value of this function will become the value of the\n *     returned result.\n *\n * @return {!goog.result.DependentResult} A new Result whose eventual value will\n *     be the returned value of the transformer function.\n */\ngoog.result.transform = function(result, transformer) {\n  var returnedResult = new goog.result.DependentResultImpl_([result]);\n\n  goog.result.wait(result, function(res) {\n    if (res.getState() == goog.result.Result.State.SUCCESS) {\n      returnedResult.setValue(transformer(res.getValue()));\n    } else {\n      returnedResult.setError(res.getError());\n    }\n  });\n\n  return returnedResult;\n};\n\n\n/**\n * The chain function aids in chaining of asynchronous Results. This provides a\n * convenience for use cases where asynchronous operations must happen serially\n * i.e. subsequent asynchronous operations are dependent on data returned by\n * prior asynchronous operations.\n *\n * It accepts a result and an action callback as arguments and returns a\n * result. The action callback is called when the first result succeeds and is\n * supposed to return a second result. The returned result is resolved when one\n * of both of the results resolve (depending on their success or failure.) The\n * state and value of the returned result in the various cases is documented\n * below:\n * <pre>\n *\n * First Result State:    Second Result State:    Returned Result State:\n * SUCCESS                SUCCESS                 SUCCESS\n * SUCCESS                ERROR                   ERROR\n * ERROR                  Not created             ERROR\n * </pre>\n *\n * The value of the returned result, in the case both results succeed, is the\n * value of the second result (the result returned by the action callback.)\n *\n * Example:\n * <pre>\n *\n * var testDataResult = xhr.get('testdata/xhr_test_text.data');\n *\n * // Chain this result to perform another asynchronous operation when this\n * // Result is resolved.\n * var chainedResult = goog.result.chain(testDataResult,\n *     function(testDataResult) {\n *\n *       // The result value of testDataResult is the URL for JSON data.\n *       var jsonDataUrl = testDataResult.getValue();\n *\n *       // Create a new Result object when the original result is resolved.\n *       var jsonResult = xhr.getJson(jsonDataUrl);\n *\n *       // Return the newly created Result.\n *       return jsonResult;\n *     });\n *\n * // The chained result resolves to success when both results resolve to\n * // success.\n * goog.result.waitOnSuccess(chainedResult, function(resultValue, result) {\n *\n *   // At this point, both results have succeeded and we can use the JSON\n *   // data returned by the second asynchronous call.\n *   var jsonData = resultValue;\n *   assertEquals('ok', jsonData['stat']);\n * });\n *\n * // Attach the error handler to be called when either Result fails.\n * goog.result.waitOnError(chainedResult, function(result) {\n *   alert('chained result failed!');\n * });\n * </pre>\n *\n * @param {!goog.result.Result} result The result to chain.\n * @param {function(this:T, !goog.result.Result):!goog.result.Result}\n *     actionCallback The callback called when the result is resolved. This\n *     callback must return a Result.\n * @param {T=} opt_scope Optional scope for the action callback.\n * @return {!goog.result.DependentResult} A result that is resolved when both\n *     the given Result and the Result returned by the actionCallback have\n *     resolved.\n * @template T\n */\ngoog.result.chain = function(result, actionCallback, opt_scope) {\n  var dependentResult = new goog.result.DependentResultImpl_([result]);\n\n  // Wait for the first action.\n  goog.result.wait(result, function(result) {\n    if (result.getState() == goog.result.Result.State.SUCCESS) {\n      // The first action succeeded. Chain the contingent action.\n      var contingentResult = actionCallback.call(opt_scope, result);\n      dependentResult.addParentResult(contingentResult);\n      goog.result.wait(contingentResult, function(contingentResult) {\n\n        // The contingent action completed. Set the dependent result based on\n        // the contingent action's outcome.\n        if (contingentResult.getState() == goog.result.Result.State.SUCCESS) {\n          dependentResult.setValue(contingentResult.getValue());\n        } else {\n          dependentResult.setError(contingentResult.getError());\n        }\n      });\n    } else {\n      // First action failed, the dependent result should also fail.\n      dependentResult.setError(result.getError());\n    }\n  });\n\n  return dependentResult;\n};\n\n\n/**\n * Returns a result that waits on all given results to resolve. Once all have\n * resolved, the returned result will succeed (and never error).\n *\n * Example:\n * <pre>\n *\n * var result1 = xhr.get('testdata/xhr_test_text.data');\n *\n * // Get a second independent Result.\n * var result2 = xhr.getJson('testdata/xhr_test_json.data');\n *\n * // Create a Result that resolves when both prior results resolve.\n * var combinedResult = goog.result.combine(result1, result2);\n *\n * // Process data after resolution of both results.\n * goog.result.waitOnSuccess(combinedResult, function(results) {\n *   goog.array.forEach(results, function(result) {\n *       alert(result.getState());\n *   });\n * });\n * </pre>\n *\n * @param {...!goog.result.Result} var_args The results to wait on.\n *\n * @return {!goog.result.DependentResult} A new Result whose eventual value will\n *     be the resolved given Result objects.\n */\ngoog.result.combine = function(var_args) {\n  /** @type {!Array<!goog.result.Result>} */\n  var results = goog.array.clone(arguments);\n  var combinedResult = new goog.result.DependentResultImpl_(results);\n\n  var isResolved = function(res) {\n    return res.getState() != goog.result.Result.State.PENDING;\n  };\n\n  var checkResults = function() {\n    if (combinedResult.getState() == goog.result.Result.State.PENDING &&\n        goog.array.every(results, isResolved)) {\n      combinedResult.setValue(results);\n    }\n  };\n\n  goog.array.forEach(\n      results, function(result) { goog.result.wait(result, checkResults); });\n\n  return combinedResult;\n};\n\n\n/**\n * Returns a result that waits on all given results to resolve. Once all have\n * resolved, the returned result will succeed if and only if all given results\n * succeeded. Otherwise it will error.\n *\n * Example:\n * <pre>\n *\n * var result1 = xhr.get('testdata/xhr_test_text.data');\n *\n * // Get a second independent Result.\n * var result2 = xhr.getJson('testdata/xhr_test_json.data');\n *\n * // Create a Result that resolves when both prior results resolve.\n * var combinedResult = goog.result.combineOnSuccess(result1, result2);\n *\n * // Process data after successful resolution of both results.\n * goog.result.waitOnSuccess(combinedResult, function(results) {\n *   var textData = results[0].getValue();\n *   var jsonData = results[1].getValue();\n *   assertEquals('Just some data.', textData);\n *   assertEquals('ok', jsonData['stat']);\n * });\n *\n * // Handle errors when either or both results failed.\n * goog.result.waitOnError(combinedResult, function(combined) {\n *   var results = combined.getError();\n *\n *   if (results[0].getState() == goog.result.Result.State.ERROR) {\n *     alert('result1 failed');\n *   }\n *\n *   if (results[1].getState() == goog.result.Result.State.ERROR) {\n *     alert('result2 failed');\n *   }\n * });\n * </pre>\n *\n * @param {...!goog.result.Result} var_args The results to wait on.\n *\n * @return {!goog.result.DependentResult} A new Result whose eventual value will\n *     be an array of values of the given Result objects.\n */\ngoog.result.combineOnSuccess = function(var_args) {\n  var results = goog.array.clone(arguments);\n  var combinedResult = new goog.result.DependentResultImpl_(results);\n\n  var resolvedSuccessfully = function(res) {\n    return res.getState() == goog.result.Result.State.SUCCESS;\n  };\n\n  goog.result.wait(\n      goog.result.combine.apply(goog.result.combine, results),\n      // The combined result never ERRORs\n      function(res) {\n        var results =\n            /** @type {Array<!goog.result.Result>} */ (res.getValue());\n        if (goog.array.every(results, resolvedSuccessfully)) {\n          combinedResult.setValue(results);\n        } else {\n          combinedResult.setError(results);\n        }\n      });\n\n  return combinedResult;\n};\n\n\n/**\n * Given a DependentResult, cancels the Results it depends on (that is, the\n * results returned by getParentResults). This function does not recurse,\n * so e.g. parents of parents are not canceled; only the immediate parents of\n * the given Result are canceled.\n *\n * Example using @see goog.result.combine:\n * <pre>\n * var result1 = xhr.get('testdata/xhr_test_text.data');\n *\n * // Get a second independent Result.\n * var result2 = xhr.getJson('testdata/xhr_test_json.data');\n *\n * // Create a Result that resolves when both prior results resolve.\n * var combinedResult = goog.result.combineOnSuccess(result1, result2);\n *\n * combinedResult.wait(function() {\n *   if (combinedResult.isCanceled()) {\n *     goog.result.cancelParentResults(combinedResult);\n *   }\n * });\n *\n * // Now, canceling combinedResult will cancel both result1 and result2.\n * combinedResult.cancel();\n * </pre>\n * @param {!goog.result.DependentResult} dependentResult A Result that is\n *     dependent on the values of other Results (for example the Result of a\n *     goog.result.combine, goog.result.chain, or goog.result.transform call).\n * @return {boolean} True if any results were successfully canceled; otherwise\n *     false.\n * TODO(user): Implement a recursive version of this that cancels all\n * ancestor results.\n */\ngoog.result.cancelParentResults = function(dependentResult) {\n  var anyCanceled = false;\n  var results = dependentResult.getParentResults();\n  for (var n = 0; n < results.length; n++) {\n    anyCanceled |= results[n].cancel();\n  }\n  return !!anyCanceled;\n};\n\n\n\n/**\n * A DependentResult represents a Result whose eventual value depends on the\n * value of one or more other Results. For example, the Result returned by\n * @see goog.result.chain or @see goog.result.combine is dependent on the\n * Results given as arguments.\n *\n * @param {!Array<!goog.result.Result>} parentResults A list of Results that\n *     will affect the eventual value of this Result.\n * @constructor\n * @implements {goog.result.DependentResult}\n * @extends {goog.result.SimpleResult}\n * @private\n */\ngoog.result.DependentResultImpl_ = function(parentResults) {\n  goog.result.DependentResultImpl_.base(this, 'constructor');\n  /**\n   * A list of Results that will affect the eventual value of this Result.\n   * @type {!Array<!goog.result.Result>}\n   * @private\n   */\n  this.parentResults_ = parentResults;\n};\ngoog.inherits(goog.result.DependentResultImpl_, goog.result.SimpleResult);\n\n\n/**\n * Adds a Result to the list of Results that affect this one.\n * @param {!goog.result.Result} parentResult A result whose value affects the\n *     value of this Result.\n */\ngoog.result.DependentResultImpl_.prototype.addParentResult = function(\n    parentResult) {\n  this.parentResults_.push(parentResult);\n};\n\n\n/** @override */\ngoog.result.DependentResultImpl_.prototype.getParentResults = function() {\n  return this.parentResults_;\n};\n"],
"names":["goog","provide","require","result","successfulResult","goog.result.successfulResult","value","SimpleResult","setValue","failedResult","goog.result.failedResult","opt_error","setError","canceledResult","goog.result.canceledResult","cancel","wait","goog.result.wait","handler","opt_scope","waitOnSuccess","goog.result.waitOnSuccess","res","getState","Result","State","SUCCESS","call","getValue","waitOnError","goog.result.waitOnError","ERROR","getError","transform","goog.result.transform","transformer","returnedResult","DependentResultImpl_","chain","goog.result.chain","actionCallback","dependentResult","contingentResult","addParentResult","combine","goog.result.combine","var_args","results","array","clone","arguments","combinedResult","isResolved","PENDING","checkResults","every","forEach","combineOnSuccess","goog.result.combineOnSuccess","resolvedSuccessfully","apply","cancelParentResults","goog.result.cancelParentResults","anyCanceled","getParentResults","n","length","goog.result.DependentResultImpl_","parentResults","base","parentResults_","inherits","prototype","goog.result.DependentResultImpl_.prototype.addParentResult","parentResult","push","goog.result.DependentResultImpl_.prototype.getParentResults"]
}
