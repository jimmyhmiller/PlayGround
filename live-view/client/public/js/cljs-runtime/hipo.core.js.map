{"version":3,"sources":["hipo/core.cljs"],"mappings":";AAKA,AAAA,AAAeA;AAEf,AAAA,AAAMC,AAAYC;AAAlB,AAAsB,AAAMA,AAAGF;;AAE/B,AAAA,AAAMG,AACHD,AAAGE;AADN,AAEE,AAAMF,AAAGF,AAAgBI;;AAE3B,AAAA;;;;;;;;;;;;;;;AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAcFL,AAAGO;AAdP,AAcW,AAAA,AAACC,AAAcR,AAAGO;;;AAd7B,AAAA,AAAA,AAAMF,AAeFL,AAAGO,AAAGE;AAfV,AAea,AAACD,AAAcR,AAAG,AAACD,AAAWC,AAAIO,AAAGE;;;AAflD,AAAA,AAAA,AAAMJ,AAgBFL,AAAGU,AAAGH,AAAGE;AAhBb,AAiBI,AAAQ,AAAK,AAAA,AAAMC;AAAnB;AAAA,AAAA,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA,AAAA;;;AACA,AAACL,AAAYD,AAAGO;;AAChB,AAACI,AAAiBX,AAAGU,AAAGH,AAAGE;;;AAnB/B,AAAA,AAAA,AAAMJ;;AAAN","names":["hipo.core/hiccup-property","hipo.core/get-hiccup","el","hipo.core/set-hiccup!","h","var_args","G__37732","hipo.core/reconciliate!","js/Error","nh","hipo.core.reconciliate_BANG_","m","oh","hipo.interpreter/reconciliate!"],"sourcesContent":["(ns hipo.core\n  (:require [hipo.interceptor]\n            [hipo.interpreter :as hi])\n  (:require-macros hipo.core))\n\n(def ^:private hiccup-property \"hipo_hiccup\")\n\n(defn get-hiccup [el] (aget el hiccup-property))\n\n(defn set-hiccup!\n  [el h]\n  (aset el hiccup-property h))\n\n(defn reconciliate!\n  \"Reconciliate an existing DOM element to match an hiccup style vector.\n   Reconciliation works by diffing the hiccup used to create the DOM element with a new hiccup. Element created with `hipo.core/create` can be reconcilied without providing the previous hiccup.\n   Last argument is an optional map of options.\n\n   Options:\n\n   * force-compilation? fail create if DOM construction can't be fully compiled\n   * force-interpretation? bypass the DOM construction compilation\n   * create-element-fn\n   * namespaces\n   * attribute-handlers\n   * interceptors\n  \"\n  ([el nh] (reconciliate! el nh {}))\n  ([el nh m] (reconciliate! el (get-hiccup el) nh m))\n  ([el oh nh m]\n    (assert (not (nil? oh)) \"Previous hiccup can't be nil\")\n    (set-hiccup! el nh)\n    (hi/reconciliate! el oh nh m)))\n"]}