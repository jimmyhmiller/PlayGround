{"version":3,"sources":["live_view/core.cljs"],"mappings":";;AASA,AAAA,AAAMA,AAAsBC,AAAKC,AAAeC;AAAhD,AACE,AAAMC,AAAW,AAACC,AAAiBH,AAAe,AAACI,AAAmBH;AAAtE,AACE,AAAA,AAACI,AACAN,AACA,AAACO,AAAWJ,AAEY,AAAKK,AAAKC;AAAV,AACE,AACE,AACC,AAAA,AAACC,AAAE,AAAWD,AACd,AAACE,AAAI,AAAS,AAAcF;AAH/B;;AAAA,AAAA;;;;;AAQ3BN;;AAEJ,AAAA,AAAMS,AAAiBC;AAAvB,AACE,AAAMA,AAAS,AAACC,AAAKD;AACfE,AAAY,AAAA,AAACD;AADnB,AAEE,AAAKE;AAAL,AACE,AAAA,AAAAC,AAAMC,AAAcH;AAApB,AACE,AAAAI,AAAM,AAAA,AAAOH;AAAbG,AAAA,AAAA,AAAAA,AAAAC,AAAA,AAAAD,AAAA;AAAA,AAAA,AAAAA;AAAA;AACS,AAAID;AACF,AAACI,AAAOP,AAAY,AAAA,AAAAE,AAAClB,AAAsBc,AAASK,AAAa,AAAA,AAAQF;;AAD3E,AAAA,AAAA,AAAA,AAAA;;;;AADT;AAKQ,AACE,AAACM,AAAOP,AAAY,AAAA,AAAQC;;AAC5B,AAAMhB,AAAK,AAACO,AAAW,AAAA,AAAQS;AAA/B,AACE,AAAA,AAAAC,AAAeJ,AAASb;;AACxB,AAACsB,AAAOT,AAASb;;;;AAT7B,AAAA,AAAAqB,AAAA,AAAA,AAAAF;;;;;AAiBR,AAAA,AAAMI;AAAN,AACE,AAAMC,AAAS,AAACZ,AAAgBa;AAC5BC,AAAG,AAAAC,AAAA;AADP,AAEA,AAAM,AAAUD,AAAI;AAAA,AAAO,AAAA,AAAOA;;;AAClC,AAAM,AAAaA,AAAI,AAAKE;AAAL,AAAQ,AAAMC,AAAO,AAAA,AAACC;AAAd,AACE,AAAMC,AAAQ,AAACC,AAAaH,AAAO,AAAQD;AAA3C,AACE,AAACK,AAAIF;;AACL,AAACP,AAASO","names":["live-view.core/apply-morphdom-patch","node","current-hiccup","patch","new-hiccup","editscript.core/patch","editscript.edit/edits->script","js/module$node_modules$morphdom$dist$morphdom","crate.core.html","from","to","cljs.core._EQ_","cljs.core/not","live-view.core/create-renderer","dom-node","cljs.core.atom","virtual-dom","data","cljs.core/deref","current-vdom","G__48681","cljs.core/Keyword","js/Error","cljs.core/reset!","live-view.core/init","renderer","js/document.body","ws","js/WebSocket","e","reader","cognitect.transit.reader","payload","cognitect.transit/read","cljs.core.prn"],"sourcesContent":["(ns live-view.core\n  (:require [morphdom]\n            [editscript.core :as editscript]\n            [editscript.edit :as edit]\n            [crate.core :as crate]\n            [cognitect.transit :as transit]))\n\n\n\n(defn apply-morphdom-patch [node current-hiccup patch]\n  (let [new-hiccup (editscript/patch current-hiccup (edit/edits->script patch ))]\n    (morphdom\n     node\n     (crate/html new-hiccup)\n\n     #js {:onBeforeElUpdated (fn [from to]\n                               (cond \n                                 (and\n                                  (= (.-tagName to) \"INPUT\")\n                                  (not (.-value (.-attributes to))))\n                                 false\n\n                                 :else true))})\n   \n    new-hiccup))\n\n(defn create-renderer [dom-node]\n  (let [dom-node (atom dom-node)\n        virtual-dom (atom nil)]\n    (fn [data]\n      (let [current-vdom @virtual-dom]\n        (case (:type data)\n          :patch (if current-vdom\n                   (reset! virtual-dom (apply-morphdom-patch @dom-node current-vdom (:value data)))\n                   {:type :error\n                    :reason :no-state})\n          :init (do\n                  (reset! virtual-dom (:value data))\n                  (let [node (crate/html (:value data))]\n                    (.replaceWith @dom-node node)\n                    (reset! dom-node node))))))))\n\n\n\n\n\n\n\n(defn init []\n  (let [renderer (create-renderer js/document.body)\n      ws (js/WebSocket. \"ws://localhost:50505/loc/\")]\n  (set! (.-onopen ws) (fn [] (.send ws \"init\")))\n  (set! (.-onmessage ws) (fn [e] (let [reader (transit/reader :json)]\n                                   (let [payload (transit/read reader (.-data e))]\n                                     (prn payload)\n                                     (renderer payload)))))))\n"]}