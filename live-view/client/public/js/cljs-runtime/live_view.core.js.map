{"version":3,"sources":["live_view/core.cljs"],"mappings":"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","names":["live-view.core/hipo-options","ws","p__39053","vec__39054","cljs.core.nth","node","a","b","action","payload","e","writer","cognitect.transit.writer","cognitect.transit/write","cljs.core.assoc","or__4126__auto__","val","_","styles","seq__39057","cljs.core/seq","chunk__39058","count__39059","i__39060","vec__39067","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__39070","cljs.core/first","cljs.core/next","k","v","goog.object/set","cljs.core/name","live-view.core/apply-patch","current-hiccup","patch","new-hiccup","editscript.core/patch","editscript.edit/edits->script","hipo.core.reconciliate_BANG_","live-view.core/create-renderer","dom-node","cljs.core.atom","virtual-dom","data","cljs.core/deref","current-vdom","G__39073","cljs.core/Keyword","js/Error","cljs.core/reset!","v39074","el__37721__auto__","hipo.interpreter/create","hipo.core/set-hiccup!","live-view.core/init","js/WebSocket","renderer","js/document.body","reader","cognitect.transit.reader","cognitect.transit/read"],"sourcesContent":["(ns live-view.core\n  (:require [morphdom]\n            [editscript.core :as editscript]\n            [editscript.edit :as edit]\n            [cognitect.transit :as transit]\n            [hipo.core :as hipo]\n            [goog.object]))\n\n\n(defn hipo-options [ws]\n  {:attribute-handlers [{:target {:attr \"onchange\"}\n                         :fn (fn [node a b [action payload]]\n                               (.addEventListener node\n                                                  \"input\"\n                                                  (fn [e]\n                                                    (let [writer (transit/writer :json)]\n                                                      (.send ws \n                                                             (transit/write \n                                                              writer\n                                                              [action (assoc (or payload {}) :value (.-value (.-target e)))]))))))}\n                         {:target {:attr \"onsubmit\"}\n                         :fn (fn [node a b val]\n                               (.addEventListener node\n                                                 \"submit\"\n                                                (fn [e] \n                                                  (.preventDefault e)\n                                                  (let [writer (transit/writer :json)]\n                                                    (.send ws (transit/write writer val))))))}\n                        {:target {:attr \"onclick\"}\n                         :fn (fn [node a b val]\n                               (.addEventListener node\n                                                 \"click\"\n                                                (fn [e] \n                                                  (.preventDefault e)\n                                                  (let [writer (transit/writer :json)]\n                                                    (.send ws (transit/write writer val))))))}\n                        ;; The builtin style handler uses\n                        ;; aset which doesn't work for objects now\n                        {:target {:attr \"style\"} \n                         :fn (fn [node _ _ styles] \n                               (doseq [[k v] styles]\n                                 (goog.object/set (.-style ^js/HTMLElement node)\n                                                  (name k) v)))}]})\n\n\n(defn apply-patch [node current-hiccup patch]\n  (let [new-hiccup (editscript/patch current-hiccup (edit/edits->script patch ))]\n    (hipo/reconciliate!\n     node\n     new-hiccup)\n   \n    new-hiccup))\n\n(defn create-renderer [dom-node ws]\n  (let [dom-node (atom dom-node)\n        virtual-dom (atom nil)]\n    (fn [data]\n      (let [current-vdom @virtual-dom]\n        (case (:type data)\n          :patch (if current-vdom\n                   (reset! virtual-dom (apply-patch @dom-node current-vdom (:value data)))\n                   {:type :error\n                    :reason :no-state})\n          :init (do\n                  (reset! virtual-dom (:value data))\n                  (let [node (hipo/create (:value data) (hipo-options ws))]\n                    (.replaceWith @dom-node node)\n                    (reset! dom-node node))))))))\n\n\n\n\n\n\n\n\n(defn init []\n  (let [ws (js/WebSocket. \"ws://localhost:50505/loc/\")\n        renderer (create-renderer js/document.body ws)]\n  (set! (.-onopen ws) (fn [] (.send ws \"init\")))\n  (set! (.-onmessage ws) (fn [e] (let [reader (transit/reader :json)]\n                                   (let [payload (transit/read reader (.-data e))]\n                                     #_(prn payload)\n                                     (renderer payload)))))))\n"]}