{"version":3,"sources":["hipo/interpreter.cljs"],"mappings":"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","names":["p__37260","map__37261","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","hipo.interpreter/set-attribute!","el","ns","tag","sok","ov","nv","interceptors","m","temp__5733__auto__","en","hipo.hiccup/listener-name->event-name","cljs.core/name","cljs.core/map?","b__37191__auto__","v__37192__auto__","cljs.core/not","cljs.core/empty?","hipo.interceptor/call","cljs.core.merge","hn","l","temp__5735__auto__","or__4126__auto__","hipo.attribute/set-value!","js/Error","hipo.interpreter/append-children!","v","cljs.core/vector?","hipo.hiccup/flatten-children","h","cljs.core.nth","hipo.interpreter/create-child","cljs.core/rest","hipo.interpreter/default-create-element","attrs","hipo.dom/create-element","seq__37263","cljs.core/seq","chunk__37264","count__37265","i__37266","vec__37273","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__37276","cljs.core/first","cljs.core/next","hipo.interpreter/create-element","f","hipo.interpreter/create-vector","key","hipo.hiccup/keyns","hipo.hiccup/tag","hipo.hiccup/attributes","children","hipo.hiccup/children","hipo.hiccup/key->namespace","o","hipo.hiccup/literal?","js/document","hipo.interpreter/append-to-parent","cljs.core/seq?","cljs.core/vec","hipo.interpreter/create","hipo.interpreter/reconciliate-attributes!","om","nm","seq__37279","chunk__37281","count__37282","i__37283","vec__37291","vec__37294","seq__37297","chunk__37298","count__37299","i__37300","clojure.set.difference","cljs.core/set","cljs.core/keys","hipo.interpreter/child-key","cljs.core/meta","hipo.interpreter/keyed-children->indexed-map","cljs.core.into","iter__4529__auto__","s__37302","cljs.core/LazySeq","c__4527__auto__","size__4528__auto__","b__37304","cljs.core/chunk-buffer","i__37303","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__37301","cljs.core/cons","ih","cljs.core.map_indexed","idx","itm","p__37305","map__37306","hipo.interpreter/reconciliate-keyed-children!","och","nch","cs","hipo.dom.children","cljs.core/max","clojure.set.intersection","seq__37308","chunk__37309","count__37310","i__37311","vec__37330","vec__37333","vec__37339","vec__37342","i","ii","vec__37336","vec__37345","iii","oh","cel","hipo.interpreter/reconciliate!","ncel","hipo.dom/insert-child!","d","hipo.dom/remove-trailing-children!","p__37348","map__37349","hipo.interpreter/reconciliate-non-keyed-children!","oc","nc","n__4613__auto__","x__4217__auto__","y__4218__auto__","hipo.dom/remove-child!","hipo.dom/child","cljs.core.subvec","hipo.interpreter/keyed-children?","p__37351","map__37352","hipo.interpreter/reconciliate-children!","hipo.dom/clear!","p__37354","map__37355","hipo.interpreter/reconciliate-vector!","nh","nel","hipo.dom/replace!","p__37357","map__37358","hipo.dom/replace-text!"],"sourcesContent":["(ns hipo.interpreter\n  (:require [clojure.set :as set]\n            [hipo.attribute :as attr]\n            [hipo.dom :as dom]\n            [hipo.hiccup :as hic]\n            [hipo.interceptor :refer-macros [intercept]]))\n\n(defn set-attribute!\n  [el ns tag sok ov nv {:keys [interceptors] :as m}]\n  (if-not (identical? ov nv)\n    (if-let [en (hic/listener-name->event-name (name sok))]\n      (if-not (and (map? ov) (map? nv)\n                   (identical? (:name ov) (:name nv)))\n        (intercept interceptors (if nv :update-handler :remove-handler) (merge {:target el :name sok :old-value ov} (if nv {:new-value nv}))\n          (let [hn (str \"hipo_listener_\" en)]\n            (if-let [l (aget el hn)]\n              (.removeEventListener el en l))\n            (when-let [nv (or (:fn nv) nv)]\n              (.addEventListener el en nv)\n              (aset el hn nv)))))\n    (intercept interceptors (if nv :update-attribute :remove-attribute) (merge {:target el :name sok :old-value ov} (if nv {:new-value nv}))\n      (attr/set-value! el m ns tag sok ov nv)))))\n\n(declare create-child)\n\n(defn append-children!\n  [el v m]\n  {:pre [(vector? v)]}\n  (loop [v (hic/flatten-children v)]\n    (when-not (empty? v)\n      (if-let [h (nth v 0)]\n        (.appendChild el (create-child h m)))\n      (recur (rest v)))))\n\n(defn default-create-element\n  [ns tag attrs m]\n  (let [el (dom/create-element ns tag)]\n    (doseq [[sok v] attrs]\n      (if v\n        (set-attribute! el ns tag sok nil v m)))\n    el))\n\n(defn create-element\n  [ns tag attrs m]\n  (if-let [f (:create-element-fn m)]\n    (f ns tag attrs m)\n    (default-create-element ns tag attrs m)))\n\n(defn create-vector\n  [h m]\n  {:pre [(vector? h)]}\n  (let [key (hic/keyns h)\n        tag (hic/tag h)\n        attrs (hic/attributes h)\n        children (hic/children h)\n        el (create-element (hic/key->namespace key m) tag attrs m)]\n    (if children\n      (append-children! el children m))\n    el))\n\n(defn create-child\n  [o m]\n  {:pre [(or (hic/literal? o) (vector? o))]}\n  (if (hic/literal? o) ; literal check is much more efficient than vector check\n    (.createTextNode js/document o)\n    (create-vector o m)))\n\n(defn append-to-parent\n  [el o m]\n  (cond\n    (seq? o) (append-children! el (vec o) m)\n    (not (nil? o)) (.appendChild el (create-child o m))))\n\n(defn create\n  [o m]\n  (cond\n    (seq? o)\n    (let [f (.createDocumentFragment js/document)]\n      (append-children! f (vec o) m)\n      f)\n    (not (nil? o)) (create-child o m)))\n\n; Reconciliate\n\n(defn reconciliate-attributes!\n  [el ns tag om nm m]\n  (doseq [[sok nv] nm\n          :let [ov (get om sok)]]\n    (set-attribute! el ns tag sok ov nv m))\n  (doseq [sok (set/difference (set (keys om)) (set (keys nm)))]\n    (set-attribute! el ns tag sok (get om sok) nil m)))\n\n(declare reconciliate!)\n\n(defn- child-key [h] (:hipo/key (meta h)))\n(defn- keyed-children->indexed-map [v] (into {} (for [ih (map-indexed (fn [idx itm] [idx itm]) v)] [(child-key (nth ih 1)) ih])))\n\n(defn reconciliate-keyed-children!\n  \"Reconciliate a vector of children based on their associated key.\"\n  [el och nch {:keys [interceptors] :as m}]\n  (let [om (keyed-children->indexed-map och)\n        nm (keyed-children->indexed-map nch)\n        ; TODO reduce set calculation\n        cs (dom/children el (apply max (set/intersection (set (keys nm)) (set (keys om)))))]\n    ; Iterate over new elements looking for matching (same key) in old vector\n    ; TODO strategy is not optimale when removing first element. should remove first based on some threshold\n    (doseq [[i [ii h]] nm]\n      (if-let [[iii oh] (get om i)]\n        (let [cel (nth cs iii)]\n          ; existing node\n          (if (identical? ii iii)\n            ; node kept its position; reconciliate\n            (reconciliate! cel oh h m)\n            ; node changed location; detach, reconciliate and insert at the right location\n            (intercept interceptors :move {:target el :value h :index ii}\n              (let [ncel (.removeChild el cel)]\n                (reconciliate! ncel oh h m)\n                (dom/insert-child! el ii ncel)))))\n        ; new node; insert it at current index\n        (intercept interceptors :insert {:target el :value h :index ii}\n          (dom/insert-child! el ii (create-child h m)))))\n    ; All now useless nodes have been pushed at the end; remove them\n    (let [d (count (set/difference (set (keys om)) (set (keys nm))))]\n      (if (pos? d)\n        (intercept interceptors :remove-trailing {:target el :count d}\n          (dom/remove-trailing-children! el d))))))\n\n(defn reconciliate-non-keyed-children!\n  [el och nch {:keys [interceptors] :as m}]\n  (let [oc (count och)\n        nc (count nch)\n        d (- oc nc)]\n    ; Remove now unused elements if (count och) > (count nch)\n    (if (pos? d)\n      (intercept interceptors :remove-trailing {:target el :count d}\n        (dom/remove-trailing-children! el d)))\n    ; Assume children are always in the same order i.e. an element is identified by its position\n    ; Reconciliate all existing node\n    (dotimes [i (min oc nc)]\n      (let [ov (nth och i)\n            nv (nth nch i)]\n        (if-not (and (nil? ov) (nil? nv))\n          ; Reconciliate value unless previously nil (insert) or newly nil (remove)\n          (cond\n            (nil? ov)\n            (intercept interceptors :insert {:target el :value nv :index i}\n              (dom/insert-child! el i (create-child nv m)))\n            (nil? nv)\n            (intercept interceptors :remove {:target el :index i}\n              (dom/remove-child! el i))\n            :else\n            (if-let [cel (dom/child el i)]\n              (reconciliate! cel ov nv m))))))\n    ; Create new elements if (count nch) > (count oh)\n    (if (neg? d)\n      (if (identical? -1 d)\n        (if-let [h (nth nch oc)]\n          (intercept interceptors :append {:target el :value h}\n            (.appendChild el (create-child h m))))\n        (let [f (.createDocumentFragment js/document)\n              cs (if (identical? 0 oc) nch (subvec nch oc))]\n          ; An intermediary DocumentFragment is used to reduce the number of append to the attached node\n          (intercept interceptors :append {:target el :value cs}\n            (append-children! f cs m))\n          (.appendChild el f))))))\n\n(defn keyed-children? [v] (not (nil? (child-key (nth v 0)))))\n\n(defn reconciliate-children!\n  [el och nch {:keys [interceptors] :as m}]\n  (if (empty? nch)\n    (if-not (empty? och)\n      (intercept interceptors :clear {:target el}\n        (dom/clear! el)))\n    (if (keyed-children? nch)\n      (reconciliate-keyed-children! el och nch m)\n      (reconciliate-non-keyed-children! el och nch m))))\n\n(defn reconciliate-vector!\n  [el oh nh {:keys [interceptors] :as m}]\n  {:pre [(vector? nh)]}\n  (if (or (hic/literal? oh) (not (identical? (hic/tag nh) (hic/tag oh))))\n    (let [nel (create-child nh m)]\n      (intercept interceptors :replace {:target el :value nh}\n        (assert (.-parentElement el) \"Can't replace root element. If you want to change root element's type it must be encapsulated in a static element.\")\n        (dom/replace! el nel)))\n    (let [om (hic/attributes oh)\n          nm (hic/attributes nh)\n          och (hic/children oh)\n          nch (hic/children nh)]\n      (intercept interceptors :reconciliate {:target el :old-value och :new-value nch}\n        (reconciliate-children! el (hic/flatten-children och) (hic/flatten-children nch) m))\n      (reconciliate-attributes! el (hic/keyns nh) (hic/tag nh) om nm m))))\n\n(defn reconciliate!\n  [el oh nh {:keys [interceptors] :as m}]\n  {:pre [(or (vector? nh) (hic/literal? nh))\n         (or (nil? m) (map? m))]}\n  (intercept interceptors :reconciliate {:target el :old-value oh :new-value nh}\n    (if (hic/literal? nh) ; literal check is much more efficient than vector check\n      (if-not (identical? oh nh)\n        (intercept interceptors :replace {:target el :value nh}\n          (assert (.-parentElement el) \"Can't replace root element. If you want to change root element's type it must be encapsulated in a static element.\")\n          (dom/replace-text! el (str nh))))\n      (reconciliate-vector! el oh nh m))))\n"]}