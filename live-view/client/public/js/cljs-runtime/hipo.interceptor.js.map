{"version":3,"sources":["hipo/interceptor.cljs"],"mappings":"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","names":["hipo$interceptor$Interceptor$_intercept$dyn","x__4428__auto__","m__4429__auto__","hipo.interceptor/-intercept","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","hipo.interceptor/Interceptor","this","t","m","f","hipo.interceptor/call","v","i","cljs.core/first","s","cljs.core/rest","cljs.core/seq","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","hipo.interceptor/LogInterceptor","hipo.interceptor/->LogInterceptor","b","_","cljs.core/not","cljs.core.not_EQ_","js/console","cljs.core/name","cljs.core/clj->js","hipo.interceptor/TimeInterceptor","hipo.interceptor/->TimeInterceptor","label","hipo.interceptor/ProfileInterceptor","hipo.interceptor/->ProfileInterceptor","cljs.core._EQ_","hipo.interceptor/PerformanceInterceptor","hipo.interceptor/->PerformanceInterceptor","mark-begin","mark-end","js/performance","hipo.interceptor/StateInterceptor","hipo.interceptor/->StateInterceptor","a","o","p1__37201#","p2__37200#","cljs.core.swap_BANG_","cljs.core/cons","hipo.interceptor/StaticReconciliationInterceptor","hipo.interceptor/->StaticReconciliationInterceptor","cljs.core/contains?","cljs.core/meta","hipo.interceptor/IdentityReconciliationInterceptor","hipo.interceptor/->IdentityReconciliationInterceptor"],"sourcesContent":["(ns hipo.interceptor\n  (:require-macros hipo.interceptor))\n\n(defprotocol Interceptor\n  (-intercept [this t m f]))\n\n(defn call\n  [f v t m]\n  (let [i (first v)]\n    (-intercept i t m #(let [s (rest v)]\n                        (if (seq s)\n                          (call f s t m)\n                          (f))))))\n\n(deftype LogInterceptor [b]\n  Interceptor\n  (-intercept [_ t m f]\n    (if (or (not b) (not= :reconciliate t))\n      (.log js/console (name t) \" \" (clj->js m)))\n    (f)))\n\n(deftype TimeInterceptor [s]\n  Interceptor\n  (-intercept [_ t _ f]\n    (let [label (str s \"-\" (name t))]\n      (.time js/console label)\n      (f)\n      (.timeEnd js/console label))))\n\n(deftype ProfileInterceptor [label]\n  Interceptor\n  (-intercept [_ t _ f]\n    (when (= t :reconciliate)\n      (.profile js/console label)\n      (f)\n      (.profileEnd js/console label))\n    (f)))\n\n(deftype PerformanceInterceptor [label]\n  Interceptor\n  ; http://w3c.github.io/user-timing/\n  (-intercept [_ t _ f]\n    (let [mark-begin (str label \" begin \" t)\n          mark-end (str label \" end \" t)]\n      (.mark js/performance mark-begin)\n      (f)\n      (.mark js/performance mark-end)\n      (.measure js/performance (str label \" \" t) mark-begin mark-end))))\n\n(deftype StateInterceptor [a]\n  Interceptor\n  (-intercept [_ t o f]\n    (swap! a #(cons %2 %1) {:type t :value o})\n    (f)))\n\n(deftype StaticReconciliationInterceptor []\n  Interceptor\n  (-intercept [_ t o f]\n    (if (= :reconciliate t)\n      (if-not (contains? (meta (:new-value o)) :hipo/static)\n        (f))\n      (f))))\n\n(deftype IdentityReconciliationInterceptor []\n  Interceptor\n  (-intercept [_ t o f]\n    (if (= :reconciliate t)\n      (if-not (identical? (:old-value o) (:new-value o))\n        (f))\n      (f))))\n"]}