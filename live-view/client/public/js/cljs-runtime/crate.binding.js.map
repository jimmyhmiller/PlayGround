{"version":3,"sources":["crate/binding.cljs"],"mappings":"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","names":["this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","crate.binding/SubAtom","crate.binding/->SubAtom","atm","path","prevhash","watches","key","o","other","_","cljs.core/deref","cljs.core.get_in","this","writer","opts","cljs.core.pr_str","oldval","newval","seq__46249","cljs.core/seq","chunk__46250","count__46251","i__46252","vec__46264","cljs.core.nth","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__46267","cljs.core/first","cljs.core/next","f","cljs.core.assoc","cljs.core.dissoc","js/goog.getUid","crate.binding/subatom","vec__46292","cljs.core/coll?","cljs.core.concat","k","cljs.core.gensym","sa","cljs.core/hash","cljs.core/add-watch","ov","nv","latest","prev","latest-hash","cljs.core.not_EQ_","crate.binding/sub-reset!","new-value","cljs.core.swap_BANG_","cljs.core/assoc-in","var_args","G__46315","crate.binding/sub-swap!","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq46305","G__46306","G__46308","G__46312","G__46313","G__46314","self__4723__auto__","G__46328","x","G__46335","G__46336","y","G__46344","G__46345","G__46346","z","G__46352","G__46353","G__46354","G__46355","more","cljs.core.apply","crate.binding/sub-destroy!","cljs.core/remove-watch","crate$binding$computable$_depend$dyn","x__4428__auto__","m__4429__auto__","crate.binding/-depend","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","crate$binding$computable$_compute$dyn","crate.binding/-compute","crate.binding/computable","cljs.core/PROTOCOL_SENTINEL","crate.binding/Computed","crate.binding/->Computed","atms","value","func","meta","seq__46412","chunk__46413","count__46414","i__46415","vec__46431","vec__46439","cljs.core.conj","old","cljs.core.map","crate.binding/computed","neue","seq__46452","chunk__46453","count__46454","i__46455","crate.binding/compute","compu","crate.binding/depend-on","crate.binding/notify","w","v","cljs.core/-notify-watches","crate.binding/bindable-coll","crate$binding$bindable$_value$dyn","crate.binding/-value","crate$binding$bindable$_on_change$dyn","crate.binding/-on-change","crate.binding/bindable","crate.binding/atom-binding","crate.binding/->atom-binding","value-func","G__46578","G__46580","crate.binding/notifier","crate.binding/->notifier","seq__46591","chunk__46597","count__46600","i__46601","vec__46649","vec__46652","crate.binding/bound-collection","crate.binding/->bound-collection","notif","stuff","cljs.core/vals","p__46669","vec__46670","event","el","crate.binding/opt","bc","fexpr__46675","crate.binding/bc-add","elem","fexpr__46680","crate.binding/bc-remove","fexpr__46684","crate.binding/->indexed","coll","cljs.core/map?","cljs.core/set?","cljs.core.juxt","cljs.core/identity","cljs.core.map_indexed","cljs.core/vector","crate.binding/->keyed","keyfn","cljs.core.into","args__4742__auto__","argseq__4743__auto__","crate.binding/->path","seq46690","G__46691","segs","or__4126__auto__","crate.binding/bc-compare","pset","cljs.core/keys","nset","added","cljs.core/sorted-set","clojure.set.difference","removed","seq__46698","chunk__46699","count__46700","i__46701","a","seq__46705","chunk__46706","count__46707","i__46708","r","crate.binding/bound-coll","p__46717","vec__46718","seq46715","G__46716","vec__46724","cljs.core/not","cljs.core.comp","cljs.core/second","cljs.core/sorted-map","crate.binding/map-bound","p__46739","vec__46741","seq46728","G__46729","G__46730","as","crate.binding/binding?","b","cljs.core/native-satisfies?","crate.binding/binding-coll?","crate.binding/deref?","cljs.core/IDeref","crate.binding/value","crate.binding/index","sub-atom","cljs.core/last","crate.binding/on-change","crate.binding/bound","p__46787","vec__46793","seq46772","G__46773"],"sourcesContent":["(ns crate.binding (:require [clojure.set :as set]))\n\n;;*********************************************************\n;; subatom\n;;*********************************************************\n\n(deftype SubAtom [atm path prevhash watches key]\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [_] (when atm (get-in @atm path)))\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (-write writer (str \"#<SubAtom: \" (pr-str (get-in @atm path)) \">\")))\n\n  IWatchable\n  (-notify-watches [this oldval newval]\n    (doseq [[key f] watches]\n      (f key this oldval newval)))\n  (-add-watch [this key f]\n    (when f\n      (set! (.-watches this) (assoc watches key f))))\n  (-remove-watch [this key]\n    (set! (.-watches this) (dissoc watches key)))\n\n  IHash\n  (-hash [this] (goog.getUid this)))\n\n(defn subatom\n  ([atm path]\n   (let [path (if (coll? path)\n                path\n                [path])\n         [atm path] (if (instance? SubAtom atm)\n                      [(.-atm atm) (concat (.-path atm) path)]\n                      [atm path])\n         k (gensym \"subatom\")\n         sa (SubAtom. atm path (hash (get-in @atm path)) nil k)]\n     (add-watch atm k\n                (fn [_ _ ov nv]\n                  (let [latest (get-in nv path)\n                        prev (get-in ov path)\n                        latest-hash (hash latest)]\n                    (when (and (not= (.-prevhash sa) latest-hash)\n                               ;;TODO: How is it possible that the hashes are different\n                               ;;when the items are the same? This seems like a CLJS bug.\n                               (not= prev latest))\n                      (set! (.-prevhash sa) latest-hash)\n                      (-notify-watches sa (get-in ov path) latest)))))\n     sa)))\n\n(defn sub-reset!\n  \"Sets the value of atom to newval without regard for the\n  current value. Returns newval.\"\n  [sa new-value]\n  (swap! (.-atm sa) assoc-in (.-path sa) new-value)\n  new-value)\n\n(defn sub-swap!\n  \"Atomically swaps the value of atom to be:\n  (apply f current-value-of-atom args). Note that f may be called\n  multiple times, and thus should be free of side effects.  Returns\n  the value that was swapped in.\"\n  ([sa f]\n     (sub-reset! sa (f @sa)))\n  ([sa f x]\n     (sub-reset! sa (f @sa x)))\n  ([sa f x y]\n     (sub-reset! sa (f @sa x y)))\n  ([sa f x y z]\n     (sub-reset! sa (f @sa x y z)))\n  ([sa f x y z & more]\n     (sub-reset! sa (apply f @sa x y z more))))\n\n(defn sub-destroy! [sa]\n  (remove-watch (.-atm sa) (.-key sa))\n  (set! (.-watches sa) nil)\n  (set! (.-atm sa) nil))\n\n;;*********************************************************\n;; computed\n;;*********************************************************\n\n(defprotocol computable\n  (-depend [this atm] \"depend on an atom\")\n  (-compute [this] \"compute the latest value\"))\n\n(deftype Computed [atms value func watches key meta]\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [_] value)\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (-write writer (str \"#<Computed: \" (pr-str value) \">\")))\n\n  IWatchable\n  (-notify-watches [this oldval newval]\n    (doseq [[key f] watches]\n      (f key this oldval newval)))\n  (-add-watch [this key f]\n    (when f\n      (set! (.-watches this) (assoc watches key f))))\n  (-remove-watch [this key]\n    (set! (.-watches this) (dissoc watches key)))\n\n  IHash\n  (-hash [this] (goog.getUid this))\n\n  IMeta\n  (-meta [this] meta)\n\n  computable\n  (-depend [this atm]\n           (set! (.-atms this) (conj (.-atms this) atm))\n           (add-watch atm key (fn [_ _ _ _]\n                                (-compute this))))\n  (-compute [this]\n            (let [old (.-value this)\n                  nv (apply func (map deref atms))]\n              (set! (.-value this) nv)\n              (-notify-watches this old nv)\n            )))\n\n(defn computed [atms func]\n   (let [k (gensym \"computed\")\n         neue (Computed. [] nil func nil k nil)]\n     (-compute neue)\n     (doseq [atm atms]\n       (-depend neue atm))\n     neue))\n\n(defn compute [compu]\n  (-compute compu))\n\n(defn depend-on [compu atm]\n  (-depend compu atm))\n\n;;*********************************************************\n;;rest\n;;*********************************************************\n\n(defn notify [w o v]\n  (-notify-watches w o v))\n\n(defprotocol bindable-coll)\n\n(defprotocol bindable\n  (-value [this] \"get the current value of this binding\")\n  (-on-change [this func] \"On change of this binding execute func\"))\n\n(deftype atom-binding [atm value-func]\n  bindable\n  (-value [this] (value-func @atm))\n  (-on-change [this func]\n    (add-watch atm (gensym \"atom-binding\") #(func (-value this)))))\n\n(deftype notifier [watches]\n  IWatchable\n  (-notify-watches [this oldval newval]\n    (doseq [[key f] watches]\n      (f key this oldval newval)))\n  (-add-watch [this key f]\n    (set! (.-watches this) (assoc watches key f)))\n  (-remove-watch [this key]\n    (set! (.-watches this) (dissoc watches key))))\n\n(deftype bound-collection [atm notif opts stuff]\n  bindable-coll\n  bindable\n  (-value [this] (map :elem (vals (.-stuff this))))\n  (-on-change [this func]\n    (add-watch notif\n               (gensym \"bound-coll\")\n               (fn [_ _ _ [event el v]]\n                 (func event el v)))))\n\n(defn opt [bc k]\n  ((.-opts bc) k))\n\n(defn- bc-add [bc path key]\n  (let [sa (subatom (.-atm bc) path)\n        elem ((opt bc :as) sa)]\n    (set! (.-stuff bc) (assoc (.-stuff bc) key {:elem elem\n                                                :subatom sa}))\n    (notify (.-notif bc) nil [:add elem @sa])))\n\n(defn- bc-remove [bc key]\n  (let [notif (.-notif bc)\n        prev  ((.-stuff bc) key)]\n    (set! (.-stuff bc) (dissoc (.-stuff bc) key))\n    (notify (.-notif bc) nil [:remove (:elem prev) nil])\n    (sub-destroy! (:subatom prev))))\n\n(defn ->indexed [coll]\n  (cond\n    (map? coll) (seq coll)\n    (set? coll) (map (juxt identity identity) coll)\n    :else (map-indexed vector coll)))\n\n(defn ->keyed [coll keyfn]\n  (into #{} (map keyfn (->indexed coll))))\n\n(defn ->path [bc & segs]\n  (concat (or (opt bc :path) []) segs))\n\n(defn- bc-compare [bc neue]\n  (let [prev (.-stuff bc)\n        pset (into #{} (keys prev))\n        nset (->keyed neue (opt bc :keyfn))\n        added (into (sorted-set) (set/difference nset pset))\n        removed (into (sorted-set) (set/difference pset nset))]\n    (doseq [a added]\n      (bc-add bc a a))\n    (doseq [r removed]\n      (bc-remove bc r))))\n\n(defn bound-coll [atm & [path opts]]\n  (let [[path opts] (if opts\n                      [path opts]\n                      [nil path])\n        atm (if-not path\n              atm\n              (subatom atm path))\n        opts (assoc opts :path path)\n        opts (if-not (:keyfn opts)\n               (assoc opts :keyfn first)\n               (assoc opts :keyfn (comp (:keyfn opts) second)))\n        bc (bound-collection. atm (notifier. nil) opts (sorted-map))]\n    (add-watch atm (gensym \"bound-coll\") (fn [_ _ _ neue]\n                                           (bc-compare bc neue)))\n    (bc-compare bc @atm)\n    bc))\n\n(defn map-bound [as atm & [opts]]\n  (let [opts (assoc opts :as as)\n        atm (if-not (:path opts)\n              atm\n              (subatom atm (:path opts)))\n        opts (if-not (:keyfn opts)\n               (assoc opts :keyfn first)\n               (assoc opts :keyfn (comp (:keyfn opts) second)))\n        bc (bound-collection. atm (notifier. nil) opts (sorted-map))]\n    (add-watch atm (gensym \"bound-coll\") (fn [_ _ _ neue]\n                                           (bc-compare bc neue)))\n    (bc-compare bc @atm)\n    bc))\n\n(defn binding? [b]\n  (satisfies? bindable b))\n\n(defn binding-coll? [b]\n  (satisfies? bindable-coll b))\n\n(defn deref? [atm]\n  (satisfies? IDeref atm))\n\n(defn value [b]\n  (-value b))\n\n(defn index [sub-atom]\n  (last (.-path sub-atom)))\n\n(defn on-change [b func]\n  (-on-change b func))\n\n(defn bound [atm & [func]]\n  (let [func (or func identity)]\n    (atom-binding. atm func)))\n"]}