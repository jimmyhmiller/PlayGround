{"version":3,"sources":["crate/compiler.cljs"],"mappings":"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","names":["crate.compiler/xmlns","crate.compiler/group-id","cljs.core.atom","crate.compiler/bindings","crate.compiler/capture-binding","tag","b","cljs.core.swap_BANG_","cljs.core/conj","crate$compiler$Element$_elem$dyn","x__4428__auto__","m__4429__auto__","crate.compiler/-elem","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","crate.compiler/Element","this","crate.compiler/as-content","parent","content","seq__46925","cljs.core/seq","chunk__46926","count__46927","i__46928","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","c","child","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/map?","goog.dom/createTextNode","cljs.core/vector?","crate.compiler/elem-factory","cljs.core/seq?","crate.binding/binding-coll?","G__46991","G__46992","G__47019","G__47020","crate.binding/value","crate.binding/binding?","G__46993","G__46994","G__47021","G__47022","goog.dom/appendChild","js/crate","js/crate.compiler","js/crate.compiler.dom-binding","method-table__4619__auto__","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__47030","cljs.core/MultiFn","cljs.core.symbol","crate.compiler/dom-binding","type","_","elem","crate.binding/on-change","v","goog.dom/removeChildren","p__47031","vec__47032","cljs.core.nth","k","crate.compiler/dom-attr","p__47041","vec__47042","crate.compiler/dom-style","crate.compiler/dom-add","bc","temp__5733__auto__","adder","crate.binding/opt","crate.compiler/dom-remove","remover","goog.dom/removeNode","pred__47061","expr__47062","js/Error","cljs.core/=","crate.compiler/handle-bindings","bs","seq__47067","chunk__47068","count__47069","i__47070","vec__47080","vec__47084","var_args","G__47088","seq__47092","chunk__47093","count__47094","i__47095","vec__47106","vec__47114","crate.compiler.dom_style","goog.style/setStyle","cljs.core/name","G__47147","attrs","seq__47151","chunk__47152","count__47153","i__47154","vec__47164","vec__47172","crate.compiler.dom_attr","cljs.core._EQ_","crate.compiler/re-tag","crate.compiler/normalize-map-attrs","map-attrs","cljs.core.into","cljs.core.map","p__47175","vec__47176","n","cljs.core.filter","cljs.core.comp","cljs.core/boolean","cljs.core/second","p__47184","vec__47186","seq__47187","first__47188","crate.compiler/normalize-element","cljs.core/Keyword","cljs.core/Symbol","vec__47195","vec__47198","id","class","cljs.core/re-matches","nsp","vec__47201","t","clojure.string.split","ns-xmlns","G__47205","cljs.core.keyword","or__4126__auto__","tag-attrs","p1__47182#","clojure.string/replace","cljs.core.merge","crate.compiler/parse-content","cljs.core/rest","crate.compiler/create-elem","js/document","tag-def","bindings-orig-val__47207","bindings-temp-val__47208","vec__47209","cljs.core/deref","crate.compiler/add-optional-attrs","func","args","vec__47216","seq__47217","first__47218","body","cljs.core.apply","cljs.core/vector"],"sourcesContent":["(ns crate.compiler\n  (:require [goog.dom :as gdom]\n            [goog.style :as gstyle]\n            [clojure.string :as string]\n            [crate.binding :as bind]))\n\n(def xmlns {:xhtml \"http://www.w3.org/1999/xhtml\"\n            :svg \"http://www.w3.org/2000/svg\"})\n\n;; ********************************************\n;; Element creation via Hiccup-like vectors\n;; ********************************************\n\n(declare elem-factory dom-attr dom-style)\n(def group-id (atom 0))\n\n\n;; ********************************************\n;; Data binding\n;; ********************************************\n\n(def ^:dynamic bindings (atom []))\n\n(defn capture-binding [tag b]\n  (swap! bindings conj [tag b]))\n\n(defprotocol Element\n  (-elem [this]))\n\n(defn as-content [parent content]\n  (doseq[c content]\n    (let [child (cond\n                 \t(satisfies? Element c) (-elem c)\n                  (nil? c) nil\n                  (map? c) (throw \"Maps cannot be used as content\")\n                  (string? c) (gdom/createTextNode c)\n                  (vector? c) (elem-factory c)\n                  ;;TODO: there's a bug in clojurescript that prevents seqs from\n                  ;; being considered collections\n                  (seq? c) (as-content parent c)\n                  (bind/binding-coll? c) (do (capture-binding :coll c) (as-content parent [(bind/value c)]))\n                  (bind/binding? c) (do (capture-binding :text c) (as-content parent [(bind/value c)]))\n                  (.-nodeName c) c\n                  (.-get c) (.get c 0)\n                  :else (gdom/createTextNode (str c)))]\n      (when child\n        (gdom/appendChild parent child)))))\n\n(defmulti dom-binding (fn [type _ _] type))\n(defmethod dom-binding :text [_ b elem]\n  (bind/on-change b (fn [v]\n                      (gdom/removeChildren elem)\n                      (as-content elem [v]))))\n\n(defmethod dom-binding :attr [_ [k b] elem]\n  (bind/on-change b (fn [v]\n                      (dom-attr elem k v))))\n\n(defmethod dom-binding :style [_ [k b] elem]\n  (bind/on-change b (fn [v]\n                      (if k\n                        (dom-style elem k v)\n                        (dom-style elem v)))))\n\n(defn dom-add [bc parent elem v]\n  (if-let [adder (bind/opt bc :add)]\n    (adder parent elem v)\n    (gdom/appendChild parent elem)))\n\n(defn dom-remove [bc elem]\n  (if-let [remover (bind/opt bc :remove)]\n    (remover elem)\n    (gdom/removeNode elem)))\n\n(defmethod dom-binding :coll [_ bc parent]\n  (bind/on-change bc (fn [type elem v]\n                       (condp = type\n                         :add (dom-add bc parent elem v)\n                         :remove (dom-remove bc elem)))))\n\n(defn handle-bindings [bs elem]\n  (doseq [[type b] bs]\n    (dom-binding type b elem)))\n\n;; ********************************************\n;; element handling\n;; ********************************************\n\n(defn dom-style\n  ([elem v]\n   (cond\n     (string? v) (. elem (setAttribute \"style\" v))\n     (map? v) (doseq [[k v] v]\n                (dom-style elem k v))\n     (bind/binding? v) (do\n                         (capture-binding :style [nil v])\n                         (dom-style elem (bind/value v))))\n   elem)\n  ([elem k v]\n   (let [v (if (bind/binding? v)\n             (do\n               (capture-binding :style [k v])\n               (bind/value v))\n             v)]\n     (gstyle/setStyle elem (name k) v))))\n\n(defn dom-attr\n  ([elem attrs]\n   (when elem\n     (if-not (map? attrs)\n       (. elem (getAttribute (name attrs)))\n       (do\n         (doseq [[k v] attrs]\n           (dom-attr elem k v))\n         elem))))\n  ([elem k v]\n   (if (= k :style)\n     (dom-style elem v)\n     (let [v (if (bind/binding? v)\n               (do\n                 (capture-binding :attr [k v])\n                 (bind/value v))\n               v)]\n       (. elem (setAttribute (name k) v))))\n   elem))\n\n;; From Weavejester's Hiccup: https://github.com/weavejester/hiccup/blob/master/src/hiccup/core.clj#L57\n(def ^{:doc \"Regular expression that parses a CSS-style id and class from a tag name.\" :private true}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(defn- normalize-map-attrs [map-attrs]\n  (into {} (map (fn [[n v]] (if (true? v) [n (name n)] [n v]))\n                (filter (comp boolean second)\n                        map-attrs))))\n\n(defn- normalize-element\n  \"Ensure a tag vector is of the form [tag-name attrs content].\"\n  [[tag & content]]\n  (when (not (or (keyword? tag) (symbol? tag) (string? tag)))\n    (throw (str tag \" is not a valid tag name.\")))\n  (let [[_ tag id class] (re-matches re-tag (name tag))\n        [nsp tag]     (let [[nsp t] (string/split tag #\":\")\n                               ns-xmlns (xmlns (keyword nsp))]\n                           (if t\n                             [(or ns-xmlns nsp) t]\n                             [(:xhtml xmlns) nsp]))\n        tag-attrs        (into {}\n                               (filter #(not (nil? (second %)))\n                                       {:id (or id nil)\n                                        :class (if class (string/replace class #\"\\.\" \" \"))}))\n        map-attrs        (first content)]\n    (if (map? map-attrs)\n      [nsp tag (merge tag-attrs (normalize-map-attrs map-attrs)) (next content)]\n      [nsp tag tag-attrs content])))\n\n(defn parse-content [elem content]\n  (let [attrs (first content)]\n  (if (map? attrs)\n    (do\n      (dom-attr elem attrs)\n      (rest content))\n    content)))\n\n(def create-elem (if (.-createElementNS js/document)\n                   (fn [nsp tag]\n                     (.createElementNS js/document nsp tag))\n                   (fn [_ tag]\n                     (.createElement js/document tag))))\n\n(defn elem-factory [tag-def]\n  (binding [bindings (atom [])]\n    (let [[nsp tag attrs content] (normalize-element tag-def)\n          elem (create-elem nsp tag)]\n      (dom-attr elem attrs)\n      (as-content elem content)\n      (handle-bindings @bindings elem)\n      elem)))\n\n(defn add-optional-attrs\n  \"Add an optional attribute argument to a function that returns a vector tag.\"\n  [func]\n  (fn [& args]\n    (if (map? (first args))\n      (let [[tag & body] (apply func (rest args))]\n        (if (map? (first body))\n          (apply vector tag (merge (first body) (first args)) (rest body))\n          (apply vector tag (first args) body)))\n      (apply func args))))\n"]}