{"version":3,"sources":["editscript/diff/quick.cljc"],"mappings":"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","names":["editscript.diff.quick/diff*","script","path","a","b","opts","editscript.diff.quick/diff-map","cljs.core/reduce-kv","_","ka","va","path'","cljs.core.conj","cljs.core/contains?","G__46239","G__46240","G__46241","G__46242","G__46243","cljs.core.get","G__46244","G__46245","G__46246","G__46247","G__46248","editscript.edit/nada","kb","vb","G__46256","G__46257","G__46258","G__46259","G__46260","editscript.diff.quick/diff-vec","cljs.core.reduce","p__46270","vec__46271","cljs.core.nth","ia","ia'","ib","op","G__46274","cljs.core/Keyword","G__46275","G__46276","G__46277","G__46278","G__46279","G__46280","G__46281","G__46282","G__46283","G__46284","G__46287","G__46288","G__46289","G__46290","G__46291","cljs.core/transient","editscript.util.common/vec-edits","editscript.diff.quick/diff-set","seq__46295","cljs.core/seq","chunk__46296","count__46297","i__46298","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","clojure.set.difference","G__46323","G__46324","G__46325","G__46326","G__46327","G__46330","G__46331","G__46332","G__46333","G__46334","seq__46337","chunk__46338","count__46339","i__46340","G__46363","G__46364","G__46365","G__46366","G__46367","G__46369","G__46370","G__46371","G__46372","G__46373","editscript.diff.quick/diff-lst","cljs.core/vec","editscript.diff.quick/diff-val","cljs.core._EQ_","editscript.edit/get-type","editscript.edit/delete-data","editscript.edit/replace-data","G__46381","js/Error","editscript.edit/add-data","G__46384","fexpr__46390","G__46392","fexpr__46395","G__46396","fexpr__46399","G__46408","fexpr__46411","G__46416","fexpr__46434","editscript.util.common/diff-str","var_args","G__46445","editscript.diff.quick/diff","editscript.diff.quick.diff","editscript.edit/edits->script","editscript.util.common/diff-algo"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns ^:no-doc editscript.diff.quick\n  (:require [clojure.set :as set]\n            [editscript.edit :as e]\n            [editscript.util.common :as c\n             #?@(:cljs [:include-macros true])]))\n\n#?(:clj (set! *warn-on-reflection* true))\n#?(:clj (set! *unchecked-math* :warn-on-boxed))\n\n(defn ^:declared diff* [script path a b opts])\n\n(defn- diff-map\n  [script path a b opts]\n  (reduce-kv\n    (fn [_ ka va]\n      (let [path' (conj path ka)]\n        (if (contains? b ka)\n          (diff* script path' va (get b ka) opts)\n          (diff* script path' va (e/nada) opts))))\n    nil\n    a)\n  (reduce-kv\n    (fn [_ kb vb]\n      (when-not (contains? a kb)\n        (diff* script (conj path kb) (e/nada) vb opts)))\n    nil\n    b))\n\n(defn- diff-vec\n  \"Adjust the indices to have a correct editscript\"\n  [script path a b opts]\n  (reduce\n    (fn [[^long ia ^long ia' ^long ib] op]\n      (case op\n        :- (do (diff* script (conj path ia') (get a ia) (e/nada) opts)\n               [(inc ia) ia' ib])\n        :+ (do (diff* script (conj path ia') (e/nada) (get b ib) opts)\n               [ia (inc ia') (inc ib)])\n        :r (do (diff* script (conj path ia') (get a ia) (get b ib) opts)\n               [(inc ia) (inc ia') (inc ib)])\n        [(+ ia ^long op) (+ ia' ^long op) (+ ib ^long op)]))\n    (transient [0 0 0])\n    (c/vec-edits a b)))\n\n(defn- diff-set\n  [script path a b opts]\n  (doseq [va (set/difference a b)]\n    (diff* script (conj path va) va (e/nada) opts))\n  (doseq [vb (set/difference b a)]\n    (diff* script (conj path vb) (e/nada) vb opts)))\n\n(defn- diff-lst\n  [script path a b opts]\n  (diff-vec script path (vec a) (vec b) opts))\n\n(defn- diff-val\n  [script path a b]\n  (if (= (e/get-type b) :nil)\n    (e/delete-data script path)\n    (e/replace-data script path b)))\n\n(defn diff*\n  [script path a b opts]\n  (when-not (= a b)\n    (case (e/get-type a)\n      :nil (e/add-data script path b)\n      :map (c/coll-case a b script path :map #'diff-map opts)\n      :vec (c/coll-case a b script path :vec #'diff-vec opts)\n      :set (c/coll-case a b script path :set #'diff-set opts)\n      :lst (c/coll-case a b script path :lst #'diff-lst opts)\n      :str (if (:str-diff? opts)\n             (c/coll-case a b script path :str\n                          #'editscript.util.common/diff-str opts)\n             (diff-val script path a b))\n      :val (diff-val script path a b))))\n\n(defn diff\n  \"Create an EditScript that represents the difference between `b` and `a`\n  This algorithm is fast, but it does not attempt to generate an EditScript\n  that is minimal in size\"\n  ([a b]\n   (diff a b {:str-diff? false}))\n  ([a b opts]\n   (let [script (e/edits->script [])]\n     (diff* script [] a b opts)\n     script)))\n\n(defmethod c/diff-algo :quick\n  [a b opts]\n  (diff a b opts))\n"]}