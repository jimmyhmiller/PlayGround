{"version":3,"sources":["crate/util.cljs"],"mappings":"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","names":["crate.util/*base-url*","var_args","G__46565","crate.util/as-str","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","seq46563","G__46564","cljs.core/first","cljs.core/next","self__4723__auto__","x","cljs.core/Symbol","cljs.core/Keyword","cljs.core/name","xs","s","more","crate.util.as_str","crate.util/escape-html","text","clojure.string/replace","crate.util/to-uri","uri","cljs.core/re-matches","crate.util/url-encode-component","js/encodeURIComponent","crate.util/url-encode","params","clojure.string.join","iter__4529__auto__","s__46587","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__46589","cljs.core/chunk-buffer","i__46588","vec__46593","cljs.core/-nth","cljs.core.nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46586","cljs.core/chunk-rest","vec__46602","cljs.core/cons","cljs.core/rest","k","v","args__4742__auto__","argseq__4743__auto__","crate.util/url","seq46606","self__4724__auto__","args","cljs.core/last","cljs.core/butlast","cljs.core.apply","cljs.core/str","cljs.core/map?","cljs.core/chunk-first"],"sourcesContent":["(ns crate.util\n  (:require [clojure.string :as str]))\n\n(def ^:dynamic *base-url* nil)\n\n(defn as-str\n  ([] \"\")\n  ([x]\n    ; TODO: Maybe use something like (satisfies? INamed x) instead?\n    (if (or (symbol? x) (keyword? x))\n      (name x)\n      (str x)))\n  ([x & xs]\n    ((fn [s more]\n       (if more\n         (recur (str s (as-str (first more))) (next more))\n         s))\n     (as-str x) xs)))\n\n(defn escape-html\n  \"Change special characters into HTML character entities.\"\n  [text]\n  (-> (as-str text)\n    (str/replace \"&\"  \"&amp;\")\n    (str/replace \"<\"  \"&lt;\")\n    (str/replace \">\"  \"&gt;\")\n    (str/replace \"\\\"\" \"&quot;\")))\n\n(defn to-uri\n  \"Prepends the base-url to the supplied URI.\"\n  [uri]\n  (if (re-matches #\"^\\w+:.*\" uri)\n    uri\n    (str *base-url* uri)))\n\n(defn url-encode-component [s]\n  \"urlencode\"\n  (js/encodeURIComponent (as-str s)))\n\n(defn url-encode\n  \"Turn a map of parameters into a urlencoded string.\"\n  [params]\n  (str/join \"&\"\n    (for [[k v] params]\n      (str (url-encode-component k) \"=\" (url-encode-component v)))))\n\n(defn url\n  \"Creates a URL string from a variable list of arguments and an optional\n  parameter map as the last argument. For example:\n    (url \\\"/group/\\\" 4 \\\"/products\\\" {:page 9})\n    => \\\"/group/4/products?page=9\\\"\"\n  [& args]\n  (let [params (last args)\n        args   (butlast args)]\n    (str\n      (to-uri\n        (str (apply str args)\n             (if (map? params)\n               (str \"?\" (url-encode params))\n               params))))))\n"]}