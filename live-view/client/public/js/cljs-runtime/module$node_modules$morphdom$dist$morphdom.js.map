{
"version":3,
"file":"module$node_modules$morphdom$dist$morphdom.js",
"lineCount":19,
"mappings":"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",
"sources":["node_modules/morphdom/dist/morphdom.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$morphdom$dist$morphdom\"] = function(global,require,module,exports) {\n'use strict';\n\nvar DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    // document-fragments dont have attributes so lets not do anything\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    // update attributes on original DOM element\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n        attr = toNodeAttrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                if (attr.prefix === 'xmlns'){\n                    attrName = attr.name; // It's not allowed to set an attribute with the XMLNS namespace without specifying the `xmlns` prefix\n                }\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n        attr = fromNodeAttrs[d];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n\n            if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n                fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n            }\n        } else {\n            if (!toNode.hasAttribute(attrName)) {\n                fromNode.removeAttribute(attrName);\n            }\n        }\n    }\n}\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && 'content' in doc.createElement('template');\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n    var template = doc.createElement('template');\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n    if (!range) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n    var fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n}\n\n/**\n * This is about the same\n * var html = new DOMParser().parseFromString(str, 'text/html');\n * return html.body.firstChild;\n *\n * @method toElement\n * @param {String} str\n */\nfunction toElement(str) {\n    str = str.trim();\n    if (HAS_TEMPLATE_SUPPORT) {\n      // avoid restrictions on content for things like `<tr><th>Hi</th></tr>` which\n      // createContextualFragment doesn't support\n      // <template> support not available in IE\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    // If the target element is a virtual DOM node or SVG node then we may\n    // need to normalize the tag name before comparing. Normal HTML elements that are\n    // in the \"http://www.w3.org/1999/xhtml\"\n    // are converted to upper case\n    if (fromCodeStart <= 90 && toCodeStart >= 97) { // from is upper and to is lower\n        return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) { // to is upper and from is lower\n        return toNodeName === fromNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name);\n        }\n    }\n}\n\nvar specialElHandlers = {\n    OPTION: function(fromEl, toEl) {\n        var parentNode = fromEl.parentNode;\n        if (parentNode) {\n            var parentName = parentNode.nodeName.toUpperCase();\n            if (parentName === 'OPTGROUP') {\n                parentNode = parentNode.parentNode;\n                parentName = parentNode && parentNode.nodeName.toUpperCase();\n            }\n            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {\n                if (fromEl.hasAttribute('selected') && !toEl.selected) {\n                    // Workaround for MS Edge bug where the 'selected' attribute can only be\n                    // removed if set to a non-empty value:\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n                    fromEl.setAttribute('selected', 'selected');\n                    fromEl.removeAttribute('selected');\n                }\n                // We have to reset select element's selectedIndex to -1, otherwise setting\n                // fromEl.selected using the syncBooleanAttrProp below has no effect.\n                // The correct selectedIndex will be set in the SELECT special handler below.\n                parentNode.selectedIndex = -1;\n            }\n        }\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!toEl.hasAttribute('value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!toEl.hasAttribute('multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            // We have to loop through children of fromEl, not toEl since nodes can be moved\n            // from toEl to fromEl directly when morphing.\n            // At the time this special handler is invoked, all children have already been morphed\n            // and appended to / removed from fromEl, so using fromEl here is safe and correct.\n            var curChild = fromEl.firstChild;\n            var optgroup;\n            var nodeName;\n            while(curChild) {\n                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n                if (nodeName === 'OPTGROUP') {\n                    optgroup = curChild;\n                    curChild = optgroup.firstChild;\n                } else {\n                    if (nodeName === 'OPTION') {\n                        if (curChild.hasAttribute('selected')) {\n                            selectedIndex = i;\n                            break;\n                        }\n                        i++;\n                    }\n                    curChild = curChild.nextSibling;\n                    if (!curChild && optgroup) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                }\n            }\n\n            fromEl.selectedIndex = selectedIndex;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n      return (node.getAttribute && node.getAttribute('id')) || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML' || fromNode.nodeName === 'BODY') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = Object.create(null);\n        var keyedRemovalList = [];\n\n        function addKeyedRemoval(key) {\n            keyedRemovalList.push(key);\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    // if we find a duplicate #id node in cache, replace `el` with cache value\n                    // and morph it to the child node.\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    } else {\n                      handleNodeAdded(curChild);\n                    }\n                } else {\n                  // recursively call for curChild and it's children to see if we find something in\n                  // fromNodesLookup\n                  handleNodeAdded(curChild);\n                }\n\n                curChild = nextSibling;\n            }\n        }\n\n        function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n            // We have processed all of the \"to nodes\". If curFromNodeChild is\n            // non-null then we still have some from nodes left over that need\n            // to be removed\n            while (curFromNodeChild) {\n                var fromNextSibling = curFromNodeChild.nextSibling;\n                if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                    // Since the node is keyed it might be matched up later so we defer\n                    // the actual removal to later\n                    addKeyedRemoval(curFromNodeKey);\n                } else {\n                    // NOTE: we skip nested keyed nodes from being removed since there is\n                    //       still a chance they will be matched up later\n                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                }\n                curFromNodeChild = fromNextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (!childrenOnly) {\n                // optional\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                // update attributes on original DOM element first\n                morphAttrs(fromEl, toEl);\n                // optional\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n              morphChildren(fromEl, toEl);\n            } else {\n              specialElHandlers.TEXTAREA(fromEl, toEl);\n            }\n        }\n\n        function morphChildren(fromEl, toEl) {\n            var curToNodeChild = toEl.firstChild;\n            var curFromNodeChild = fromEl.firstChild;\n            var curToNodeKey;\n            var curFromNodeKey;\n\n            var fromNextSibling;\n            var toNextSibling;\n            var matchingFromEl;\n\n            // walk the children\n            outer: while (curToNodeChild) {\n                toNextSibling = curToNodeChild.nextSibling;\n                curToNodeKey = getNodeKey(curToNodeChild);\n\n                // walk the fromNode children all the way through\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n\n                    if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                    var curFromNodeType = curFromNodeChild.nodeType;\n\n                    // this means if the curFromNodeChild doesnt have a match with the curToNodeChild\n                    var isCompatible = undefined;\n\n                    if (curFromNodeType === curToNodeChild.nodeType) {\n                        if (curFromNodeType === ELEMENT_NODE) {\n                            // Both nodes being compared are Element nodes\n\n                            if (curToNodeKey) {\n                                // The target node has a key so we want to match it up with the correct element\n                                // in the original DOM tree\n                                if (curToNodeKey !== curFromNodeKey) {\n                                    // The current element in the original DOM tree does not have a matching key so\n                                    // let's check our lookup to see if there is a matching element in the original\n                                    // DOM tree\n                                    if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                        if (fromNextSibling === matchingFromEl) {\n                                            // Special case for single element removals. To avoid removing the original\n                                            // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                            // we will instead discard the current node and wait until the next\n                                            // iteration to properly match up the keyed target element with its matching\n                                            // element in the original tree\n                                            isCompatible = false;\n                                        } else {\n                                            // We found a matching keyed element somewhere in the original DOM tree.\n                                            // Let's move the original DOM node into the current position and morph\n                                            // it.\n\n                                            // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                            // the `removeNode()` function for the node that is being discarded so that\n                                            // all lifecycle hooks are correctly invoked\n                                            fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                            // fromNextSibling = curFromNodeChild.nextSibling;\n\n                                            if (curFromNodeKey) {\n                                                // Since the node is keyed it might be matched up later so we defer\n                                                // the actual removal to later\n                                                addKeyedRemoval(curFromNodeKey);\n                                            } else {\n                                                // NOTE: we skip nested keyed nodes from being removed since there is\n                                                //       still a chance they will be matched up later\n                                                removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                            }\n\n                                            curFromNodeChild = matchingFromEl;\n                                        }\n                                    } else {\n                                        // The nodes are not compatible since the \"to\" node has a key and there\n                                        // is no matching keyed node in the source tree\n                                        isCompatible = false;\n                                    }\n                                }\n                            } else if (curFromNodeKey) {\n                                // The original has a key\n                                isCompatible = false;\n                            }\n\n                            isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                            if (isCompatible) {\n                                // We found compatible DOM elements so transform\n                                // the current \"from\" node to match the current\n                                // target DOM node.\n                                // MORPH\n                                morphEl(curFromNodeChild, curToNodeChild);\n                            }\n\n                        } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                            // Both nodes being compared are Text or Comment nodes\n                            isCompatible = true;\n                            // Simply update nodeValue on the original node to\n                            // change the text value\n                            if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                            }\n\n                        }\n                    }\n\n                    if (isCompatible) {\n                        // Advance both the \"to\" child and the \"from\" child since we found a match\n                        // Nothing else to do as we already recursively called morphChildren above\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    // No compatible match so remove the old node from the DOM and continue trying to find a\n                    // match in the original DOM. However, we only do this if the from node is not keyed\n                    // since it is possible that a keyed node might match up with a node somewhere else in the\n                    // target tree and we don't want to discard it just yet since it still might find a\n                    // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                    // that didn't find a home\n                    if (curFromNodeKey) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n\n                    curFromNodeChild = fromNextSibling;\n                } // END: while(curFromNodeChild) {}\n\n                // If we got this far then we did not find a candidate match for\n                // our \"to node\" and we exhausted all of the children \"from\"\n                // nodes. Therefore, we will just append the current \"to\" node\n                // to the end\n                if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                    fromEl.appendChild(matchingFromEl);\n                    // MORPH\n                    morphEl(matchingFromEl, curToNodeChild);\n                } else {\n                    var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                    if (onBeforeNodeAddedResult !== false) {\n                        if (onBeforeNodeAddedResult) {\n                            curToNodeChild = onBeforeNodeAddedResult;\n                        }\n\n                        if (curToNodeChild.actualize) {\n                            curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                        }\n                        fromEl.appendChild(curToNodeChild);\n                        handleNodeAdded(curToNodeChild);\n                    }\n                }\n\n                curToNodeChild = toNextSibling;\n                curFromNodeChild = fromNextSibling;\n            }\n\n            cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphChildren(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --\u003e <span> or <div> --\u003e TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    if (morphedNode.nodeValue !== toNode.nodeValue) {\n                        morphedNode.nodeValue = toNode.nodeValue;\n                    }\n\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n                return;\n            }\n\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\nmodule.exports = morphdom;\n\n};"],
"names":["shadow$provide","global","require","module","exports","toElement","str","trim","HAS_TEMPLATE_SUPPORT","template","doc","createElement","innerHTML","content","childNodes","HAS_RANGE_SUPPORT","range","createRange","selectNode","body","fragment","createContextualFragment","compareNodeNames","fromEl","toEl","fromNodeName","nodeName","toNodeName","fromCodeStart","charCodeAt","toCodeStart","toUpperCase","createElementNS","name","namespaceURI","NS_XHTML","moveChildren","curChild","firstChild","nextChild","nextSibling","appendChild","syncBooleanAttrProp","setAttribute","removeAttribute","noop","defaultGetNodeKey","node","getAttribute","id","document","undefined","specialElHandlers","OPTION","parentNode","parentName","hasAttribute","selected","selectedIndex","INPUT","value","TEXTAREA","newValue","oldValue","nodeValue","placeholder","SELECT","i","optgroup","morphdom","morphdomFactory","morphAttrs","fromNode","toNode","options","walkDiscardedChildNodes","skipKeyedNodes","ELEMENT_NODE","nodeType","key","getNodeKey","keyedRemovalList","push","onNodeDiscarded","removeNode","onBeforeNodeDiscarded","removeChild","indexTree","DOCUMENT_FRAGMENT_NODE$1","fromNodesLookup","handleNodeAdded","el","onNodeAdded","unmatchedFromEl","replaceChild","morphEl","childrenOnly","toElKey","onBeforeElUpdated","onElUpdated","onBeforeElChildrenUpdated","curToNodeChild","curFromNodeChild","curToNodeKey","matchingFromEl","toNextSibling","fromNextSibling","isSameNode","curFromNodeKey","curFromNodeType","isCompatible","insertBefore","TEXT_NODE","COMMENT_NODE","onBeforeNodeAddedResult","onBeforeNodeAdded","actualize","ownerDocument","specialElHandler","toNodeHtml","Object","create","morphedNode","morphedNodeType","toNodeType","len","length","elToRemove","toNodeAttrs","attributes","DOCUMENT_FRAGMENT_NODE","attr","attrName","attrNamespaceURI","attrValue","localName","fromValue","getAttributeNS","prefix","setAttributeNS","fromNodeAttrs","d","hasAttributeNS","removeAttributeNS"]
}
