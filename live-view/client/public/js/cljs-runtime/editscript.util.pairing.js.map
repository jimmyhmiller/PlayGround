{"version":3,"sources":["editscript/util/pairing.cljc"],"mappings":"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","names":["editscript$util$pairing$IHeapNode$get_left$dyn","x__4428__auto__","m__4429__auto__","editscript.util.pairing/get-left","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","editscript$util$pairing$IHeapNode$get_right$dyn","editscript.util.pairing/get-right","editscript$util$pairing$IHeapNode$set_right$dyn","editscript.util.pairing/set-right","editscript$util$pairing$IHeapNode$add_child$dyn","editscript.util.pairing/add-child","editscript.util.pairing/IHeapNode","this","right","node","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","editscript.util.pairing/HeapNode","editscript.util.pairing/->HeapNode","item","priority","left","_","r","editscript.util.pairing/merge-nodes","a","b","editscript.util.pairing/insert","editscript.util.pairing/two-pass","n","editscript.util.pairing/PriorityMap","editscript.util.pairing/->PriorityMap","heap","map","cljs.core/seq","e","vec__46341","cljs.core.nth","cljs.core.assoc","cljs.core/contains?","cljs.core.dissoc","var_args","G__46378","editscript.util.pairing/priority-map","args-arr__4757__auto__","len__4736__auto__","i__4737__auto__","argseq__4758__auto__","cljs.core/IndexedSeq","js/Error","seq46376","self__4724__auto__","keyvals","cljs.core/even?","cljs.core/count","cljs.core.reduce","cljs.core/conj","editscript.util.pairing.priority_map","cljs.core.partition"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns ^:no-doc editscript.util.pairing\n  #?(:clj\n     (:import [clojure.lang IPersistentStack IPersistentMap IPersistentCollection]\n              [java.io Writer])))\n\n#?(:clj (set! *warn-on-reflection* true))\n\n(defprotocol IHeapNode\n  (get-left [this] \"Get the left child node\")\n  (get-right [this] \"Get the right sibling node\")\n  (set-right [this right] \"Set the right sibling\")\n  (add-child [this node] \"Add a child to a node\"))\n\n(deftype HeapNode [item\n                   priority\n                   ^:unsynchronized-mutable left\n                   ^:unsynchronized-mutable right]\n  IHeapNode\n  (get-left [_] left)\n  (get-right [_] right)\n  (set-right [_ r] (set! right r))\n  (add-child [this node]\n    (when left (set-right node left))\n    (set! left node)\n    this))\n\n#?(:clj (defmethod print-method HeapNode\n          [x ^Writer writer]\n          (print-method {:item     (.-item ^HeapNode x)\n                         :priority (.-priority ^HeapNode x)\n                         :left     (get-left x)\n                         :right    (get-right x)}\n                        writer)))\n\n(defn merge-nodes\n  [^HeapNode a ^HeapNode b]\n  (cond\n    (nil? a)                          b\n    (nil? b)                          a\n    (< (.-priority a) (.-priority b)) (add-child a b)\n    :else                             (add-child b a)))\n\n(defn insert\n  [^HeapNode node item priority]\n  (merge-nodes node (->HeapNode item priority nil nil)))\n\n(defn two-pass\n  [^HeapNode node]\n  (if (or (nil? node) (nil? (get-right node)))\n    node\n    (let [a node\n          b (get-right node)\n          n (get-right b)]\n      (set-right a nil)\n      (set-right b nil)\n      (merge-nodes (merge-nodes a b) (two-pass n)))))\n\n#?(:clj\n   (deftype PriorityMap [^:unsynchronized-mutable ^HeapNode heap\n                         ^:unsynchronized-mutable map]\n     IPersistentCollection\n     (count [_] (count map))\n     (cons [this e]\n       (let [[item priority] e]\n         (set! map (assoc map item priority))\n         (set! heap (insert heap item priority))\n         this))\n     (empty [this]\n       (set! heap nil)\n       (set! map {})\n       this)\n     (equiv [this o] (identical? this o))\n\n     IPersistentMap\n     (assoc [this item priority]\n       (set! map (assoc map item priority))\n       (set! heap (insert heap item priority))\n       this)\n     (hashCode [_] (hash map))\n     (equals [this o] (identical? this o))\n     (containsKey [_ item] (contains? map item))\n     (entryAt [_ k] (find map k))\n     (seq [_] (seq map))\n     (without [this item] (dissoc map item) this)\n\n     IPersistentStack\n     (peek [_] [(.-item heap) (.-priority heap)])\n     (pop [this]\n       (let [n (two-pass (get-left heap))]\n         (set! map (dissoc map (.-item heap)))\n         (set! heap n)\n         this)))\n\n   :cljs\n   (deftype PriorityMap [^:mutable ^HeapNode heap\n                         ^:mutable map]\n\n     ISeqable\n     (-seq [_] (seq map))\n\n     ICollection\n     (-conj [this e]\n       (let [[item priority] e]\n         (set! map (assoc map item priority))\n         (set! heap (insert heap item priority))\n         this))\n\n     IAssociative\n     (-assoc [this item priority]\n       (set! map (assoc map item priority))\n       (set! heap (insert heap item priority))\n       this)\n     (-contains-key? [_ item] (contains? map item))\n\n     IMap\n     (-dissoc [this item] (dissoc map item) this)\n\n     IStack\n     (-peek [_] [(.-item heap) (.-priority heap)])\n     (-pop [this]\n       (let [n (two-pass (get-left heap))]\n         (set! map (dissoc map (.-item heap)))\n         (set! heap n)\n         this))))\n\n(defn priority-map\n  \"A priority queue that also functions as a map.\n  Backed by a pairing heap implementation, and a regular map.\n  NB. We do not implement `decrease-key` for the pairing heap,\n  instead just insert the item again with a new priority.\"\n  ([]\n   (->PriorityMap nil {}))\n  ([& keyvals]\n   {:pre [(even? (count keyvals))]}\n   (reduce conj (priority-map) (partition 2 keyvals))))\n"]}