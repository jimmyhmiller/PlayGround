{"version":3,"sources":["editscript/util/common.cljc"],"mappings":"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","names":["editscript.util.common/szudzik","x","y","editscript.util.common/vec-edits*","a","b","n","m","delta","snake","k","ax","cljs.core.get","by","cljs.core._EQ_","cljs.core/type","fp-fn","fp","vec__45639","cljs.core.nth","vec__45642","dk-1","vk-1","dk+1","vk+1","x__4214__auto__","y__4215__auto__","sk","ops","es","cljs.core.conj","cljs.core.assoc_BANG_","p","cljs.core/transient","cljs.core/first","cljs.core/persistent!","cljs.core/second","cljs.core/rest","editscript.util.common/swap-ops","edits","cljs.core.mapv","op","G__45650","cljs.core/Keyword","editscript.util.common/min+plus->replace","v","cljs.core.into","cljs.core.comp","cljs.core.partition_by","cljs.core/integer?","cljs.core.mapcat","coll","cljs.core/count","vec__45654","ms","ps","p1__45652#","cljs.core/split-with","mc","pc","Math/abs","rs","cljs.core.repeat","cljs.core.concat","editscript.util.common/vec-edits","editscript.util.common/group-str","i","cljs.core/volatile!","cljs.core/identity","c","cljs.core.partial","cljs.core/+","s","cljs.core/deref","cljs.core.subs","editscript.util.common/diff-str","script","path","_","cb","unchanged","cljs.core.transduce","cljs.core.filter","edits'","editscript.edit/replace-str","editscript.edit/replace-data","js/editscript","js/editscript.util","js/editscript.util.common","js/editscript.util.common.diff-algo","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__45702","cljs.core/MultiFn","cljs.core.symbol","editscript.util.common/diff-algo","opts"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns ^:no-doc editscript.util.common\n  (:refer-clojure :exclude [slurp])\n  (:require [editscript.edit :as e]))\n\n#?(:clj (set! *warn-on-reflection* true))\n#?(:clj (set! *unchecked-math* :warn-on-boxed))\n\n(defn szudzik\n  \"Szudzik's paring function\"\n  [^long x ^long y]\n  (if (> y x)\n    (+ x (* y y))\n    (+ x y (* x x))))\n\n(defmacro coll-case\n  [a b script path type diff-fn opts]\n  `(case (e/get-type ~b)\n     :nil  (e/delete-data ~script ~path)\n     ~type (~diff-fn ~script ~path ~a ~b ~opts)\n     (e/replace-data ~script ~path ~b)))\n\n(defn- vec-edits*\n  \"Based on 'Wu, S. et al., 1990, An O(NP) Sequence Comparison Algorithm,\n  Information Processing Letters, 35:6, p317-23.'\n\n  A greedy algorithm, attempting to get to the furthest points with a given\n  number of edits. Very fast. However, it does not have replacement operations,\n  so it is not very useful for nested trees. It can also only do unit cost for\n  addition and deletion. \"\n  [a b ^long n ^long m]\n  (let [delta (- n m)\n        snake (fn [^long k ^long x]\n                (loop [x x y (- x k)]\n                  (let [ax (get a x) by (get b y)]\n                    (if (and (< x n)\n                             (< y m)\n                             (= (type ax) (type by))\n                             (= ax by))\n                      (recur (inc x) (inc y))\n                      x))))\n        fp-fn (fn [fp ^long k]\n                (let [[dk-1 vk-1] (get fp (dec k) [-1 []])\n                      dk-1        (inc ^long dk-1)\n                      [dk+1 vk+1] (get fp (inc k) [-1 []])\n                      x           (max dk-1 ^long dk+1)\n                      ^long sk    (snake k x)\n                      ops         (let [es (if (> dk-1 ^long dk+1)\n                                             (conj vk-1 :-)\n                                             (conj vk+1 :+))]\n                                    (if (> sk x)\n                                      (conj es (- sk x))\n                                      es))]\n                  (assoc! fp k [sk ops])))\n        fp    (loop [p 0 fp (transient {})]\n                (let [fp (loop [k (* -1 p) fp fp]\n                           (if (< k delta)\n                             (recur (inc k) (fp-fn fp k))\n                             fp))\n                      fp (loop [k (+ delta p) fp fp]\n                           (if (< delta k)\n                             (recur (dec k) (fp-fn fp k))\n                             fp))\n                      fp (fp-fn fp delta)]\n                  (if-not (= n (first (get fp delta)))\n                    (recur (inc p) fp)\n                    (persistent! fp))))]\n    (-> fp (get delta) second rest)))\n\n(defn- swap-ops\n  [edits]\n  (mapv (fn [op] (case op :+ :- :- :+ op)) edits))\n\n(defn min+plus->replace\n  \"Aggressively turn :- and :+ into replacements.\"\n  [v]\n  (into []\n        (comp\n          (partition-by integer?)\n          (mapcat\n            (fn [coll]\n              (let [m (first coll)]\n                (if (or (integer? m) (= 1 (count coll)))\n                  coll\n                  (let [p       (if (= m :-) :+ :-)\n                        [ms ps] (split-with #(= % m) coll)\n                        mc      (count ms)\n                        pc      (count ps)\n                        delta   (Math/abs (- mc pc))\n                        rs      (repeat (- (max mc pc) delta) :r)]\n                    (cond\n                      (< mc pc) (concat rs (repeat delta p))\n                      (= mc pc) rs\n                      :else     (concat (repeat delta m) rs))))))))\n        v))\n\n(defn vec-edits\n  [a b]\n  (let [n (count a)\n        m (count b)]\n    (min+plus->replace (if (< n m)\n                         (swap-ops (vec-edits* b a m n))\n                         (vec-edits* a b n m)))))\n\n(defn- group-str\n  [edits b]\n  (let [i (volatile! 0)]\n    (into []\n          (comp\n            (partition-by identity)\n            (mapcat\n              (fn [coll]\n                (let [x (first coll)\n                      c (count coll)]\n                  (cond\n                    (integer? x) (do (vswap! i (partial + x)) coll)\n                    (= :- x)     [[x c]]\n                    (= :r x)     (let [s (subs b @i (+ ^long @i c))]\n                                   (vswap! i (partial + c))\n                                   [[x s]])\n                    (= :+ x)     (let [s (subs b @i (+ ^long @i c))]\n                                   (vswap! i (partial + c))\n                                   [[x s]]))))))\n          edits)))\n\n(defn diff-str\n  [script path a b _]\n  (let [edits     (vec-edits a b)\n        cb        (count b)\n        unchanged (double (transduce (filter integer?) + edits))]\n    (if (< (* cb 0.7) unchanged)\n      (let [edits' (group-str edits b)]\n        (e/replace-str script path edits'))\n      (e/replace-data script path b))))\n\n#?(:clj (defmacro vslurp\n          [file]\n          (clojure.core/slurp file)))\n\n\n(defmulti diff-algo (fn [_ _ opts] (:algo opts)))\n"]}