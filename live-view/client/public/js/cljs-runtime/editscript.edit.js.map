{"version":3,"sources":["editscript/edit.cljc"],"mappings":"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","names":["editscript$edit$IEdit$auto_sizing$dyn","x__4428__auto__","m__4429__auto__","editscript.edit/auto-sizing","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","editscript$edit$IEdit$add_data$dyn","editscript.edit/add-data","editscript$edit$IEdit$delete_data$dyn","editscript.edit/delete-data","editscript$edit$IEdit$replace_data$dyn","editscript.edit/replace-data","editscript$edit$IEdit$replace_str$dyn","editscript.edit/replace-str","editscript.edit/IEdit","this","path","value","ops","editscript$edit$IEditScript$combine$dyn","editscript.edit/combine","editscript$edit$IEditScript$get_size$dyn","editscript.edit/get-size","editscript$edit$IEditScript$set_size$dyn","editscript.edit/set-size","editscript$edit$IEditScript$edit_distance$dyn","editscript.edit/edit-distance","editscript$edit$IEditScript$get_edits$dyn","editscript.edit/get-edits","editscript$edit$IEditScript$get_adds_num$dyn","editscript.edit/get-adds-num","editscript$edit$IEditScript$get_dels_num$dyn","editscript.edit/get-dels-num","editscript$edit$IEditScript$get_reps_num$dyn","editscript.edit/get-reps-num","editscript.edit/IEditScript","that","size","editscript$edit$IType$get_type$dyn","editscript.edit/get-type","editscript.edit/IType","editscript.edit/nada","js/editscript","js/editscript.edit","js/editscript.edit.t_editscript$edit45365","editscript.edit/t_editscript$edit45365","_45367","meta45366","cljs.core/PROTOCOL_SENTINEL","this__4369__auto__","writer__4370__auto__","opt__4371__auto__","cljs.core/-write","editscript.edit/->t_editscript$edit45365","_","goog.object/set","cljs.core/List","cljs.core/EmptyList","cljs.core/Cons","cljs.core/PersistentArrayMap","cljs.core/PersistentHashMap","cljs.core/PersistentTreeMap","cljs.core/PersistentVector","cljs.core/Subvec","cljs.core/MapEntry","cljs.core/PersistentHashSet","cljs.core/PersistentTreeSet","editscript.edit/sizing*","data","up","s","G__45386","fexpr__45385","cljs.core/-vreset!","cljs.core/-deref","seq__45387","cljs.core/seq","chunk__45388","count__45389","i__45390","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","child","editscript.edit/sizing","cljs.core/deref","cljs.core/volatile!","editscript.edit/EditScript","editscript.edit/->EditScript","edits","auto-sizing?","adds-num","dels-num","reps-num","cljs.core/long","cljs.core.conj","cljs.core.into","editscript.edit/valid-str-edits?","cljs.core/vector?","cljs.core/every?","x","or__4126__auto__","cljs.core/nat-int?","cljs.core._EQ_","vec__45558","cljs.core.nth","op","y","and__4115__auto__","fexpr__45563","G__45564","cljs.core/Keyword","js/Error","editscript.edit/valid-edit?","edit","c","vec__45565","fexpr__45574","editscript.edit/valid-edits?","editscript.edit/count-ops","adds","dels","reps","seq__45576","chunk__45577","count__45578","i__45579","vec__45593","vec__45598","G__45597","G__45601","editscript.edit/edits->script","vec__45604","o","writer","opts","cljs.core.write_all"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns editscript.edit\n  #?(:clj (:import [clojure.lang PersistentVector IPersistentList IPersistentMap\n                    IPersistentSet IPersistentVector])))\n\n(defprotocol ^:no-doc IEdit\n  (auto-sizing [this path value])\n  (add-data [this path value])\n  (delete-data [this path])\n  (replace-data [this path value])\n  (replace-str [this path ops]))\n\n(defprotocol IEditScript\n  (combine [this that]\n    \"Concate that editscript onto this editscript, return the new editscript\")\n  (get-size [this] \"Report the size of the editscript\")\n  (^:no-doc set-size [this size] \"Set the size, return the script\")\n  (edit-distance [this] \"Report the edit distance, i.e number of operations\")\n  (get-edits [this] \"Report the edits as a vector\")\n  (get-adds-num [this] \"Report the number of additions\")\n  (get-dels-num [this] \"Report the number of deletions\")\n  (get-reps-num [this] \"Report the number of replacements\"))\n\n(defprotocol ^:no-doc IType\n  (get-type [this] \"Return a type keyword, :val, :map, :lst, etc.\"))\n\n(defn ^:no-doc nada\n  \"A special type means 'not present'\"\n  []\n  (reify IType\n    (get-type [_] :nil)))\n\n#?(:clj\n   (extend-protocol IType\n     IPersistentList\n     (get-type [_] :lst)\n\n     IPersistentMap\n     (get-type [_] :map)\n\n     IPersistentVector\n     (get-type [_] :vec)\n\n     IPersistentSet\n     (get-type [_] :set)\n\n     nil\n     (get-type [_] :val)\n\n     String\n     (get-type [_] :str)\n\n     Object\n     (get-type [_] :val))\n\n   :cljs\n   (extend-protocol IType\n     List\n     (get-type [_] :lst)\n\n     EmptyList\n     (get-type [_] :lst)\n\n     Cons\n     (get-type [_] :lst)\n\n     PersistentArrayMap\n     (get-type [_] :map)\n\n     PersistentHashMap\n     (get-type [_] :map)\n\n     PersistentTreeMap\n     (get-type [_] :map)\n\n     PersistentVector\n     (get-type [_] :vec)\n\n     Subvec\n     (get-type [_] :vec)\n\n     MapEntry\n     (get-type [_] :vec)\n\n     PersistentHashSet\n     (get-type [_] :set)\n\n     PersistentTreeSet\n     (get-type [_] :set)\n\n     nil\n     (get-type [_] :val)\n\n     string\n     (get-type [_] :str)\n\n     default\n     (get-type [_] :val)))\n\n(defn- sizing*\n  [data size]\n  (let [up (fn [s] (inc ^long s))]\n    (if (#{:vec :lst :map :set} (get-type data))\n      (do (vswap! size up)\n          (doseq [child data]\n            (sizing* child size)))\n      (vswap! size up))))\n\n(defn- sizing\n  [data]\n  (let [size (volatile! 0) ]\n    (sizing* data size)\n    @size))\n\n(deftype ^:no-doc EditScript [^:unsynchronized-mutable ^PersistentVector edits\n                              ^boolean auto-sizing?\n                              ^:unsynchronized-mutable ^long size\n                              ^:unsynchronized-mutable ^long adds-num\n                              ^:unsynchronized-mutable ^long dels-num\n                              ^:unsynchronized-mutable ^long reps-num]\n\n  IEdit\n  (auto-sizing [this path value]\n    (when auto-sizing?\n      (set! size (long (+ 2 size (sizing path) (if value (sizing value) 0)))))\n    this)\n  (add-data [this path value]\n    (locking this\n      (set! adds-num (inc adds-num))\n      (set! edits (conj edits [path :+ value]))\n      (auto-sizing this path value)))\n  (delete-data [this path]\n    (locking this\n      (set! dels-num (inc dels-num))\n      (set! edits (conj edits [path :-]))\n      (auto-sizing this path nil)))\n  (replace-data [this path value]\n    (locking this\n      (set! reps-num (inc reps-num))\n      (set! edits (conj edits [path :r value]))\n      (auto-sizing this path value)))\n  (replace-str [this path ops]\n    (locking this\n      (set! reps-num (inc reps-num))\n      (set! edits (conj edits [path :s ops]))\n      (auto-sizing this path \"\")))\n\n  IEditScript\n  (combine [_ that]\n    (EditScript. (into edits (get-edits that))\n                 auto-sizing?\n                 (+ size (get-size that))\n                 (+ adds-num (get-adds-num that))\n                 (+ dels-num (get-dels-num that))\n                 (+ reps-num (get-reps-num that))))\n  (get-size [_] size)\n  (set-size [this s] (set! size (long s)) this)\n  (get-edits [_] edits)\n  (get-adds-num [_] adds-num)\n  (get-dels-num [_] dels-num)\n  (get-reps-num [_] reps-num)\n  (edit-distance [_] (+ adds-num dels-num reps-num)))\n\n(defn- valid-str-edits?\n  [data]\n  (and (vector? data)\n       (every? (fn [x]\n                 (or (nat-int? x)\n                     (and (vector? x)\n                          (= 2 (count x))\n                          (let [[op y] x]\n                            (and\n                              (#{:- :r :+} op)\n                              (case op\n                                :-      (nat-int? y)\n                                (:+ :r) (string? y)))))))\n               data)))\n\n(defn- valid-edit?\n  [edit]\n  (when (vector? edit)\n    (let [c (count edit)]\n      (when (< 1 c 4)\n        (let [[path op data] edit]\n          (and (vector? path)\n               (#{:- :r :+ :s} op)\n               (if (= :- op)\n                 (nil? data)\n                 (= c 3))\n               (if (= :s op)\n                 (valid-str-edits? data)\n                 true)))))))\n\n(defn valid-edits?\n  \"Check if the given vector represents valid edits that can be turned into an\n  EditScript\"\n  [edits]\n  (when (vector? edits)\n    (if (seq edits)\n      (every? valid-edit? edits)\n      true)))\n\n(defn- count-ops\n  [edits]\n  (let [adds (volatile! 0)\n        dels (volatile! 0)\n        reps (volatile! 0)]\n    (doseq [[_ op _] edits]\n      (case op\n        :+ (vswap! adds inc)\n        :- (vswap! dels inc)\n        :r (vswap! reps inc)))\n    [@adds @dels @reps]))\n\n(defn edits->script\n  \"Create an EditScript instance from a vector of edits, like those obtained\n  through calling `get-edits` on an EditScript\"\n  [edits]\n  (assert (valid-edits? edits) \"Not a vector of valid edits\")\n  (let [[adds dels reps] (count-ops edits)]\n    (->EditScript edits true (sizing edits) adds dels reps)))\n\n\n#?(:clj (defmethod print-method EditScript\n          [x ^java.io.Writer writer]\n          (print-method (get-edits x) writer))\n   :cljs (extend-protocol IPrintWithWriter\n           EditScript\n           (-pr-writer [o writer opts]\n             (write-all writer (str (get-edits o))))))\n"]}