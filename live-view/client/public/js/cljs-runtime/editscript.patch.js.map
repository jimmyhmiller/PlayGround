{"version":3,"sources":["editscript/patch.cljc"],"mappings":"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","names":["editscript.patch/vget","x","p","G__45618","cljs.core/Keyword","js/Error","editscript.edit/get-type","cljs.core.get","cljs.core.nth","editscript.patch/vdelete","G__45623","cljs.core.dissoc","cljs.core.into","cljs.core.subvec","clojure.set.difference","cljs.core/split-at","p1__45621#","cljs.core.concat","cljs.core/first","cljs.core/next","cljs.core/second","cljs.core.apply","cljs.core/list","editscript.patch/vadd","v","G__45632","cljs.core.assoc","cljs.core.conj","p1__45627#","editscript.patch/sreplace","edits","i","cljs.core/volatile!","cljs.core/str","cljs.core/persistent!","cljs.core.reduce","ss","e","cljs.core/integer?","s","cljs.core/deref","cljs.core.subs","cljs.core.partial","cljs.core/+","cljs.core.conj_BANG_","cljs.core._EQ_","cljs.core/count","cljs.core/transient","editscript.patch/vreplace","G__45653","p1__45651#","cljs.core/rest","editscript.patch/valter","o","G__45661","p__45665","vec__45669","editscript.patch/patch*","old","path","op","value","vec__45678","seq__45679","cljs.core/seq","first__45680","f","r","up"],"sourcesContent":[";;\n;; Copyright (c) Huahai Yang. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file LICENSE at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n;;\n\n(ns ^:no-doc editscript.patch\n  (:require [clojure.set :as set]\n            [editscript.edit :as e]))\n\n#?(:clj (set! *warn-on-reflection* true))\n#?(:clj (set! *unchecked-math* :warn-on-boxed))\n\n(defn- vget\n  [x p]\n  (case (e/get-type x)\n    (:map :vec :set) (get x p)\n    :lst             (nth x p)))\n\n(defn- vdelete\n  [x p]\n  (case (e/get-type x)\n    ;;NB, there is a special case where dissoc has no effect:\n    ;;if p is ##NaN, then p cannot be found in x, for (= ##NaN ##NaN) is false!\n    :map (dissoc x p)\n    :vec (into (subvec x 0 p) (subvec x (inc ^long p)))\n    :set (set/difference x #{p})\n    :lst (->> (split-at p x)\n              (#(concat (first %) (next (second %))))\n              (apply list))))\n\n(defn- vadd\n  [x p v]\n  (case (e/get-type x)\n    :map (assoc x p v)\n    :vec (into (conj (subvec x 0 p) v) (subvec x p))\n    :set (conj x v)\n    :lst (->> (split-at p x)\n              (#(concat (first %) (conj (second %) v)))\n              (apply list))))\n\n(defn- sreplace\n  [x edits]\n  (let [i (volatile! 0)]\n    (apply str\n           (persistent!\n            (reduce\n             (fn [ss e]\n               (cond\n                 (integer? e)     (let [s (subs x @i (+ ^long @i ^long e))]\n                                    (vswap! i (partial + e))\n                                    (conj! ss s))\n                 (= (first e) :-) (do (vswap! i (partial + (second e))) ss)\n                 (= (first e) :r) (let [s (second e)]\n                                    (vswap! i (partial + (count s)))\n                                    (conj! ss s))\n                 (= (first e) :+) (conj! ss (second e))))\n             (transient [])\n             edits)))))\n\n(defn- vreplace\n  [x p v]\n  (case (e/get-type x)\n    :map (assoc x p v)\n    :vec (into (conj (subvec x 0 p) v) (subvec x (inc ^long p)))\n    :set (-> x (set/difference #{p}) (conj v))\n    :lst (->> (split-at p x)\n              (#(concat (first %) (conj (rest (second %)) v)))\n              (apply list))))\n\n(defn- valter\n  [x p o v]\n  (case o\n    :- (vdelete x p)\n    :+ (vadd x p v)\n    :r (vreplace x p v)\n    :s (vreplace x p (sreplace (vget x p) v))))\n\n(defn patch*\n  [old [path op value]]\n  (letfn [(up [x p o v]\n            (let [[f & r] p]\n              (if r\n                (valter x f :r (up (vget x f) r o v))\n                (if (seq p)\n                  (valter x f o v)\n                  (if (= o :s)\n                    (sreplace x v)\n                    v)))))]\n    (up old path op value)))\n"]}